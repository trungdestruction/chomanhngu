%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -777816280, guid: 5183cb7b387a99c41ba5bea61c0be590, type: 3}
  m_Name: SVC_Luna
  m_EditorClassIdentifier: 
  _svcLunaVersion: 1
  _shaderVariants:
  - shader: {fileID: 10750, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - POINT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SPOT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - POINT_COOKIE
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _EMISSION
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SPOT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT_COOKIE
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 2
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 1
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 1
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - POINT
  - shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 1
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SPOT
  - shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 2
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _ADDITIONAL_LIGHTS
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _CASTING_PUNCTUAL_LIGHT_SHADOW
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - VERTEXLIGHT_ON
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SPOT
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT_COOKIE
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SPOT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SPOT
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT_COOKIE
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT_COOKIE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SPOT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT_COOKIE
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - POINT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - SPOT
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - DIRECTIONAL_COOKIE
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 8
    passId: 2
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - _ALPHATEST_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - _ALPHABLEND_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _FADING_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ALPHATEST_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ALPHABLEND_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ALPHABLEND_ON
    - _FADING_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_DEPTH
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - VERTEXLIGHT_ON
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _ALPHATEST_ON
  - shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 2
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _ALPHATEST_ON
  - shader: {fileID: 203, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  _usedByLunaBuild:
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shader: {fileID: 4800000, guid: ef3178aabaab247448c46c904e37bf43, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
  - shader: {fileID: 4800000, guid: ef3178aabaab247448c46c904e37bf43, type: 3}
    passType: 4
    passId: 3
    subShaderIndex: 1
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHATEST_ON
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 8
    passId: 2
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 2
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - SHADOWS_DEPTH
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 0
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - SHADOWS_DEPTH
    - _ALPHABLEND_ON
  - shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SPECULAR
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 203, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
    - _FADING_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - SHADOWS_DEPTH
    - _ALPHATEST_ON
  - shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
  _includedShaderVariants: []
  _excludedShaderVariants: []
  version: 712
  _shaderParsedShaders:
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 =
            u_xlat10_0;\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 10750, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - __
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4
            u_xlat2;\nbvec4 u_xlatb2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nfloat
            u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat5 = float(1.0) / u_xlat5;\n    u_xlat10 = (-u_xlat5) + u_xlat0.x;\n   
            u_xlat5 = unity_OrthoParams.w * u_xlat10 + u_xlat5;\n    u_xlat1.xyz
            = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat5) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlatb2 = lessThan(u_xlat0.zzzz,
            _LightSplitsFar);\n    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;\n   
            u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;\n    u_xlat2.z = u_xlatb2.z
            ? float(1.0) : 0.0;\n    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;\n;\n   
            u_xlat16_1 = u_xlat1 * u_xlat2;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_4 = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_4 = (u_xlatb0) ? 0.0 : u_xlat16_4;\n    SV_Target0
            = vec4(u_xlat16_4) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat u_xlat8;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = (-u_xlat3) + u_xlat0.x;\n   
            u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;\n    u_xlat1.xyz =
            (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat3) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat u_xlat8;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = (-u_xlat3) + u_xlat0.x;\n   
            u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;\n    u_xlat1.xyz =
            (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat3) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: HardShadow
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec3
            u_xlat3;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.z =
            texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat0.xy =
            vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0)
            + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz),
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);\n    u_xlat2.x
            = u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_4 = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_4 = (u_xlatb0) ? 0.0 : u_xlat16_4;\n    SV_Target0
            = vec4(u_xlat16_4) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 5
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4
            u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat5;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 6
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            float u_xlat16_2;\nvoid main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz +
            u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 7
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4
            u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat5;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 9
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            float u_xlat16_2;\nvoid main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz +
            u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 8
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    - Index: 2
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec3
            u_xlat3;\nmediump float u_xlat16_4;\nfloat u_xlat5;\nvec2 u_xlat7;\nfloat
            u_xlat10;\nvec2 u_xlat11;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0)
            / u_xlat5;\n    u_xlat10 = (-u_xlat5) + u_xlat0.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat10 + u_xlat5;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz,
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);\n    u_xlat2.x =
            u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat2 = u_xlat0.xyxy + u_xlat1.zwxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.zw).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat2.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat1.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat1.y = float(0.0);\n   
            u_xlat11.y = float(0.0);\n    u_xlat7.xy = u_xlat0.xy + u_xlat1.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat11.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat7.xy = u_xlat0.xy + u_xlat11.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat16_4 = u_xlat2.x + u_xlat16_4;\n   
            u_xlat2.x = 0.0;\n    u_xlat2.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat2.xy = u_xlat0.xy + u_xlat2.xy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat0.x + u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_4) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 10
          PassId: 0
          SubShaderIndex: 2
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat
            u_xlat8;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 11
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec2 u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump
            float u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nfloat
            u_xlat9;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z = 0.0;\n    u_xlat1.x
            = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x
            * u_xlat1.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n   
            u_xlat9 = (-u_xlat5) + u_xlat1.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat9 + u_xlat5;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat1.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat1.xzw;\n    u_xlat2.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = unity_OrthoParams.www
            * u_xlat1.xzw + u_xlat2.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat1.zzz +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 12
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat
            u_xlat8;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 14
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec2 u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump
            float u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nfloat
            u_xlat9;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z = 0.0;\n    u_xlat1.x
            = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x
            * u_xlat1.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n   
            u_xlat9 = (-u_xlat5) + u_xlat1.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat9 + u_xlat5;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat1.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat1.xzw;\n    u_xlat2.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = unity_OrthoParams.www
            * u_xlat1.xzw + u_xlat2.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat1.zzz +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 13
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 2
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: PCF_SOFT
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    - Index: 3
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4
            u_xlat2;\nbvec4 u_xlatb2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nvec2
            u_xlat7;\nvec2 u_xlat11;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat0.xy
            = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0)
            + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz),
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);\n    u_xlat2.x
            = u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat2 = u_xlat0.xyxy + u_xlat1.zwxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.zw).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat2.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat1.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat1.y = float(0.0);\n   
            u_xlat11.y = float(0.0);\n    u_xlat7.xy = u_xlat0.xy + u_xlat1.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat11.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat7.xy = u_xlat0.xy + u_xlat11.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat16_4 = u_xlat2.x + u_xlat16_4;\n   
            u_xlat2.x = 0.0;\n    u_xlat2.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat2.xy = u_xlat0.xy + u_xlat2.xy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat0.x + u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_4) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 15
          PassId: 0
          SubShaderIndex: 3
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat5;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 16
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nfloat
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z
            = 0.0;\n    u_xlat1.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat1.xy = vs_TEXCOORD0.zw;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat1.xxxx +
            u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat1.zzzz
            + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2 = u_xlat1.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat1.zzzz) + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 17
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat5;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 19
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nfloat
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z
            = 0.0;\n    u_xlat1.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat1.xy = vs_TEXCOORD0.zw;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat1.xxxx +
            u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat1.zzzz
            + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2 = u_xlat1.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat1.zzzz) + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 18
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 3
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float
            y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2
            unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x);
            a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4
            unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid
            main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x
            = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0
            = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3
            = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 =
            vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n   
            u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n   
            u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp
            vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x
            + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n   
            u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n   
            if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        definedKeywords:
        - _
        - UNITY_UI_CLIP_RECT
        - UNITY_UI_ALPHACLIP
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - _
          - UNITY_UI_ALPHACLIP
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        - Key: CANUSESPRITEATLAS
          Value: true
        - Key: PREVIEWTYPE
          Value: Plane
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - _
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3
            u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3
            u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3
            u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat
            u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump
            vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat
            u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump
            float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz
            * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz
            = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40
            = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz
            * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n       
            u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz
            * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n       
            u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x
            = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y
            = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z
            = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 =
            min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else
            {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40)
            * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n   
            u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n   
            u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x
            = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz
            * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz
            * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz
            / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x
            : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y
            : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z
            : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44
            = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz
            * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n       
            u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz
            = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx
            * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n   
            }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39,
            0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz
            = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42
            = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x
            = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n   
            u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39)
            + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x
            = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x *
            u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x *
            u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14,
            0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39)
            * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n   
            u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x
            + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39
            = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x
            = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x
            + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n   
            u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n   
            u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1
            ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41
            = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n   
            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26)
            * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz
            * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0
            = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump
            vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4
            unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp
            sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3
            u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4
            u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump
            vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3
            u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump
            float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump
            float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n   
            u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n   
            u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz
            = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4
            = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n   
            u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz
            * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz
            = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz
            = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n       
            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 =
            min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4)
            * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n   
            u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x
            = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz
            * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42
            = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n   
            }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz
            = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n   
            u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42,
            0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz
            = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53
            = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n   
            u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 =
            -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x
            * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x =
            max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n   
            u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x
            * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x
            * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001
            + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44)
            + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44
            = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28)
            * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45)
            + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45
            * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz
            * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3
            u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3
            u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump
            vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump
            vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat
            u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump
            float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump
            float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n   
            u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n   
            u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37)
            + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x
            + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39
            + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37
            * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) +
            1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x
            = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz *
            (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39)
            * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n       
            u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx
            * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n       
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x
            = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y
            = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z
            = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n       
            }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 =
            min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else
            {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37)
            * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n   
            u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43
            = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n           
            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40)
            * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40
            = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz
            * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz
            = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n       
            u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39
            = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz
            + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n   
            }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36,
            0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz
            = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39
            = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n   
            u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36)
            + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x
            = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13
            = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n   
            u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25
            + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36
            = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n   
            u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n   
            u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25
            = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n   
            u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n   
            u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001
            + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38)
            + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38
            = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24)
            * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz
            * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3
            u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3
            u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3
            u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat
            u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump
            vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat
            u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump
            float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz
            * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz
            = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40
            = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz
            * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n       
            u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz
            * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n       
            u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x
            = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y
            = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z
            = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 =
            min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else
            {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40)
            * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n   
            u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n   
            u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x
            = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz
            * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz
            * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz
            / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x
            : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y
            : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z
            : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44
            = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz
            * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n       
            u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz
            = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx
            * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n   
            }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39,
            0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz
            = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42
            = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x
            = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n   
            u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39)
            + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x
            = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x *
            u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x *
            u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14,
            0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39)
            * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n   
            u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x
            + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39
            = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x
            = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x
            + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n   
            u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n   
            u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1
            ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41
            = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n   
            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26)
            * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz
            * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp
            vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3
            u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3
            u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump
            vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat
            u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat
            u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n   
            u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz
            = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40
            = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz
            * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n       
            u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz
            * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n       
            u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x
            = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y
            = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z
            = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 =
            min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else
            {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40)
            * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n   
            u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n   
            u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x
            = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz
            * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz
            * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz
            / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x
            : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y
            : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z
            : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44
            = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz
            * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n       
            u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz
            = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx
            * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n   
            }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39,
            0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz
            = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42
            = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x
            = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n   
            u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39)
            + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x
            = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x *
            u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x *
            u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14,
            0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39)
            * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n   
            u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x
            + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39
            = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x
            = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x
            + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n   
            u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n   
            u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1
            ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41
            = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n   
            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26)
            * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz
            * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 15
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz
            = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz
            + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp
            sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nlowp
            vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3
            u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3
            u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat
            u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nlowp float u_xlat10_17;\nmediump
            vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat
            u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n   
            u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w
            * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n   
            u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture,
            u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42
            = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x
            = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n   
            u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz =
            u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz
            = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz
            = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39
            = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n       
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz
            = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz
            = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n       
            u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n   
            u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n           
            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39)
            * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) +
            unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz
            / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n           
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n           
            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n               
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n               
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n               
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n               
            u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y,
            u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n           
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n           
            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        }
            else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n       
            u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n       
            u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w
            * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n       
            u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz
            = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz
            = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n       
            u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx
            * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx
            + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz,
            (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13
            = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13,
            0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 =
            u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x +
            -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46
            * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n   
            u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42
            * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x
            = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n   
            u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n   
            u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x)
            + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27
            = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) *
            u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39
            = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27
            = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001
            + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41)
            + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41
            = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26)
            * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx
            + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz
            * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0,
            0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy
            * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n   
            u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0
            = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4
            + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n   
            u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0
            * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump
            vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4
            unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp
            sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3
            u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4
            u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump
            vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3
            u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump
            float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump
            float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n   
            u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n   
            u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz
            = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4
            = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n   
            u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz
            * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz
            = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz
            = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n       
            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 =
            min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4)
            * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n   
            u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x
            = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz
            * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42
            = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n   
            }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz
            = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n   
            u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42,
            0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz
            = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53
            = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n   
            u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 =
            -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x
            * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x =
            max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n   
            u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x
            * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x
            * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001
            + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44)
            + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44
            = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28)
            * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45)
            + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45
            * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz
            * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3
            u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3
            u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump
            vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump
            vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat
            u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump
            float u_xlat16_39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump
            float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n   
            u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n   
            u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37)
            + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x
            + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39
            + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37
            * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) +
            1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x
            = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz *
            (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39)
            * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n       
            u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx
            * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n       
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x
            = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y
            = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z
            = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n       
            }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 =
            min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else
            {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37)
            * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n   
            u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43
            = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n           
            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40)
            * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40
            = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz
            * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz
            = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n       
            u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39
            = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz
            + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n   
            }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36,
            0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz
            = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39
            = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n   
            u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36)
            + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x
            = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13
            = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n   
            u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25
            + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36
            = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n   
            u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n   
            u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25
            = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n   
            u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n   
            u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001
            + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38)
            + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38
            = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24)
            * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz
            * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0
            = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump
            vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4
            unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float
            u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3
            u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool
            u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float
            u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45
            = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength
            + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x +
            u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) +
            u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n   
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz
            = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n   
            u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz
            = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n       
            u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 =
            min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4)
            * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n   
            u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x
            = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz
            * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42
            = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n   
            }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz
            = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n   
            u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42,
            0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz
            = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53
            = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n   
            u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 =
            -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x
            * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x =
            max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n   
            u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x
            * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x
            * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001
            + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44)
            + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44
            = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28)
            * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45)
            + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45
            * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz
            * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 8
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4
            u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3
            u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat
            u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat
            u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump
            float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool
            u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n   
            u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37)
            + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x
            + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39
            + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37
            * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) +
            1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x
            = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz *
            (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39)
            * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n       
            u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx
            * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n       
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x
            = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y
            = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z
            = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n       
            }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 =
            min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else
            {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37)
            * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n   
            u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43
            = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n           
            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40)
            * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40
            = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz
            * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz
            = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n       
            u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39
            = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz
            + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n   
            }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36,
            0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz
            = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39
            = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n   
            u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36)
            + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x
            = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13
            = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n   
            u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25
            + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36
            = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n   
            u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n   
            u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25
            = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n   
            u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n   
            u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001
            + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38)
            + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38
            = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24)
            * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz
            * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 9
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp
            vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3
            u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3
            u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump
            vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat
            u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat
            u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n   
            u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz
            = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40
            = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz
            * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n       
            u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz
            * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n       
            u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x
            = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y
            = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z
            = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 =
            min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else
            {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40)
            * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n   
            u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n   
            u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x
            = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz
            * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz
            * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz
            / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x
            : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y
            : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z
            : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44
            = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz
            * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n       
            u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz
            = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx
            * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n   
            }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39,
            0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz
            = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42
            = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x
            = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n   
            u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39)
            + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x
            = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x *
            u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x *
            u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14,
            0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39)
            * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n   
            u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x
            + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39
            = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x
            = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x
            + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n   
            u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n   
            u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1
            ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41
            = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n   
            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26)
            * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz
            * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 11
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0,
            0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n   
            u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n   
            u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1
            = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5
            + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n   
            u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1
            * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n   
            u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n   
            u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy
            * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy
            = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp
            sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nlowp
            vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3
            u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3
            u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat
            u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nlowp float u_xlat10_17;\nmediump
            vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat
            u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n   
            u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w
            * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n   
            u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture,
            u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42
            = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x
            = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n   
            u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz =
            u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz
            = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz
            = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39
            = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n       
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz
            = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz
            = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n       
            u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n   
            u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n           
            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39)
            * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) +
            unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz
            / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n           
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n           
            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n               
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n               
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n               
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n               
            u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y,
            u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n           
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n           
            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        }
            else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n       
            u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n       
            u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w
            * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n       
            u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz
            = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz
            = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n       
            u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx
            * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx
            + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz,
            (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13
            = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13,
            0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 =
            u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x +
            -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46
            * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n   
            u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42
            * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x
            = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n   
            u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n   
            u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x)
            + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27
            = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) *
            u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39
            = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27
            = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001
            + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41)
            + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41
            = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26)
            * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx
            + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz
            * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz
            = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz
            + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float
            u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp
            vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3
            u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nlowp float
            u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat
            u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n   
            u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w
            * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n   
            u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture,
            u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42
            = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x
            = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n   
            u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz =
            u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz
            = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz
            = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39
            = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n       
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz
            = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz
            = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n       
            u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n   
            u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n           
            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39)
            * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) +
            unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz
            / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n           
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n           
            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n               
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n               
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n               
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n               
            u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y,
            u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n           
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n           
            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        }
            else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n       
            u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n       
            u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w
            * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n       
            u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz
            = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz
            = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n       
            u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx
            * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx
            + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz,
            (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13
            = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13,
            0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 =
            u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x +
            -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46
            * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n   
            u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42
            * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x
            = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n   
            u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n   
            u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x)
            + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27
            = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) *
            u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39
            = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27
            = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001
            + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41)
            + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41
            = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26)
            * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx
            + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz
            * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 10
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0,
            0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy
            * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n   
            u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0
            = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4
            + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n   
            u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0
            * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump
            vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4
            unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float
            u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3
            u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool
            u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float
            u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45
            = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength
            + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x +
            u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) +
            u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n   
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz
            = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n   
            u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz
            = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n       
            u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 =
            min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4)
            * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n   
            u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x
            = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz
            * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42)
            * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42
            = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n   
            }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz
            = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n   
            u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42,
            0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz
            = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53
            = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n   
            u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 =
            -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x
            * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x =
            max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n   
            u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x
            * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x
            * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001
            + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44)
            + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44
            = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28)
            * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45)
            + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n   
            u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45
            * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz
            * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 12
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz
            = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump
            float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4
            u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3
            u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat
            u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat
            u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump
            float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nbool
            u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_38);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n   
            u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37)
            + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x
            + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39
            + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37
            * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) +
            1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x
            = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz *
            (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39)
            * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n   
            if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n       
            u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat4.xxx
            * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n       
            u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n       
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x
            = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y
            = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z
            = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n       
            }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 =
            min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else
            {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37)
            * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n   
            u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43
            = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n           
            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat5.xyz = vec3(u_xlat40)
            * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40
            = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz
            * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz
            = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n       
            u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39
            = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_39);\n        u_xlat4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz
            + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n   
            }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36,
            0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz
            = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n   
            u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39
            = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x)
            + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n   
            u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36)
            + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x
            = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13
            = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n   
            u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25
            + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36
            = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n   
            u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n   
            u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25
            = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n   
            u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n   
            u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001
            + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38)
            + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38
            = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24)
            * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n   
            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz
            * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n   
            u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 13
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0,
            0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n   
            u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n   
            u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1
            = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5
            + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n   
            u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1
            * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n   
            u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n   
            u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy
            * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy
            = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3
            vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float
            u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp
            vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3
            u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nlowp float
            u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat
            u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump
            float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz
            * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz
            + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n   
            u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n   
            u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w
            * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n   
            u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture,
            u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42
            = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n   
            u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x
            = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n   
            u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz =
            u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat17.xyz
            = u_xlat17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat17.xyz
            = exp2(u_xlat17.xyz);\n    u_xlat17.xyz = u_xlat17.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat17.xyz = max(u_xlat17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39
            = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat39
            = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat39 = inversesqrt(u_xlat39);\n       
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat16_19.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz
            = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz
            = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n       
            u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n   
            u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz
            * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb39){\n            u_xlat39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n           
            u_xlat39 = inversesqrt(u_xlat39);\n            u_xlat9.xyz = vec3(u_xlat39)
            * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) +
            unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz
            / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n           
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n           
            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n               
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n               
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n               
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n               
            u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y,
            u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n           
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n           
            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        }
            else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n       
            u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n       
            u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w
            * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n       
            u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat5.xyz
            = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz
            = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_19.xyz;\n       
            u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx
            * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx
            + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n   
            u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz,
            (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13
            = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13,
            0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 =
            u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x +
            -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46
            * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n   
            u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42
            * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x
            = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n   
            u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n   
            u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x)
            + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27
            = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) *
            u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39
            = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27
            = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n   
            u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x =
            u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x
            = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n   
            u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001
            + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1
            = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41)
            + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41
            = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26)
            * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat17.xyz * u_xlat16_6.xxx
            + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n   
            u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42
            * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz
            * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n   
            u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 14
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - INSTANCING_ON
        - _
        - _NORMALMAP
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - _PARALLAXMAP
        - DIRECTIONAL
        - LIGHTPROBE_SH
        - SHADOWS_SHADOWMASK
        - DYNAMICLIGHTMAP_ON
        - LIGHTMAP_ON
        - LIGHTMAP_SHADOW_MIXING
        - DIRLIGHTMAP_COMBINED
        - SHADOWS_SCREEN
        - VERTEXLIGHT_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _DETAIL_MULX2
        - _EMISSION
        - _GLOSSYREFLECTIONS_OFF
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _SPECULARHIGHLIGHTS_OFF
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - _
          - _PARALLAXMAP
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool
            u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat
            u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n   
            u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21)
            + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n   
            u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21,
            0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz
            = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz,
            u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22
            = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0,
            1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n   
            u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n   
            u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n   
            u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15
            * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n   
            u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n   
            u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8
            + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14
            = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n   
            u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x
            + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x =
            u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x
            = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_2.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz =
            u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n   
            u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture2D(_LightTexture0,
            vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22)
            + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz
            = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw
            = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x *
            u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n   
            u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22
            + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x
            = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x *
            u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x
            * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n   
            u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7)
            * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz =
            u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz =
            u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 16
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - POINT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz
            = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump
            vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat
            u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool
            u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz,
            vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x
            = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n   
            u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n   
            u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz,
            (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n   
            u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6,
            0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12
            * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7
            = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n   
            u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13
            + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7
            = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19
            = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x *
            u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n   
            u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19
            + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18
            = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 =
            u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n   
            u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n   
            u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz
            = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n   
            u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n   
            u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n   
            u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x *
            u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n   
            u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx
            + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n   
            u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x
            * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n   
            u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n   
            u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x =
            u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 =
            u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n   
            u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x
            = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n   
            u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 17
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2]
            * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x
            = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x =
            dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n   
            u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz
            = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz
            = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz,
            u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22
            = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0,
            1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n   
            u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n   
            u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n   
            u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15
            * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n   
            u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n   
            u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8
            + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14
            = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n   
            u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x
            + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x =
            u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x
            = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz =
            u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz *
            u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26)
            + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n   
            u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x
            = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n   
            u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x
            * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n   
            u_xlat7 = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = vec3(u_xlat7)
            * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat3.xyz;\n    u_xlat0.xyz =
            u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz =
            u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 18
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nbool u_xlatb14;\nfloat u_xlat16;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nmediump float u_xlat16_22;\nfloat u_xlat23;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0,
            u_xlat0.xyz).w;\n    u_xlat7 = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat7;\n    u_xlat16_1.xyz = u_xlat0.xxx *
            _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n   
            u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21)
            + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21,
            0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz
            = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz,
            u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat23
            = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0,
            1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x
            = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n   
            u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n   
            u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat9 = u_xlat14 * u_xlat14;\n   
            u_xlat16 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat21 = u_xlat16
            * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n   
            u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat21 = u_xlat9 / u_xlat21;\n   
            u_xlat9 = (-u_xlat14) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat9
            + u_xlat14;\n    u_xlat14 = u_xlat2.x * u_xlat9 + u_xlat14;\n    u_xlat14
            = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_22 = -abs(u_xlat0.x) + 1.0;\n   
            u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat14;\n    u_xlat0.x = u_xlat0.x
            + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x =
            u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x
            = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz =
            u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz *
            u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat23) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26)
            + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n   
            u_xlat16_5.x = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_5.x
            = u_xlat23 + u_xlat23;\n    u_xlat16_5.x = u_xlat23 * u_xlat16_5.x;\n   
            u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_22 = u_xlat16_5.x
            * u_xlat16_22 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_19
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n   
            u_xlat7 = u_xlat2.x * u_xlat16_22;\n    u_xlat16_1.xyz = vec3(u_xlat7)
            * u_xlat16_1.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;\n    u_xlat0.xyz =
            u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    SV_Target0.xyz =
            u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 19
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - POINT_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy
            * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy
            * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy
            * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat
            u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool
            u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n   
            u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz,
            (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n   
            u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7,
            0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14
            * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8
            = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n   
            u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15
            + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8
            = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22
            = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x *
            u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n   
            u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22
            + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21
            = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 =
            u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n   
            u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n   
            u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz
            = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n   
            u_xlatb22 = u_xlat16_5.x!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n   
            u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx
            + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat22 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat16_5.xyz
            = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21)
            * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26)
            + u_xlat16_11.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_11.xyz;\n   
            u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x
            * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n   
            u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n   
            u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x =
            u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 =
            u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n   
            u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x
            = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic)
            * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_25);\n   
            u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 20
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2]
            * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump
            float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool
            u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat
            u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz
            = u_xlat1.xyz / u_xlat1.www;\n    u_xlat7.x = texture2D(_ShadowMapTexture,
            u_xlat7.xy).x;\n    u_xlatb7 = u_xlat7.x<u_xlat7.z;\n    u_xlat16_2.x
            = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = (-u_xlat16_2.x)
            + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_9 + u_xlat16_2.x;\n   
            u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9
            = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n   
            u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21)
            + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21,
            0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz
            = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz,
            u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22
            = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0,
            1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x
            = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n   
            u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n   
            u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n   
            u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15
            * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n   
            u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n   
            u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8
            + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14
            = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n   
            u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x
            + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x =
            u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x
            = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat3.xyz =
            u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n   
            u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz *
            u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26)
            + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n   
            u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x
            = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n   
            u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_23 = u_xlat16_5.x
            * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x
            * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n   
            u_xlat7.x = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat7.xxx
            * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat3.xyz;\n    u_xlat0.xyz =
            u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz =
            u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 21
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz
            = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz
            + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nlowp
            float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat
            u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x
            = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x +
            u_xlat10_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z
            = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21)
            + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n   
            u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz,
            u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22
            = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n   
            u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n   
            u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness)
            + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x,
            0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 =
            u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22
            + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8
            = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15
            = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n   
            u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21)
            * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 =
            u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n   
            u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21
            = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n   
            u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n   
            u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz
            = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n   
            u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n   
            u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n   
            u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n   
            u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x
            + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x
            = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23
            + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12
            * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12
            + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n   
            u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz
            = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz
            * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 22
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz
            + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat3.xyz
            = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy
            * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy
            * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy
            * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3
            u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat
            u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x
            = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x +
            u_xlat10_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx
            + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x =
            u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z
            = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21)
            + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n   
            u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz,
            u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22
            = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n   
            u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n   
            u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness)
            + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x,
            0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 =
            u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22
            + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8
            = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15
            = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n   
            u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21)
            * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 =
            u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n   
            u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21
            = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n   
            u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n   
            u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz
            = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n   
            u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n   
            u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n   
            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0,
            1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n   
            u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n   
            u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x
            + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x
            = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23
            + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12
            * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12
            + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n   
            u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz
            = u_xlat1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz
            * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 23
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - _
        - _NORMALMAP
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - _PARALLAXMAP
        - POINT
        - DIRECTIONAL
        - SPOT
        - POINT_COOKIE
        - DIRECTIONAL_COOKIE
        - SHADOWS_SHADOWMASK
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_DEPTH
        - SHADOWS_SOFT
        - SHADOWS_SCREEN
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _DETAIL_MULX2
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _SPECULARHIGHLIGHTS_OFF
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - _
          - _PARALLAXMAP
        - Keywords:
          - POINT
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - SPOT
        - Keywords:
          - POINT_COOKIE
        - Keywords:
          - DIRECTIONAL_COOKIE
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 24
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 25
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - INSTANCING_ON
        - _
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - _PARALLAXMAP
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - _
          - _PARALLAXMAP
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      SerializedPassCount: 5
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w =
            0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp float u_xlat10_0;\nmediump float
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat
            u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid
            main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1
            = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x
            = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz
            = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n   
            u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n   
            u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n   
            u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8
            = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n   
            u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29
            = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0,
            1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) +
            (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    SV_Target0.xyz
            = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 26
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0
            = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n   
            u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x *
            u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n   
            u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz
            = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump
            float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness))
            + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x
            = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz *
            (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_11.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n   
            u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n   
            u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz
            = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n   
            u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 27
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD4.w
            = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y =
            u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp
            sampler2D unity_NHxRoughness;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp float u_xlat10_0;\nmediump float
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nvec2 u_xlat7;\nlowp float u_xlat10_7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_24;\nvoid
            main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1
            = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x
            = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;\n    u_xlat16_8.xyz
            = u_xlat2.xyz * (-u_xlat16_8.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n   
            u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat14 = u_xlat0.x;\n   
            u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n   
            u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat7.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat7.x
            = u_xlat7.x * 16.0;\n    u_xlat16_24 = (-u_xlat14) + 1.0;\n    u_xlat14
            = u_xlat16_24 * u_xlat16_24;\n    u_xlat14 = u_xlat16_24 * u_xlat14;\n   
            u_xlat14 = u_xlat16_24 * u_xlat14;\n    u_xlat16_24 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_24) + 1.0;\n   
            u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_6.xyz = (-u_xlat16_12.xyz) +
            u_xlat16_5.xxx;\n    u_xlat16_6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz
            + u_xlat16_12.xyz;\n    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_12.xyz;\n   
            u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat7.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n   
            u_xlat16_6.xyz = vec3(u_xlat10_7) * _LightColor0.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xxx * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz
            * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 28
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w =
            0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp float u_xlat10_0;\nmediump float
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat
            u_xlat16;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid
            main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1
            = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x
            = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz
            = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n   
            u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat16 = u_xlat0.x;\n   
            u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n   
            u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8
            = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n   
            u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29
            = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0,
            1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) +
            (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    SV_Target0.xyz
            = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 30
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w =
            0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp sampler2D
            unity_NHxRoughness;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump
            float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw
            = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n   
            u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz
            = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0.x =
            texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat10_0.xxx
            * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n   
            u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n   
            u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx)
            + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx
            * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8
            = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n   
            u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29
            = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0,
            1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) +
            (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 41
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz
            = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_3.xyz);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz
            = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz
            + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp
            sampler2D unity_NHxRoughness;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec2 u_xlat9;\nlowp float u_xlat10_9;\nmediump vec3
            u_xlat16_10;\nfloat u_xlat18;\nmediump float u_xlat16_30;\nmediump float
            u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) +
            vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_10.x
            = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz *
            (-u_xlat16_10.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_10.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat18 = u_xlat0.x;\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat9.x
            = u_xlat9.x * 16.0;\n    u_xlat16_30 = (-u_xlat18) + 1.0;\n    u_xlat18
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat18 = u_xlat16_30 * u_xlat18;\n   
            u_xlat18 = u_xlat16_30 * u_xlat18;\n    u_xlat16_30 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_31 = (-u_xlat16_30) + 1.0;\n   
            u_xlat16_31 = u_xlat16_31 + _Glossiness;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_30) * u_xlat2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_8.xyz = vec3(u_xlat16_31) + (-u_xlat16_6.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat18) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat9.xy =
            vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_9 = texture2D(_ShadowMapTexture,
            u_xlat9.xy).x;\n    u_xlat16_4.xyz = vec3(u_xlat10_9) * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz =
            u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 29
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy)
            + unity_4LightPosY0;\n    u_xlat4 = u_xlat1.yyyy * u_xlat3;\n    u_xlat3
            = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;\n   
            u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n    u_xlat4 = (-u_xlat0.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0
            = u_xlat4 * u_xlat1.zzzz + u_xlat2;\n    u_xlat2 = u_xlat4 * u_xlat4
            + u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n   
            u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0
            * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_5.xyz);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz
            = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz + u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump
            float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness))
            + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x
            = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz *
            (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_11.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n   
            u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n   
            u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz
            = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n   
            u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 31
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD4.w
            = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y =
            u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp
            sampler2D unity_NHxRoughness;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp float u_xlat10_0;\nmediump float
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nvec2 u_xlat7;\nlowp float u_xlat10_7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_24;\nvoid
            main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1
            = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x
            = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;\n    u_xlat16_8.xyz
            = u_xlat2.xyz * (-u_xlat16_8.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap,
            vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n   
            u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n    u_xlat14 = u_xlat0.x;\n   
            u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n   
            u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n   
            u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat7.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat7.x
            = u_xlat7.x * 16.0;\n    u_xlat16_24 = (-u_xlat14) + 1.0;\n    u_xlat14
            = u_xlat16_24 * u_xlat16_24;\n    u_xlat14 = u_xlat16_24 * u_xlat14;\n   
            u_xlat14 = u_xlat16_24 * u_xlat14;\n    u_xlat16_24 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_24) + 1.0;\n   
            u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_6.xyz = (-u_xlat16_12.xyz) +
            u_xlat16_5.xxx;\n    u_xlat16_6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz
            + u_xlat16_12.xyz;\n    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_12.xyz;\n   
            u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat7.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n   
            u_xlat16_6.xyz = vec3(u_xlat10_7) * _LightColor0.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xxx * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz
            * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 32
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0
            = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n   
            u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x *
            u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n   
            u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz
            = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp sampler2D
            unity_NHxRoughness;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump
            float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness))
            + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x
            = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz *
            (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_11.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n   
            u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n   
            u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz
            = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n   
            u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 34
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD4.w
            = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y =
            u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec2
            u_xlat7;\nlowp float u_xlat10_7;\nmediump vec3 u_xlat16_8;\nmediump vec3
            u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_24;\nvoid main()\n{\n   
            u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1 =
            (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1 = u_xlat0.x
            * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;\n    u_xlat16_8.xyz
            = u_xlat2.xyz * (-u_xlat16_8.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0.x =
            texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat10_0.xxx
            * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n   
            u_xlat14 = u_xlat0.x;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n   
            u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx)
            + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n   
            u_xlat0.y = u_xlat2.x * u_xlat2.x;\n    u_xlat7.x = texture2D(unity_NHxRoughness,
            u_xlat0.yw).x;\n    u_xlat7.x = u_xlat7.x * 16.0;\n    u_xlat16_24 =
            (-u_xlat14) + 1.0;\n    u_xlat14 = u_xlat16_24 * u_xlat16_24;\n    u_xlat14
            = u_xlat16_24 * u_xlat14;\n    u_xlat14 = u_xlat16_24 * u_xlat14;\n   
            u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x
            = (-u_xlat16_24) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n   
            u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz =
            u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_6.xyz = (-u_xlat16_12.xyz) + u_xlat16_5.xxx;\n   
            u_xlat16_6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz + u_xlat16_12.xyz;\n   
            u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_12.xyz;\n    u_xlat16_5.xyz =
            u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat7.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n   
            u_xlat16_6.xyz = vec3(u_xlat10_7) * _LightColor0.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz
            * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap,
            vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 35
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    vs_TEXCOORD1.xyz = u_xlat0.xxx
            * u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w =
            0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp sampler2D
            unity_NHxRoughness;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat16;\nmediump
            float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xw
            = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x)
            * 0.699999988 + 1.70000005;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n   
            u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;\n    u_xlat16_9.xyz
            = u_xlat2.xyz * (-u_xlat16_9.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0.x =
            texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat10_0.xxx
            * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n   
            u_xlat16 = u_xlat0.x;\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n   
            u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx)
            + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat0.xxx
            * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_27 = (-u_xlat16) + 1.0;\n    u_xlat8
            = u_xlat16_27 * u_xlat16_27;\n    u_xlat8 = u_xlat16_27 * u_xlat8;\n   
            u_xlat8 = u_xlat16_27 * u_xlat8;\n    u_xlat16_27 = (-_Metallic) * 0.779083729
            + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    u_xlat16_29
            = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0,
            1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301,
            0.220916301, 0.220916301);\n    u_xlat16_7.xyz = vec3(u_xlat16_29) +
            (-u_xlat16_6.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat8) * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 37
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD2 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n   
            u_xlat3 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat1.yyyy)
            + unity_4LightPosY0;\n    u_xlat5 = u_xlat2.yyyy * u_xlat4;\n    u_xlat4
            = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;\n   
            u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n    u_xlat5 = (-u_xlat1.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1
            = u_xlat5 * u_xlat2.zzzz + u_xlat3;\n    u_xlat3 = u_xlat5 * u_xlat5
            + u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n   
            u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1
            * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_3 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat2.w = 1.0;\n   
            u_xlat16_7.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_7.y = dot(unity_SHAg,
            u_xlat2);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_6.xyz);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz
            = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz + u_xlat2.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y
            = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp
            sampler2D unity_NHxRoughness;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec2 u_xlat9;\nlowp float u_xlat10_9;\nmediump vec3
            u_xlat16_10;\nfloat u_xlat18;\nmediump float u_xlat16_30;\nmediump float
            u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) +
            vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_10.x
            = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz *
            (-u_xlat16_10.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_10.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = vec3(u_xlat10_0) * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat10_0) * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat18 = u_xlat0.x;\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat9.x
            = u_xlat9.x * 16.0;\n    u_xlat16_30 = (-u_xlat18) + 1.0;\n    u_xlat18
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat18 = u_xlat16_30 * u_xlat18;\n   
            u_xlat18 = u_xlat16_30 * u_xlat18;\n    u_xlat16_30 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_31 = (-u_xlat16_30) + 1.0;\n   
            u_xlat16_31 = u_xlat16_31 + _Glossiness;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_30) * u_xlat2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_8.xyz = vec3(u_xlat16_31) + (-u_xlat16_6.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat18) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat9.xy =
            vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_9 = texture2D(_ShadowMapTexture,
            u_xlat9.xy).x;\n    u_xlat16_4.xyz = vec3(u_xlat10_9) * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz =
            u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 33
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w
            = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz
            = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_3.xyz);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz
            = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz
            + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec2 u_xlat9;\nlowp float u_xlat10_9;\nmediump vec3
            u_xlat16_10;\nfloat u_xlat18;\nmediump float u_xlat16_30;\nmediump float
            u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) +
            vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_10.x
            = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz *
            (-u_xlat16_10.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_10.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat18 = u_xlat0.x;\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat9.x
            = u_xlat9.x * 16.0;\n    u_xlat16_30 = (-u_xlat18) + 1.0;\n    u_xlat18
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat18 = u_xlat16_30 * u_xlat18;\n   
            u_xlat18 = u_xlat16_30 * u_xlat18;\n    u_xlat16_30 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_31 = (-u_xlat16_30) + 1.0;\n   
            u_xlat16_31 = u_xlat16_31 + _Glossiness;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_30) * u_xlat2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_8.xyz = vec3(u_xlat16_31) + (-u_xlat16_6.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat18) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat9.xy =
            vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_9 = texture2D(_ShadowMapTexture,
            u_xlat9.xy).x;\n    u_xlat16_4.xyz = vec3(u_xlat10_9) * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_3.xyz =
            u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 36
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4
            u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n   
            u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy)
            + unity_4LightPosY0;\n    u_xlat4 = u_xlat1.yyyy * u_xlat3;\n    u_xlat3
            = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;\n   
            u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n    u_xlat4 = (-u_xlat0.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0
            = u_xlat4 * u_xlat1.zzzz + u_xlat2;\n    u_xlat2 = u_xlat4 * u_xlat4
            + u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n   
            u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0
            * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_5.xyz);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz
            = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat0.xyz + u_xlat1.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform highp sampler2D
            unity_NHxRoughness;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp
            samplerCube unity_SpecCube0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat20;\nmediump float u_xlat16_33;\nmediump
            float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness))
            + vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_11.x
            = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat2.xyz *
            (-u_xlat16_11.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_11.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat20 = u_xlat0.x;\n    u_xlat20 = clamp(u_xlat20,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x;\n    u_xlat0.y = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat0.x
            = u_xlat0.x * 16.0;\n    u_xlat16_33 = (-u_xlat20) + 1.0;\n    u_xlat10
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat10 = u_xlat16_33 * u_xlat10;\n   
            u_xlat10 = u_xlat16_33 * u_xlat10;\n    u_xlat16_33 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_34 = (-u_xlat16_33) + 1.0;\n   
            u_xlat16_34 = u_xlat16_34 + _Glossiness;\n    u_xlat16_34 = clamp(u_xlat16_34,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz
            = vec3(u_xlat16_33) * u_xlat2.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_9.xyz = vec3(u_xlat16_34) + (-u_xlat16_7.xyz);\n   
            u_xlat16_9.xyz = vec3(u_xlat10) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 38
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = inversesqrt(u_xlat1.x);\n    vs_TEXCOORD1.xyz = u_xlat1.xxx
            * u_xlat2.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0,
            0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD4.w
            = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y =
            u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec2
            u_xlat7;\nlowp float u_xlat10_7;\nmediump vec3 u_xlat16_8;\nmediump vec3
            u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_24;\nvoid main()\n{\n   
            u_xlat0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);\n    u_xlat16_1 =
            (-u_xlat0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_1 = u_xlat0.x
            * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz,
            u_xlat2.xyz);\n    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;\n    u_xlat16_8.xyz
            = u_xlat2.xyz * (-u_xlat16_8.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1
            = textureCubeLodEXT(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_1);\n   
            u_xlat16_3.x = u_xlat10_1.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w
            * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;\n    u_xlat10_0.x =
            texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.xyz = u_xlat10_0.xxx
            * u_xlat16_3.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat2.xyz);\n   
            u_xlat14 = u_xlat0.x;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n   
            u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat4.xyz = u_xlat2.xyz * (-u_xlat0.xxx)
            + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n   
            u_xlat0.y = u_xlat2.x * u_xlat2.x;\n    u_xlat7.x = texture2D(unity_NHxRoughness,
            u_xlat0.yw).x;\n    u_xlat7.x = u_xlat7.x * 16.0;\n    u_xlat16_24 =
            (-u_xlat14) + 1.0;\n    u_xlat14 = u_xlat16_24 * u_xlat16_24;\n    u_xlat14
            = u_xlat16_24 * u_xlat14;\n    u_xlat14 = u_xlat16_24 * u_xlat14;\n   
            u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x
            = (-u_xlat16_24) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n   
            u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz =
            u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_6.xyz = (-u_xlat16_12.xyz) + u_xlat16_5.xxx;\n   
            u_xlat16_6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz + u_xlat16_12.xyz;\n   
            u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_12.xyz;\n    u_xlat16_5.xyz =
            u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat7.xy = vs_TEXCOORD7.xy
            / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n   
            u_xlat16_6.xyz = vec3(u_xlat10_7) * _LightColor0.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz
            * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap,
            vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 39
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD2 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n   
            u_xlat3 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat1.yyyy)
            + unity_4LightPosY0;\n    u_xlat5 = u_xlat2.yyyy * u_xlat4;\n    u_xlat4
            = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;\n   
            u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n    u_xlat5 = (-u_xlat1.zzzz)
            + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1
            = u_xlat5 * u_xlat2.zzzz + u_xlat3;\n    u_xlat3 = u_xlat5 * u_xlat5
            + u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n   
            u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1
            * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n   
            u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_3 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat2.w = 1.0;\n   
            u_xlat16_7.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_7.y = dot(unity_SHAg,
            u_xlat2);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_6.xyz);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz
            = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5.xyz
            = u_xlat1.xyz + u_xlat2.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y
            = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5,
            0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy =
            u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D
            _OcclusionMap;\nuniform highp sampler2D unity_NHxRoughness;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3
            u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec2 u_xlat9;\nlowp float u_xlat10_9;\nmediump vec3
            u_xlat16_10;\nfloat u_xlat18;\nmediump float u_xlat16_30;\nmediump float
            u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xw = (-vec2(_Glossiness)) +
            vec2(1.0, 1.0);\n    u_xlat16_1 = (-u_xlat0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_1 = u_xlat0.x * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * 6.0;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n    u_xlat16_10.x
            = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz *
            (-u_xlat16_10.xxx) + vs_TEXCOORD1.xyz;\n    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat16_10.xyz, u_xlat16_1);\n    u_xlat16_3.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_1.xyz
            * u_xlat16_3.xxx;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n   
            u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat0.x = dot((-vs_TEXCOORD1.xyz),
            u_xlat2.xyz);\n    u_xlat18 = u_xlat0.x;\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat0.x = u_xlat0.x + u_xlat0.x;\n    u_xlat5.xyz =
            u_xlat2.xyz * (-u_xlat0.xxx) + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x =
            dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat0.y = u_xlat2.x * u_xlat2.x;\n   
            u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat0.yw).x;\n    u_xlat9.x
            = u_xlat9.x * 16.0;\n    u_xlat16_30 = (-u_xlat18) + 1.0;\n    u_xlat18
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat18 = u_xlat16_30 * u_xlat18;\n   
            u_xlat18 = u_xlat16_30 * u_xlat18;\n    u_xlat16_30 = (-_Metallic) *
            0.779083729 + 0.779083729;\n    u_xlat16_31 = (-u_xlat16_30) + 1.0;\n   
            u_xlat16_31 = u_xlat16_31 + _Glossiness;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301,
            -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_30) * u_xlat2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_8.xyz = vec3(u_xlat16_31) + (-u_xlat16_6.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat18) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat9.xy =
            vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_9 = texture2D(_ShadowMapTexture,
            u_xlat9.xy).x;\n    u_xlat16_4.xyz = vec3(u_xlat10_9) * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_3.xyz =
            u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz =
            u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 40
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _EMISSION
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - _
        - _NORMALMAP
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - DIRECTIONAL
        - LIGHTPROBE_SH
        - SHADOWS_SHADOWMASK
        - DYNAMICLIGHTMAP_ON
        - LIGHTMAP_ON
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_SCREEN
        - VERTEXLIGHT_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _EMISSION
        - _GLOSSYREFLECTIONS_OFF
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _SPECULARHIGHLIGHTS_OFF
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D unity_NHxRoughness;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz),
            u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz =
            u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x
            = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n   
            u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x
            = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y
            = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness,
            u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xyz
            = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz
            + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0,
            u_xlat5.xx).x;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz =
            u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 42
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying
            highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy
            = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw
            = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD1.w =
            0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform highp sampler2D unity_NHxRoughness;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3
            u_xlat5;\nlowp vec3 u_xlat10_5;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n   
            u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15))
            + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y
            = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = u_xlat15 * u_xlat15;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.y = (-_Glossiness) + 1.0;\n    u_xlat0.x = texture2D(unity_NHxRoughness,
            u_xlat0.xy).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat10_5.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz
            * u_xlat10_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat5.xyz = u_xlat10_5.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz
            = u_xlat5.xyz * vec3(u_xlat16_18) + u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 43
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2]
            * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            highp sampler2D unity_NHxRoughness;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec2 u_xlat5;\nbool u_xlatb10;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz),
            u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz =
            u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x
            = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n   
            u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x
            = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y
            = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness,
            u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat1 = vs_TEXCOORD5.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0]
            * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2]
            * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n   
            u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat5.xy = u_xlat5.xy +
            vec2(0.5, 0.5);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n   
            u_xlatb10 = 0.0<u_xlat1.z;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat15 = texture2D(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_18
            = (u_xlatb10) ? 1.0 : 0.0;\n    u_xlat16_18 = u_xlat5.x * u_xlat16_18;\n   
            u_xlat16_18 = u_xlat15 * u_xlat16_18;\n    u_xlat16_4.xyz = vec3(u_xlat16_18)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 44
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform
            highp sampler2D unity_NHxRoughness;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat10;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz),
            u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz =
            u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x
            = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n   
            u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x
            = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y
            = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness,
            u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xyz
            = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz
            + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0,
            u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat1.xx).x;\n   
            u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat16_4.xyz = u_xlat5.xxx *
            _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 45
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w
            = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n   
            vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy
            * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy
            * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy
            * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D unity_NHxRoughness;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz),
            u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz =
            u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x
            = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n   
            u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x
            = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y
            = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness,
            u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xy =
            vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy
            = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n   
            u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz
            + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_4.xyz
            = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx *
            u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 46
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump
            float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4
            u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1
            = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy :
            in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy
            + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2
            = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w
            = u_xlat1.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2]
            * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat
            _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            highp sampler2D unity_NHxRoughness;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump float
            u_xlat16_6;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nvoid main()\n{\n   
            u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat12 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x
            = u_xlat12 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n   
            u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat0.xyz
            = u_xlat0.xyz / u_xlat0.www;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_6 =
            (u_xlatb0) ? _LightShadowData.x : 1.0;\n    u_xlat16_2.x = u_xlat16_6
            * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x =
            inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n   
            u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z
            = vs_TEXCOORD4.w;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat12)
            * u_xlat16_2.xyz;\n    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n   
            u_xlat12 = u_xlat12 + u_xlat12;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12))
            + (-vs_TEXCOORD1.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n   
            u_xlat0.y = (-_Glossiness) + 1.0;\n    u_xlat0.x = texture2D(unity_NHxRoughness,
            u_xlat0.xy).x;\n    u_xlat0.x = u_xlat0.x * 16.0;\n    u_xlat10_4.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat4.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 47
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 =
            _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n   
            vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w
            = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n   
            vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y
            * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz
            + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            highp sampler2D unity_NHxRoughness;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec2 u_xlat5;\nlowp float u_xlat10_5;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz,
            vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz),
            u_xlat0.xyz);\n    u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz =
            u_xlat0.xyz * (-vec3(u_xlat15)) + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x
            = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n   
            u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x
            = u_xlat15 * u_xlat15;\n    u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y
            = (-_Glossiness) + 1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness,
            u_xlat1.xy).x;\n    u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz
            * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xy =
            vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_5 = texture2D(_ShadowMapTexture,
            u_xlat5.xy).x;\n    u_xlat16_4.xyz = vec3(u_xlat10_5) * _LightColor0.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz =
            u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 48
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform
            \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2))
            ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy
            * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n   
            u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat3.xyz;\n    vs_TEXCOORD1.w
            = 0.0;\n    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www +
            _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w
            = 0.0;\n    vs_TEXCOORD2 = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n   
            vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n   
            vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy
            * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy
            * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy
            * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4
            _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform
            highp sampler2D unity_NHxRoughness;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nvec2 u_xlat10;\nlowp
            float u_xlat10_10;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_TEXCOORD4.xyz;\n    u_xlat15 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);\n   
            u_xlat15 = u_xlat15 + u_xlat15;\n    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15))
            + (-vs_TEXCOORD1.xyz);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y
            = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz,
            u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat5.x = u_xlat15 * u_xlat15;\n   
            u_xlat1.x = u_xlat5.x * u_xlat5.x;\n    u_xlat1.y = (-_Glossiness) +
            1.0;\n    u_xlat5.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;\n   
            u_xlat5.x = u_xlat5.x * 16.0;\n    u_xlat10_1.xyz = texture2D(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz
            + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz =
            u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301,
            0.220916301);\n    u_xlat16_3.xyz = u_xlat5.xxx * u_xlat16_3.xyz;\n   
            u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * vec3(u_xlat16_18) + u_xlat16_3.xyz;\n    u_xlat5.xy =
            vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy
            = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n   
            u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz
            + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat10.xy
            = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_10 = texture2D(_ShadowMapTexture,
            u_xlat10.xy).x;\n    u_xlat5.x = u_xlat10_10 * u_xlat5.x;\n    u_xlat16_4.xyz
            = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx *
            u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 49
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - _
        - _NORMALMAP
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - POINT
        - DIRECTIONAL
        - SPOT
        - POINT_COOKIE
        - DIRECTIONAL_COOKIE
        - SHADOWS_SHADOWMASK
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_DEPTH
        - SHADOWS_SCREEN
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _DETAIL_MULX2
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _SPECULARHIGHLIGHTS_OFF
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - POINT
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - SPOT
        - Keywords:
          - POINT_COOKIE
        - Keywords:
          - DIRECTIONAL_COOKIE
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 1
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 50
          PassId: 2
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 150
          readDepth: 0
          Index: 51
          PassId: 2
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - _
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICGLOSSMAP
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        keywordGroups:
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _METALLICGLOSSMAP
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 1
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      SerializedPassCount: 4
      UsePass: 0
    Shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - DIRECTIONAL
    - DIRLIGHTMAP_COMBINED
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTMAP_ON
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _ALPHABLEND_ON
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _DETAIL_MULX2
    - _EMISSION
    - _GLOSSYREFLECTIONS_OFF
    - _METALLICGLOSSMAP
    - _NORMALMAP
    - _PARALLAXMAP
    - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    - _SPECULARHIGHLIGHTS_OFF
    - DIRECTIONAL_COOKIE
    - POINT
    - POINT_COOKIE
    - SHADOWS_DEPTH
    - SPOT
    - __
    - INSTANCING_ON
    - _
    - SHADOWS_SHADOWMASK
    - DYNAMICLIGHTMAP_ON
    - LIGHTMAP_SHADOW_MIXING
    - SHADOWS_SOFT
    - SHADOWS_CUBE
    - UNITY_HDR_ON
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform
            \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp
            vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat
            u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float
            u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www
            + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx
            + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www
            + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz
            + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www
            + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz
            + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz
            = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n   
            u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz,
            in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n   
            u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz *
            glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess
            * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n   
            u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int
            u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n       
            u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n       
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44)
            * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n       
            u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz
            = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n           
            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44
            = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44)
            * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n           
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n           
            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n           
            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44
            * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz
            + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz
            * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz,
            vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n   
            }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz
            = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n   
            vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n   
            vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz
            = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: Vertex
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump
            vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4
            _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3
            u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump
            vec3 u_xlat16_11;\nbool u_xlatb15;\nbool u_xlatb27;\nfloat u_xlat36;\nint
            u_xlati37;\nfloat u_xlat38;\nbool u_xlatb38;\nmediump float u_xlat16_43;\nmediump
            float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www
            + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www
            + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz
            + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n   
            u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx
            + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www
            + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n   
            u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx
            + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www
            + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n   
            u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz
            = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz
            + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n   
            u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz,
            in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) *
            u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36
            = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz
            + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz
            = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y =
            float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat2.xyz
            = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;\n       
            u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat3.x = unity_LightAtten[u_xlati_loop_1].z
            * u_xlat38 + 1.0;\n        u_xlat3.x = float(1.0) / u_xlat3.x;\n       
            u_xlatb15 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;\n        u_xlatb27
            = unity_LightAtten[u_xlati_loop_1].w<u_xlat38;\n        u_xlatb15 = u_xlatb27
            && u_xlatb15;\n        u_xlat38 = max(u_xlat38, 9.99999997e-07);\n       
            u_xlat38 = inversesqrt(u_xlat38);\n        u_xlat2.xyz = vec3(u_xlat38)
            * u_xlat2.xyz;\n        u_xlat38 = u_xlat3.x * 0.5;\n        u_xlat16_44
            = (u_xlatb15) ? 0.0 : u_xlat38;\n        u_xlat16_45 = dot(u_xlat1.xyz,
            u_xlat2.xyz);\n        u_xlat16_45 = max(u_xlat16_45, 0.0);\n       
            u_xlat16_10.xyz = vec3(u_xlat16_45) * _Color.xyz;\n        u_xlat16_10.xyz
            = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb38
            = 0.0<u_xlat16_45;\n        if(u_xlatb38){\n            u_xlat16_11.xyz
            = (-u_xlat0.xyz) * vec3(u_xlat36) + u_xlat2.xyz;\n            u_xlat16_45
            = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n           
            u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_11.xyz;\n            u_xlat16_45
            = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = max(u_xlat16_45,
            0.0);\n            u_xlat16_45 = log2(u_xlat16_45);\n            u_xlat16_45
            = u_xlat16_43 * u_xlat16_45;\n            u_xlat16_45 = exp2(u_xlat16_45);\n           
            u_xlat16_45 = min(u_xlat16_45, 1.0);\n            u_xlat16_45 = u_xlat16_44
            * u_xlat16_45;\n            u_xlat16_9.xyz = vec3(u_xlat16_45) * unity_LightColor[u_xlati_loop_1].xyz
            + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = vec3(u_xlat16_44)
            * u_xlat16_10.xyz;\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0,
            1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n   
            }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz
            = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n   
            vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n   
            vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz
            = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - POINT
          Tags:
          - Key: LIGHTMODE
            Value: Vertex
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform
            \tvec4 unity_SpotDirection[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform
            \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp
            vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nbool
            u_xlatb15;\nbool u_xlatb27;\nfloat u_xlat36;\nint u_xlati37;\nfloat u_xlat38;\nbool
            u_xlatb38;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump
            float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www
            + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx
            + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www
            + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz
            + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www
            + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz
            + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz
            = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n   
            u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz,
            in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n   
            u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz *
            glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess
            * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n   
            u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int
            u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n       
            u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www
            + unity_LightPosition[u_xlati_loop_1].xyz;\n        u_xlat38 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n        u_xlat3.x = unity_LightAtten[u_xlati_loop_1].z
            * u_xlat38 + 1.0;\n        u_xlat3.x = float(1.0) / u_xlat3.x;\n       
            u_xlatb15 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;\n        u_xlatb27
            = unity_LightAtten[u_xlati_loop_1].w<u_xlat38;\n        u_xlatb15 = u_xlatb27
            && u_xlatb15;\n        u_xlat16_44 = (u_xlatb15) ? 0.0 : u_xlat3.x;\n       
            u_xlat38 = max(u_xlat38, 9.99999997e-07);\n        u_xlat38 = inversesqrt(u_xlat38);\n       
            u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n        u_xlat38 = dot(u_xlat2.xyz,
            unity_SpotDirection[u_xlati_loop_1].xyz);\n        u_xlat38 = max(u_xlat38,
            0.0);\n        u_xlat16_45 = u_xlat38 + (-unity_LightAtten[u_xlati_loop_1].x);\n       
            u_xlat16_45 = u_xlat16_45 * unity_LightAtten[u_xlati_loop_1].y;\n       
            u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n        u_xlat16_44 = u_xlat16_44
            * u_xlat16_45;\n        u_xlat16_44 = u_xlat16_44 * 0.5;\n        u_xlat16_45
            = dot(u_xlat1.xyz, u_xlat2.xyz);\n        u_xlat16_45 = max(u_xlat16_45,
            0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_45) * _Color.xyz;\n       
            u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n       
            u_xlatb38 = 0.0<u_xlat16_45;\n        if(u_xlatb38){\n            u_xlat16_11.xyz
            = (-u_xlat0.xyz) * vec3(u_xlat36) + u_xlat2.xyz;\n            u_xlat16_45
            = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n           
            u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_11.xyz;\n            u_xlat16_45
            = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = max(u_xlat16_45,
            0.0);\n            u_xlat16_45 = log2(u_xlat16_45);\n            u_xlat16_45
            = u_xlat16_43 * u_xlat16_45;\n            u_xlat16_45 = exp2(u_xlat16_45);\n           
            u_xlat16_45 = min(u_xlat16_45, 1.0);\n            u_xlat16_45 = u_xlat16_44
            * u_xlat16_45;\n            u_xlat16_9.xyz = vec3(u_xlat16_45) * unity_LightColor[u_xlati_loop_1].xyz
            + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = vec3(u_xlat16_44)
            * u_xlat16_10.xyz;\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0,
            1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n   
            }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz
            = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n   
            vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n   
            vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz
            = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: Vertex
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - _
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - POINT
        - SPOT
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - _
          - POINT
          - SPOT
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: Vertex
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform
            \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp
            vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy
            + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy
            + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump
            vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D
            unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w
            * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 3
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: VertexLM
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: VertexLM
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 100
          readDepth: 0
          Index: 4
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - __
        - INSTANCING_ON
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      SerializedPassCount: 3
      UsePass: 0
    Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - POINT
    - SPOT
    - SHADOWS_DEPTH
    - _
    - __
    - INSTANCING_ON
    - SHADOWS_CUBE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec3
            u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat4;\nbvec3 u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_11;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0 = u_xlat0.xxxx * vs_NORMAL0.xyzz;\n   
            u_xlat1.x = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0
            = u_xlat0 * u_xlat1.xxxx;\n    u_xlat10_1.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_2.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyw,
            _MainLightPosition.xyz);\n    u_xlat16_26 = u_xlat1.x * 0.5 + 0.5;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_3.x)
            + u_xlat16_11;\n    u_xlat16_26 = u_xlat16_26 + (-u_xlat16_3.x);\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_11;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_3.x;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_3.x;\n    u_xlat16_26
            = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_3.xyz = _HColor.xyz
            * _MainLightColor.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_26)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    u_xlatb1 = 0.0<_IndirectIntensity;\n    if(u_xlatb1){\n       
            u_xlat1 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_26 = dot(u_xlat1.xyw, u_xlat1.xyw);\n        u_xlat4 = max(u_xlat16_26,
            0.00100000005);\n        u_xlat16_26 = inversesqrt(u_xlat4);\n       
            u_xlat16_1 = u_xlat1 * vec4(u_xlat16_26);\n        u_xlatb4.x = 0.0<_SingleIndirectColor;\n       
            u_xlat0 = (u_xlatb4.x) ? u_xlat16_1 : u_xlat0;\n        u_xlat1.xyz =
            u_xlat0.xyw;\n        u_xlat1.w = 1.0;\n        u_xlat16_5.x = dot(unity_SHAr,
            u_xlat1);\n        u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n       
            u_xlat16_5.z = dot(unity_SHAb, u_xlat1);\n        u_xlat16_0 = u_xlat0.ywzx
            * u_xlat0;\n        u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n       
            u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n        u_xlat16_6.z = dot(unity_SHBb,
            u_xlat16_0);\n        u_xlat16_26 = u_xlat1.y * u_xlat1.y;\n        u_xlat16_26
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_26);\n        u_xlat16_6.xyz = unity_SHC.xyz
            * vec3(u_xlat16_26) + u_xlat16_6.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            + u_xlat16_6.xyz;\n        u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_7.xyz = log2(abs(u_xlat16_5.xyz));\n       
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n        u_xlat16_7.xyz = u_xlat16_7.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb4.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n        u_xlat16_5.x
            = (u_xlatb4.x) ? u_xlat16_6.x : u_xlat16_7.x;\n        u_xlat16_5.y =
            (u_xlatb4.y) ? u_xlat16_6.y : u_xlat16_7.y;\n        u_xlat16_5.z = (u_xlatb4.z)
            ? u_xlat16_6.z : u_xlat16_7.z;\n        u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n        u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n       
            u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_3.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp float u_xlat10_1;\nbvec3 u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat9;\nlowp vec3 u_xlat10_9;\nbool u_xlatb9;\nmediump
            float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\nvec4
            hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0 = u_xlat0.xxxx * vs_NORMAL0.xyzz;\n    u_xlat1.x = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0 = u_xlat0 * u_xlat1.xxxx;\n   
            u_xlat1.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_1
            = texture2D(_ScreenSpaceOcclusionTexture, u_xlat1.xy).x;\n    u_xlat16_2.x
            = u_xlat10_1 + -1.0;\n    u_xlat16_2.x = _AmbientOcclusionParam.w * u_xlat16_2.x
            + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n   
            u_xlat10_9.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_9.xyz * _BaseColor.xyz;\n    u_xlat9 = dot(u_xlat0.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_26 = u_xlat9 * 0.5 + 0.5;\n    u_xlat16_27 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_4.x = (-u_xlat16_27) + u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26
            + (-u_xlat16_27);\n    u_xlat16_27 = float(1.0) / u_xlat16_4.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_26 = clamp(u_xlat16_26,
            0.0, 1.0);\n    u_xlat16_27 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n   
            u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_2.xyz =
            _HColor.xyz * u_xlat16_2.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz =
            vec3(u_xlat16_26) * u_xlat16_2.xyz + _SColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    u_xlatb9 = 0.0<_IndirectIntensity;\n   
            if(u_xlatb9){\n        u_xlat4 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_26 = dot(u_xlat4.xyw, u_xlat4.xyw);\n        u_xlat9 = max(u_xlat16_26,
            0.00100000005);\n        u_xlat16_26 = inversesqrt(u_xlat9);\n       
            u_xlat16_4 = vec4(u_xlat16_26) * u_xlat4;\n        u_xlat16_26 = min(u_xlat10_1,
            1.0);\n        u_xlatb1.x = 0.0<_SingleIndirectColor;\n        u_xlat0
            = (u_xlatb1.x) ? u_xlat16_4 : u_xlat0;\n        u_xlat1.xyz = u_xlat0.xyw;\n       
            u_xlat1.w = 1.0;\n        u_xlat16_5.x = dot(unity_SHAr, u_xlat1);\n       
            u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n        u_xlat16_5.z = dot(unity_SHAb,
            u_xlat1);\n        u_xlat16_0 = u_xlat0.ywzx * u_xlat0;\n        u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n        u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_0);\n        u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n       
            u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n        u_xlat16_27 = u_xlat1.x
            * u_xlat1.x + (-u_xlat16_27);\n        u_xlat16_6.xyz = unity_SHC.xyz
            * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            + u_xlat16_6.xyz;\n        u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_7.xyz = log2(abs(u_xlat16_5.xyz));\n       
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n        u_xlat16_7.xyz = u_xlat16_7.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n        u_xlat16_5.x
            = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_7.x;\n        u_xlat16_5.y =
            (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_7.y;\n        u_xlat16_5.z = (u_xlatb1.z)
            ? u_xlat16_6.z : u_xlat16_7.z;\n        u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n        u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n       
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;\n        u_xlat16_2.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_2.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec3
            u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat4;\nbvec3 u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_11;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0 = u_xlat0.xxxx * vs_NORMAL0.xyzz;\n   
            u_xlat1.x = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0
            = u_xlat0 * u_xlat1.xxxx;\n    u_xlat10_1.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_2.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyw,
            _MainLightPosition.xyz);\n    u_xlat16_26 = u_xlat1.x * 0.5 + 0.5;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_3.x)
            + u_xlat16_11;\n    u_xlat16_26 = u_xlat16_26 + (-u_xlat16_3.x);\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_11;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_3.x;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_3.x;\n    u_xlat16_26
            = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_3.xyz = _HColor.xyz
            * _MainLightColor.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_26)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    u_xlatb1 = 0.0<_IndirectIntensity;\n    if(u_xlatb1){\n       
            u_xlat1 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_26 = dot(u_xlat1.xyw, u_xlat1.xyw);\n        u_xlat4 = max(u_xlat16_26,
            0.00100000005);\n        u_xlat16_26 = inversesqrt(u_xlat4);\n       
            u_xlat16_1 = u_xlat1 * vec4(u_xlat16_26);\n        u_xlatb4.x = 0.0<_SingleIndirectColor;\n       
            u_xlat0 = (u_xlatb4.x) ? u_xlat16_1 : u_xlat0;\n        u_xlat1.xyz =
            u_xlat0.xyw;\n        u_xlat1.w = 1.0;\n        u_xlat16_5.x = dot(unity_SHAr,
            u_xlat1);\n        u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n       
            u_xlat16_5.z = dot(unity_SHAb, u_xlat1);\n        u_xlat16_0 = u_xlat0.ywzx
            * u_xlat0;\n        u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n       
            u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n        u_xlat16_6.z = dot(unity_SHBb,
            u_xlat16_0);\n        u_xlat16_26 = u_xlat1.y * u_xlat1.y;\n        u_xlat16_26
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_26);\n        u_xlat16_6.xyz = unity_SHC.xyz
            * vec3(u_xlat16_26) + u_xlat16_6.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            + u_xlat16_6.xyz;\n        u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_7.xyz = log2(abs(u_xlat16_5.xyz));\n       
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n        u_xlat16_7.xyz = u_xlat16_7.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb4.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n        u_xlat16_5.x
            = (u_xlatb4.x) ? u_xlat16_6.x : u_xlat16_7.x;\n        u_xlat16_5.y =
            (u_xlatb4.y) ? u_xlat16_6.y : u_xlat16_7.y;\n        u_xlat16_5.z = (u_xlatb4.z)
            ? u_xlat16_6.z : u_xlat16_7.z;\n        u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n        u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n       
            u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_3.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 8
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp
            vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump float u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec4 u_xlat5;\nint u_xlati5;\nbvec3 u_xlatb5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3
            u_xlat9;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nint u_xlati15;\nbool
            u_xlatb15;\nmediump vec2 u_xlat16_23;\nfloat u_xlat25;\nbool u_xlatb25;\nfloat
            u_xlat30;\nint u_xlati30;\nbool u_xlatb30;\nmediump float u_xlat16_32;\nfloat
            u_xlat35;\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat30 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n   
            u_xlat10_1.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_2.xyz
            = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_32 = u_xlat30 * 0.5 + 0.5;\n    u_xlat16_3 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_13 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_13 = (-u_xlat16_3) + u_xlat16_13;\n    u_xlat16_32 = u_xlat16_32
            + (-u_xlat16_3);\n    u_xlat16_13 = float(1.0) / u_xlat16_13;\n    u_xlat16_32
            = u_xlat16_32 * u_xlat16_13;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0,
            1.0);\n    u_xlat16_23.x = u_xlat16_32 * -2.0 + 3.0;\n    u_xlat16_32
            = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_23.x;\n   
            u_xlat16_32 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_4.xyz =
            _HColor.xyz * _MainLightColor.xyz + (-_SColor.xyz);\n    u_xlat16_4.xyz
            = vec3(u_xlat16_32) * u_xlat16_4.xyz + _SColor.xyz;\n    u_xlat16_4.xyz
            = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlatb30 = 0.0<_IndirectIntensity;\n   
            if(u_xlatb30){\n        u_xlat1 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_32 = dot(u_xlat1.xyw, u_xlat1.xyw);\n        u_xlat30 = max(u_xlat16_32,
            0.00100000005);\n        u_xlat16_32 = inversesqrt(u_xlat30);\n       
            u_xlat16_1 = u_xlat1 * vec4(u_xlat16_32);\n        u_xlatb30 = 0.0<_SingleIndirectColor;\n       
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat16_1 : u_xlat0.xyzz;\n        u_xlat5.xyz
            = u_xlat1.xyw;\n        u_xlat5.w = 1.0;\n        u_xlat16_6.x = dot(unity_SHAr,
            u_xlat5);\n        u_xlat16_6.y = dot(unity_SHAg, u_xlat5);\n       
            u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n        u_xlat16_1 = u_xlat1.ywzx
            * u_xlat1;\n        u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);\n       
            u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);\n        u_xlat16_7.z = dot(unity_SHBb,
            u_xlat16_1);\n        u_xlat16_32 = u_xlat5.y * u_xlat5.y;\n        u_xlat16_32
            = u_xlat5.x * u_xlat5.x + (-u_xlat16_32);\n        u_xlat16_7.xyz = unity_SHC.xyz
            * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n        u_xlat16_6.xyz = u_xlat16_6.xyz
            + u_xlat16_7.xyz;\n        u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_8.xyz = log2(abs(u_xlat16_6.xyz));\n       
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);\n        u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_6.xyzx).xyz;\n        u_xlat16_6.x
            = (u_xlatb5.x) ? u_xlat16_7.x : u_xlat16_8.x;\n        u_xlat16_6.y =
            (u_xlatb5.y) ? u_xlat16_7.y : u_xlat16_8.y;\n        u_xlat16_6.z = (u_xlatb5.z)
            ? u_xlat16_7.z : u_xlat16_8.z;\n        u_xlat16_6.xyz = max(u_xlat16_6.xyz,
            vec3(0.0, 0.0, 0.0));\n        u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;\n       
            u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_4.xyz;\n    }\n    u_xlat16_32 = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati30 = int(u_xlat16_32);\n    u_xlat16_6.xyz
            = u_xlat16_4.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30
            ; u_xlati_loop_1++)\n    {\n        u_xlat15 = float(u_xlati_loop_1);\n       
            u_xlatb25 = u_xlat15<2.0;\n        u_xlat16_23.xy = (bool(u_xlatb25))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat35
            = u_xlat15 + -2.0;\n        u_xlat15 = (u_xlatb25) ? u_xlat15 : u_xlat35;\n       
            u_xlatb15 = u_xlat15<1.0;\n        u_xlat16_32 = (u_xlatb15) ? u_xlat16_23.x
            : u_xlat16_23.y;\n        u_xlati15 = int(u_xlat16_32);\n        u_xlat9.xyz
            = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;\n        u_xlat25
            = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat25 = max(u_xlat25, 6.10351563e-05);\n       
            u_xlat35 = inversesqrt(u_xlat25);\n        u_xlat9.xyz = vec3(u_xlat35)
            * u_xlat9.xyz;\n        u_xlat35 = float(1.0) / u_xlat25;\n        u_xlat25
            = u_xlat25 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;\n        u_xlat25
            = clamp(u_xlat25, 0.0, 1.0);\n        u_xlat25 = u_xlat25 * u_xlat35;\n       
            u_xlat16_32 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz,
            u_xlat9.xyz);\n        u_xlat16_32 = u_xlat16_32 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;\n        u_xlat16_32
            = clamp(u_xlat16_32, 0.0, 1.0);\n        u_xlat16_32 = u_xlat16_32 *
            u_xlat16_32;\n        u_xlat25 = u_xlat16_32 * u_xlat25;\n        u_xlat35
            = dot(u_xlat0.xyz, u_xlat9.xyz);\n        u_xlat16_32 = u_xlat35 * 0.5
            + (-u_xlat16_3);\n        u_xlat16_32 = u_xlat16_32 + 0.5;\n        u_xlat16_32
            = u_xlat16_13 * u_xlat16_32;\n        u_xlat16_32 = clamp(u_xlat16_32,
            0.0, 1.0);\n        u_xlat16_23.x = u_xlat16_32 * -2.0 + 3.0;\n       
            u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n        u_xlat16_32 = u_xlat16_32
            * u_xlat16_23.x;\n        u_xlat16_32 = u_xlat25 * u_xlat16_32;\n       
            u_xlat16_7.xyz = vec3(u_xlat16_32) * _HColor.xyz;\n        u_xlat16_8.xyz
            = u_xlat16_2.xyz * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;\n       
            u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n   
            }\n    SV_Target0.xyz = u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 16
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp float u_xlat10_1;\nbvec3 u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat9;\nlowp vec3 u_xlat10_9;\nbool u_xlatb9;\nmediump
            float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\nvec4
            hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0 = u_xlat0.xxxx * vs_NORMAL0.xyzz;\n    u_xlat1.x = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0 = u_xlat0 * u_xlat1.xxxx;\n   
            u_xlat1.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_1
            = texture2D(_ScreenSpaceOcclusionTexture, u_xlat1.xy).x;\n    u_xlat16_2.x
            = u_xlat10_1 + -1.0;\n    u_xlat16_2.x = _AmbientOcclusionParam.w * u_xlat16_2.x
            + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n   
            u_xlat10_9.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_9.xyz * _BaseColor.xyz;\n    u_xlat9 = dot(u_xlat0.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_26 = u_xlat9 * 0.5 + 0.5;\n    u_xlat16_27 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_4.x = (-u_xlat16_27) + u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26
            + (-u_xlat16_27);\n    u_xlat16_27 = float(1.0) / u_xlat16_4.x;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_26 = clamp(u_xlat16_26,
            0.0, 1.0);\n    u_xlat16_27 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n   
            u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_2.xyz =
            _HColor.xyz * u_xlat16_2.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz =
            vec3(u_xlat16_26) * u_xlat16_2.xyz + _SColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    u_xlatb9 = 0.0<_IndirectIntensity;\n   
            if(u_xlatb9){\n        u_xlat4 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_26 = dot(u_xlat4.xyw, u_xlat4.xyw);\n        u_xlat9 = max(u_xlat16_26,
            0.00100000005);\n        u_xlat16_26 = inversesqrt(u_xlat9);\n       
            u_xlat16_4 = vec4(u_xlat16_26) * u_xlat4;\n        u_xlat16_26 = min(u_xlat10_1,
            1.0);\n        u_xlatb1.x = 0.0<_SingleIndirectColor;\n        u_xlat0
            = (u_xlatb1.x) ? u_xlat16_4 : u_xlat0;\n        u_xlat1.xyz = u_xlat0.xyw;\n       
            u_xlat1.w = 1.0;\n        u_xlat16_5.x = dot(unity_SHAr, u_xlat1);\n       
            u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n        u_xlat16_5.z = dot(unity_SHAb,
            u_xlat1);\n        u_xlat16_0 = u_xlat0.ywzx * u_xlat0;\n        u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n        u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_0);\n        u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n       
            u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n        u_xlat16_27 = u_xlat1.x
            * u_xlat1.x + (-u_xlat16_27);\n        u_xlat16_6.xyz = unity_SHC.xyz
            * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            + u_xlat16_6.xyz;\n        u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_7.xyz = log2(abs(u_xlat16_5.xyz));\n       
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n        u_xlat16_7.xyz = u_xlat16_7.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n        u_xlat16_5.x
            = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_7.x;\n        u_xlat16_5.y =
            (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_7.y;\n        u_xlat16_5.z = (u_xlatb1.z)
            ? u_xlat16_6.z : u_xlat16_7.z;\n        u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n        u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n       
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;\n        u_xlat16_2.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_2.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 12
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform
            \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump
            float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_4;\nvec4
            u_xlat5;\nint u_xlati5;\nbvec3 u_xlatb5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3
            u_xlat16_12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nint u_xlati15;\nbool
            u_xlatb15;\nmediump vec2 u_xlat16_24;\nfloat u_xlat25;\nbool u_xlatb25;\nfloat
            u_xlat30;\nlowp float u_xlat10_30;\nint u_xlati30;\nbool u_xlatb30;\nmediump
            float u_xlat16_33;\nfloat u_xlat35;\n#define UNITY_DYNAMIC_INDEX_ES2
            0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int i){\n#if
            UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz,
            1.0/gl_FragCoord.w);\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat30 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlat1.xy
            = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_30 = texture2D(_ScreenSpaceOcclusionTexture,
            u_xlat1.xy).x;\n    u_xlat16_2 = u_xlat10_30 + -1.0;\n    u_xlat16_2
            = _AmbientOcclusionParam.w * u_xlat16_2 + 1.0;\n    u_xlat16_12.xyz =
            vec3(u_xlat16_2) * _MainLightColor.xyz;\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat1.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_33
            = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_4 = (-_RampSmoothing) * 0.5 +
            _RampThreshold;\n    u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_14 = (-u_xlat16_4) + u_xlat16_14;\n    u_xlat16_33 = u_xlat16_33
            + (-u_xlat16_4);\n    u_xlat16_14 = float(1.0) / u_xlat16_14;\n    u_xlat16_33
            = u_xlat16_33 * u_xlat16_14;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0,
            1.0);\n    u_xlat16_24.x = u_xlat16_33 * -2.0 + 3.0;\n    u_xlat16_33
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_24.x;\n   
            u_xlat16_33 = u_xlat16_33 * unity_LightData.z;\n    u_xlat16_12.xyz =
            _HColor.xyz * u_xlat16_12.xyz + (-_SColor.xyz);\n    u_xlat16_12.xyz
            = vec3(u_xlat16_33) * u_xlat16_12.xyz + _SColor.xyz;\n    u_xlat16_12.xyz
            = u_xlat16_12.xyz * u_xlat16_3.xyz;\n    u_xlatb1 = 0.0<_IndirectIntensity;\n   
            if(u_xlatb1){\n        u_xlat1 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n       
            u_xlat16_33 = dot(u_xlat1.xyw, u_xlat1.xyw);\n        u_xlat5.x = max(u_xlat16_33,
            0.00100000005);\n        u_xlat16_33 = inversesqrt(u_xlat5.x);\n       
            u_xlat16_1 = u_xlat1 * vec4(u_xlat16_33);\n        u_xlat16_33 = min(u_xlat10_30,
            1.0);\n        u_xlatb30 = 0.0<_SingleIndirectColor;\n        u_xlat1
            = (bool(u_xlatb30)) ? u_xlat16_1 : u_xlat0.xyzz;\n        u_xlat5.xyz
            = u_xlat1.xyw;\n        u_xlat5.w = 1.0;\n        u_xlat16_6.x = dot(unity_SHAr,
            u_xlat5);\n        u_xlat16_6.y = dot(unity_SHAg, u_xlat5);\n       
            u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n        u_xlat16_1 = u_xlat1.ywzx
            * u_xlat1;\n        u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);\n       
            u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);\n        u_xlat16_7.z = dot(unity_SHBb,
            u_xlat16_1);\n        u_xlat16_24.x = u_xlat5.y * u_xlat5.y;\n       
            u_xlat16_24.x = u_xlat5.x * u_xlat5.x + (-u_xlat16_24.x);\n        u_xlat16_7.xyz
            = unity_SHC.xyz * u_xlat16_24.xxx + u_xlat16_7.xyz;\n        u_xlat16_6.xyz
            = u_xlat16_6.xyz + u_xlat16_7.xyz;\n        u_xlat16_7.xyz = u_xlat16_6.xyz
            * vec3(12.9200001, 12.9200001, 12.9200001);\n        u_xlat16_8.xyz =
            log2(abs(u_xlat16_6.xyz));\n        u_xlat16_8.xyz = u_xlat16_8.xyz *
            vec3(0.416666657, 0.416666657, 0.416666657);\n        u_xlat16_8.xyz
            = exp2(u_xlat16_8.xyz);\n        u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n       
            u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_6.xyzx).xyz;\n        u_xlat16_6.x = (u_xlatb5.x) ? u_xlat16_7.x
            : u_xlat16_8.x;\n        u_xlat16_6.y = (u_xlatb5.y) ? u_xlat16_7.y :
            u_xlat16_8.y;\n        u_xlat16_6.z = (u_xlatb5.z) ? u_xlat16_7.z : u_xlat16_8.z;\n       
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_6.xyz
            = vec3(u_xlat16_33) * u_xlat16_6.xyz;\n        u_xlat16_6.xyz = u_xlat16_3.xyz
            * u_xlat16_6.xyz;\n        u_xlat16_12.xyz = u_xlat16_6.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_12.xyz;\n    }\n   
            u_xlat16_33 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati30 = int(u_xlat16_33);\n    u_xlat16_6.xyz = u_xlat16_12.xyz;\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)\n   
            {\n        u_xlat15 = float(u_xlati_loop_1);\n        u_xlatb25 = u_xlat15<2.0;\n       
            u_xlat16_24.xy = (bool(u_xlatb25)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat35 = u_xlat15 + -2.0;\n        u_xlat15 = (u_xlatb25) ? u_xlat15
            : u_xlat35;\n        u_xlatb15 = u_xlat15<1.0;\n        u_xlat16_33 =
            (u_xlatb15) ? u_xlat16_24.x : u_xlat16_24.y;\n        u_xlati15 = int(u_xlat16_33);\n       
            u_xlat9.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;\n        u_xlat25
            = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat25 = max(u_xlat25, 6.10351563e-05);\n       
            u_xlat35 = inversesqrt(u_xlat25);\n        u_xlat9.xyz = vec3(u_xlat35)
            * u_xlat9.xyz;\n        u_xlat35 = float(1.0) / u_xlat25;\n        u_xlat25
            = u_xlat25 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;\n        u_xlat25
            = clamp(u_xlat25, 0.0, 1.0);\n        u_xlat25 = u_xlat25 * u_xlat35;\n       
            u_xlat16_33 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz,
            u_xlat9.xyz);\n        u_xlat16_33 = u_xlat16_33 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;\n        u_xlat16_33
            = clamp(u_xlat16_33, 0.0, 1.0);\n        u_xlat16_33 = u_xlat16_33 *
            u_xlat16_33;\n        u_xlat25 = u_xlat16_33 * u_xlat25;\n        u_xlat16_7.xyz
            = vec3(u_xlat16_2) * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;\n       
            u_xlat15 = dot(u_xlat0.xyz, u_xlat9.xyz);\n        u_xlat16_33 = u_xlat15
            * 0.5 + (-u_xlat16_4);\n        u_xlat16_33 = u_xlat16_33 + 0.5;\n       
            u_xlat16_33 = u_xlat16_14 * u_xlat16_33;\n        u_xlat16_33 = clamp(u_xlat16_33,
            0.0, 1.0);\n        u_xlat16_24.x = u_xlat16_33 * -2.0 + 3.0;\n       
            u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n        u_xlat16_33 = u_xlat16_33
            * u_xlat16_24.x;\n        u_xlat16_33 = u_xlat25 * u_xlat16_33;\n       
            u_xlat16_8.xyz = vec3(u_xlat16_33) * _HColor.xyz;\n        u_xlat16_7.xyz
            = u_xlat16_3.xyz * u_xlat16_7.xyz;\n        u_xlat16_6.xyz = u_xlat16_7.xyz
            * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_6.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 20
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nlowp
            vec3 u_xlat10_2;\nbvec3 u_xlatb2;\nmediump float u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_9;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0 = (-vs_TEXCOORD0.xyzz)
            + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_1.x = dot(u_xlat0.xyw, u_xlat0.xyw);\n   
            u_xlat2 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat2);\n   
            u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat2 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat1 =
            vec4(u_xlat2) * vs_NORMAL0.xyzz;\n    u_xlat2 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1 = u_xlat1 * vec4(u_xlat2);\n   
            u_xlatb2.x = 0.0<_SingleIndirectColor;\n    u_xlat0 = (u_xlatb2.x) ?
            u_xlat16_0.xywz : u_xlat1.xywz;\n    u_xlat2 = dot(u_xlat1.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_3 = u_xlat2 * 0.5 + 0.5;\n    u_xlat16_9.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_9.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_9.x);\n    u_xlat16_1
            = u_xlat0.yzwx * u_xlat0.xywz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_9.xyz = unity_SHC.xyz * u_xlat16_9.xxx + u_xlat16_4.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz
            = log2(abs(u_xlat16_9.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz
            = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb2.xyz
            = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_9.xyzx).xyz;\n    u_xlat16_9.x = (u_xlatb2.x) ? u_xlat16_5.x
            : u_xlat16_4.x;\n    u_xlat16_9.y = (u_xlatb2.y) ? u_xlat16_5.y : u_xlat16_4.y;\n   
            u_xlat16_9.z = (u_xlatb2.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_9.xyz
            = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_2.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * _BaseColor.xyz;\n   
            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_4.xyz;\n    u_xlat16_9.xyz
            = u_xlat16_9.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_22 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_3 = u_xlat16_3 + (-u_xlat16_22);\n    u_xlat16_5.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n   
            u_xlat16_22 = float(1.0) / u_xlat16_22;\n    u_xlat16_3 = u_xlat16_3
            * u_xlat16_22;\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_3 * -2.0 + 3.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * u_xlat16_22;\n    u_xlat16_3 = u_xlat16_3 *
            unity_LightData.z;\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _MainLightColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_9.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nbvec3 u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump
            float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec4
            u_xlat16_7;\nvec4 u_xlat8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_14;\nmediump
            vec3 u_xlat16_16;\nmediump vec3 u_xlat16_17;\nfloat u_xlat24;\nmediump
            float u_xlat16_26;\nmediump float u_xlat16_29;\nfloat u_xlat36;\nlowp
            float u_xlat10_36;\nbool u_xlatb36;\nmediump float u_xlat16_40;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat36 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat36);\n    u_xlat16_14.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat36 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_40 = u_xlat36 * 0.5 + 0.5;\n   
            u_xlat16_5 = u_xlat36;\n    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);\n   
            u_xlat16_17.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_29
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_29 = (-u_xlat16_17.x)
            + u_xlat16_29;\n    u_xlat16_40 = u_xlat16_40 + (-u_xlat16_17.x);\n   
            u_xlat16_17.x = float(1.0) / u_xlat16_29;\n    u_xlat16_40 = u_xlat16_40
            * u_xlat16_17.x;\n    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);\n   
            u_xlat16_17.x = u_xlat16_40 * -2.0 + 3.0;\n    u_xlat16_40 = u_xlat16_40
            * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_17.x;\n    u_xlat16_40
            = u_xlat16_40 * unity_LightData.z;\n    u_xlat16_17.xyz = vec3(u_xlat16_40)
            * _MainLightColor.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _MainLightColor.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb36 = 0.0<_IndirectIntensity;\n    if(u_xlatb36){\n        u_xlatb36
            = 0.0<_SingleIndirectColor;\n        u_xlat7 = (bool(u_xlatb36)) ? u_xlat16_14.xyzz
            : u_xlat0.xyzz;\n        u_xlat8.xyz = u_xlat7.xyw;\n        u_xlat8.w
            = 1.0;\n        u_xlat16_9.x = dot(unity_SHAr, u_xlat8);\n        u_xlat16_9.y
            = dot(unity_SHAg, u_xlat8);\n        u_xlat16_9.z = dot(unity_SHAb, u_xlat8);\n       
            u_xlat16_7 = u_xlat7.ywzx * u_xlat7;\n        u_xlat16_10.x = dot(unity_SHBr,
            u_xlat16_7);\n        u_xlat16_10.y = dot(unity_SHBg, u_xlat16_7);\n       
            u_xlat16_10.z = dot(unity_SHBb, u_xlat16_7);\n        u_xlat16_40 = u_xlat8.y
            * u_xlat8.y;\n        u_xlat16_40 = u_xlat8.x * u_xlat8.x + (-u_xlat16_40);\n       
            u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_40) + u_xlat16_10.xyz;\n       
            u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;\n        u_xlat16_10.xyz
            = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n       
            u_xlat16_11.xyz = log2(abs(u_xlat16_9.xyz));\n        u_xlat16_11.xyz
            = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);\n        u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_9.xyzx).xyz;\n        u_xlat16_9.x
            = (u_xlatb3.x) ? u_xlat16_10.x : u_xlat16_11.x;\n        u_xlat16_9.y
            = (u_xlatb3.y) ? u_xlat16_10.y : u_xlat16_11.y;\n        u_xlat16_9.z
            = (u_xlatb3.z) ? u_xlat16_10.z : u_xlat16_11.z;\n        u_xlat16_9.xyz
            = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_4.xyz =
            u_xlat16_4.xyz * u_xlat16_9.xyz;\n        u_xlat16_6.xyz = u_xlat16_4.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity))
            + u_xlat16_6.xyz;\n    }\n    u_xlat36 = dot(u_xlat16_14.xyz, u_xlat0.xyz);\n   
            u_xlat36 = max(u_xlat36, 0.0);\n    u_xlat36 = (-u_xlat36) + 1.0;\n   
            u_xlat16_14.x = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat36 + (-_RimMin);\n   
            u_xlat16_14.x = float(1.0) / u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_14.x
            * u_xlat16_26;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_14.x * -2.0 + 3.0;\n    u_xlat16_14.x = u_xlat16_14.x
            * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_26;\n   
            u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_17.xyz;\n    u_xlatb36 =
            _SpecularMapType>=5.0;\n    if(u_xlatb36){\n        u_xlat10_36 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_4.x = u_xlat10_36;\n    } else
            {\n        u_xlatb36 = _SpecularMapType>=4.0;\n        if(u_xlatb36){\n           
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_4.x = u_xlat10_36;\n        } else {\n            u_xlatb36
            = _SpecularMapType>=3.0;\n            if(u_xlatb36){\n               
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_4.x = u_xlat10_36;\n            } else {\n                u_xlatb36
            = _SpecularMapType>=2.0;\n                if(u_xlatb36){\n                   
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_4.x = u_xlat10_36;\n                } else {\n                   
            u_xlatb36 = _SpecularMapType>=1.0;\n                    u_xlat16_4.x
            = (u_xlatb36) ? u_xlat10_3.w : 1.0;\n                }\n            }\n       
            }\n    }\n    u_xlat16_16.xyz = u_xlat1.xyz * u_xlat16_2.xxx + _MainLightPosition.xyz;\n   
            u_xlat16_2.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n    u_xlat36 =
            max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat36);\n   
            u_xlat16_16.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz;\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_16.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x;\n    u_xlat12 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_4.x = min(u_xlat12, 1.0);\n    u_xlat16_4.x
            = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16.x = u_xlat0.x * u_xlat16_4.x
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16.x * u_xlat0.x + 1.0;\n   
            u_xlat24 = u_xlat16_4.x * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_4.x
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_4.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_4.x = u_xlat12 * 0.280000001;\n   
            u_xlat12 = (-u_xlat16_4.x) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x =
            u_xlat12 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n   
            u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat16_2.x =
            u_xlat16_5 * u_xlat16_2.x;\n    u_xlat16_4.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_14.xyz * _RimColor.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x,
            0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec3 u_xlatb0;\nmediump
            vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat3;\nmediump vec4
            u_xlat16_3;\nlowp float u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_7;\nfloat u_xlat9;\nmediump float
            u_xlat16_13;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_7.xyz = u_xlat0.xyz * u_xlat16_1.xxx + _MainLightPosition.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.x = dot(u_xlat16_7.xyz,
            u_xlat16_7.xyz);\n    u_xlat0.x = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx
            * u_xlat16_7.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat18
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0,
            1.0);\n    u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat10_3 * u_xlat16_1.x;\n    u_xlat3 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_7.x = min(u_xlat3, 1.0);\n    u_xlat16_13 = u_xlat3 * 0.280000001;\n   
            u_xlat3 = (-u_xlat16_13) * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_7.x
            * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat18 * u_xlat16_1.x + (-u_xlat18);\n   
            u_xlat18 = u_xlat16_7.x * u_xlat18 + 1.0;\n    u_xlat18 = u_xlat18 *
            u_xlat18 + 9.99999975e-05;\n    u_xlat9 = u_xlat16_1.x * 0.318309873;\n   
            u_xlat18 = u_xlat9 / u_xlat18;\n    u_xlat16_1.x = u_xlat18 * 0.157079637;\n   
            u_xlat18 = max(u_xlat16_1.x, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n   
            u_xlat16_1.x = u_xlat3 * u_xlat18;\n    u_xlat16_1.x = max(u_xlat16_1.x,
            0.0);\n    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat18
            = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_7.x = u_xlat18;\n   
            u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);\n    u_xlat16_13 = u_xlat18
            * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_7.x * u_xlat16_1.x;\n    u_xlat16_1.xyw
            = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw
            * _SpecularColor.xyz;\n    u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_13 = u_xlat16_13 + (-u_xlat16_20);\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_13 = u_xlat16_13
            * u_xlat16_20;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n   
            u_xlat16_20 = u_xlat16_13 * -2.0 + 3.0;\n    u_xlat16_13 = u_xlat16_13
            * u_xlat16_13;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_20;\n    u_xlat16_13
            = u_xlat16_13 * unity_LightData.z;\n    u_xlat16_4.xyz = vec3(u_xlat16_13)
            * _MainLightColor.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_22 = vs_TEXCOORD2.w
            + (-_RimMin);\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_22;\n    u_xlat16_20
            = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_20 * -2.0
            + 3.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat16_1.xyw = u_xlat16_4.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlatb18 = 0.0<_SingleIndirectColor;\n    u_xlat0
            = (bool(u_xlatb18)) ? u_xlat16_2.xyzz : u_xlat0.xyzz;\n    u_xlat16_2.x
            = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat0.yzwx * u_xlat0.xywz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_2.xyz));\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x
            = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_2.y = (u_xlatb0.y)
            ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_2.z = (u_xlatb0.z) ? u_xlat16_5.z
            : u_xlat16_4.z;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = _HColor.xyz * _MainLightColor.xyz + (-_SColor.xyz);\n   
            u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.xyz = u_xlat16_1.xyw + u_xlat16_2.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec2 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nbvec3 u_xlatb2;\nmediump float u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_26;\nvoid
            main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n   
            u_xlat0 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyw, u_xlat0.xyw);\n    u_xlat2.x = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat2.x);\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n   
            u_xlat2.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n   
            u_xlat1 = u_xlat2.xxxx * vs_NORMAL0.xyzz;\n    u_xlat2.x = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1 = u_xlat1 * u_xlat2.xxxx;\n   
            u_xlatb2.x = 0.0<_SingleIndirectColor;\n    u_xlat0 = (u_xlatb2.x) ?
            u_xlat16_0.xywz : u_xlat1.xywz;\n    u_xlat2.x = dot(u_xlat1.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_3 = u_xlat2.x * 0.5 + 0.5;\n    u_xlat16_10.x = u_xlat0.y *
            u_xlat0.y;\n    u_xlat16_10.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_10.x);\n   
            u_xlat16_1 = u_xlat0.yzwx * u_xlat0.xywz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_10.xyz = unity_SHC.xyz *
            u_xlat16_10.xxx + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_10.xyz));\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_10.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb2.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_10.xyzx).xyz;\n    u_xlat16_10.x
            = (u_xlatb2.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_10.y = (u_xlatb2.y)
            ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_10.z = (u_xlatb2.z) ? u_xlat16_5.z
            : u_xlat16_4.z;\n    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat2.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_2.x = texture2D(_ScreenSpaceOcclusionTexture, u_xlat2.xy).x;\n   
            u_xlat16_4.x = min(u_xlat10_2.x, 1.0);\n    u_xlat16_11.x = u_xlat10_2.x
            + -1.0;\n    u_xlat16_11.x = _AmbientOcclusionParam.w * u_xlat16_11.x
            + 1.0;\n    u_xlat16_11.xyz = u_xlat16_11.xxx * _MainLightColor.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx;\n    u_xlat10_2.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz
            * _BaseColor.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_4.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_3 = u_xlat16_3 + (-u_xlat16_4.x);\n    u_xlat16_26 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_26;\n   
            u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3
            * u_xlat16_4.x;\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_4.x
            = u_xlat16_3 * -2.0 + 3.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3
            * unity_LightData.z;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_3) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;\n    SV_Target0.xyz
            = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_10.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3
            u_xlat16_2;\nvec2 u_xlat3;\nlowp vec4 u_xlat10_3;\nbvec3 u_xlatb3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nvec4 u_xlat8;\nmediump vec4 u_xlat16_8;\nvec4 u_xlat9;\nmediump
            vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat
            u_xlat13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_19;\nfloat
            u_xlat26;\nmediump float u_xlat16_28;\nfloat u_xlat39;\nlowp float u_xlat10_39;\nbool
            u_xlatb39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nmediump
            float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\nvec4
            hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat39 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat39 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat39);\n    u_xlat16_15.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_39 = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n   
            u_xlat16_4.x = u_xlat10_39 + -1.0;\n    u_xlat16_4.x = _AmbientOcclusionParam.w
            * u_xlat16_4.x + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n   
            u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat40 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_43 = u_xlat40 * 0.5 + 0.5;\n    u_xlat16_44 = u_xlat40;\n   
            u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_19 = (-u_xlat16_6.x) + u_xlat16_19;\n    u_xlat16_43 = u_xlat16_43
            + (-u_xlat16_6.x);\n    u_xlat16_6.x = float(1.0) / u_xlat16_19;\n   
            u_xlat16_43 = u_xlat16_43 * u_xlat16_6.x;\n    u_xlat16_43 = clamp(u_xlat16_43,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_43 * -2.0 + 3.0;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_6.x;\n   
            u_xlat16_43 = u_xlat16_43 * unity_LightData.z;\n    u_xlat16_6.xyz =
            u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlat16_7.xyz = _HColor.xyz
            * u_xlat16_4.xyz + (-_SColor.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat16_43)
            * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_5.xyz
            * u_xlat16_7.xyz;\n    u_xlatb40 = 0.0<_IndirectIntensity;\n    if(u_xlatb40){\n       
            u_xlat16_43 = min(u_xlat10_39, 1.0);\n        u_xlatb39 = 0.0<_SingleIndirectColor;\n       
            u_xlat8 = (bool(u_xlatb39)) ? u_xlat16_15.xyzz : u_xlat0.xyzz;\n       
            u_xlat9.xyz = u_xlat8.xyw;\n        u_xlat9.w = 1.0;\n        u_xlat16_10.x
            = dot(unity_SHAr, u_xlat9);\n        u_xlat16_10.y = dot(unity_SHAg,
            u_xlat9);\n        u_xlat16_10.z = dot(unity_SHAb, u_xlat9);\n       
            u_xlat16_8 = u_xlat8.ywzx * u_xlat8;\n        u_xlat16_11.x = dot(unity_SHBr,
            u_xlat16_8);\n        u_xlat16_11.y = dot(unity_SHBg, u_xlat16_8);\n       
            u_xlat16_11.z = dot(unity_SHBb, u_xlat16_8);\n        u_xlat16_45 = u_xlat9.y
            * u_xlat9.y;\n        u_xlat16_45 = u_xlat9.x * u_xlat9.x + (-u_xlat16_45);\n       
            u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_45) + u_xlat16_11.xyz;\n       
            u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;\n        u_xlat16_11.xyz
            = u_xlat16_10.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n       
            u_xlat16_12.xyz = log2(abs(u_xlat16_10.xyz));\n        u_xlat16_12.xyz
            = u_xlat16_12.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_12.xyz = exp2(u_xlat16_12.xyz);\n        u_xlat16_12.xyz = u_xlat16_12.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_10.xyzx).xyz;\n        u_xlat16_10.x
            = (u_xlatb3.x) ? u_xlat16_11.x : u_xlat16_12.x;\n        u_xlat16_10.y
            = (u_xlatb3.y) ? u_xlat16_11.y : u_xlat16_12.y;\n        u_xlat16_10.z
            = (u_xlatb3.z) ? u_xlat16_11.z : u_xlat16_12.z;\n        u_xlat16_10.xyz
            = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_10.xyz
            = vec3(u_xlat16_43) * u_xlat16_10.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            * u_xlat16_10.xyz;\n        u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_7.xyz;\n    }\n   
            u_xlat39 = dot(u_xlat16_15.xyz, u_xlat0.xyz);\n    u_xlat39 = max(u_xlat39,
            0.0);\n    u_xlat39 = (-u_xlat39) + 1.0;\n    u_xlat16_15.x = (-_RimMin)
            + _RimMax;\n    u_xlat16_28 = u_xlat39 + (-_RimMin);\n    u_xlat16_15.x
            = float(1.0) / u_xlat16_15.x;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_28;\n   
            u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_15.x
            * -2.0 + 3.0;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_28;\n    u_xlat16_15.xyz = u_xlat16_15.xxx
            * u_xlat16_6.xyz;\n    u_xlatb39 = _SpecularMapType>=5.0;\n    if(u_xlatb39){\n       
            u_xlat10_39 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_43
            = u_xlat10_39;\n    } else {\n        u_xlatb39 = _SpecularMapType>=4.0;\n       
            if(u_xlatb39){\n            u_xlat10_39 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_43 = u_xlat10_39;\n        } else {\n            u_xlatb39 =
            _SpecularMapType>=3.0;\n            if(u_xlatb39){\n                u_xlat10_39
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_43
            = u_xlat10_39;\n            } else {\n                u_xlatb39 = _SpecularMapType>=2.0;\n               
            if(u_xlatb39){\n                    u_xlat10_39 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_43 = u_xlat10_39;\n               
            } else {\n                    u_xlatb39 = _SpecularMapType>=1.0;\n                   
            u_xlat16_43 = (u_xlatb39) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat16_2.xxx
            + _MainLightPosition.xyz;\n    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlat39 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat39);\n   
            u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat16_5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x
            = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_43
            * u_xlat16_2.x;\n    u_xlat13 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_43
            = min(u_xlat13, 1.0);\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n   
            u_xlat16_5.x = u_xlat0.x * u_xlat16_43 + (-u_xlat0.x);\n    u_xlat0.x
            = u_xlat16_5.x * u_xlat0.x + 1.0;\n    u_xlat26 = u_xlat16_43 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x =
            u_xlat26 / u_xlat0.x;\n    u_xlat16_43 = u_xlat0.x * 0.157079637;\n   
            u_xlat0.x = max(u_xlat16_43, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_43 = u_xlat13 * 0.280000001;\n    u_xlat13 = (-u_xlat16_43)
            * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat13 * u_xlat0.x;\n   
            u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_2.x
            * unity_LightData.z;\n    u_xlat16_2.x = u_xlat16_44 * u_xlat16_2.x;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_15.xyz
            * _RimColor.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nlowp
            vec3 u_xlat10_2;\nbvec3 u_xlatb2;\nmediump float u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_9;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0 = (-vs_TEXCOORD0.xyzz)
            + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_1.x = dot(u_xlat0.xyw, u_xlat0.xyw);\n   
            u_xlat2 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat2);\n   
            u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat2 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat1 =
            vec4(u_xlat2) * vs_NORMAL0.xyzz;\n    u_xlat2 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1 = u_xlat1 * vec4(u_xlat2);\n   
            u_xlatb2.x = 0.0<_SingleIndirectColor;\n    u_xlat0 = (u_xlatb2.x) ?
            u_xlat16_0.xywz : u_xlat1.xywz;\n    u_xlat2 = dot(u_xlat1.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_3 = u_xlat2 * 0.5 + 0.5;\n    u_xlat16_9.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_9.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_9.x);\n    u_xlat16_1
            = u_xlat0.yzwx * u_xlat0.xywz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_9.xyz = unity_SHC.xyz * u_xlat16_9.xxx + u_xlat16_4.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz
            = log2(abs(u_xlat16_9.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz
            = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb2.xyz
            = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_9.xyzx).xyz;\n    u_xlat16_9.x = (u_xlatb2.x) ? u_xlat16_5.x
            : u_xlat16_4.x;\n    u_xlat16_9.y = (u_xlatb2.y) ? u_xlat16_5.y : u_xlat16_4.y;\n   
            u_xlat16_9.z = (u_xlatb2.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_9.xyz
            = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_2.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * _BaseColor.xyz;\n   
            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_4.xyz;\n    u_xlat16_9.xyz
            = u_xlat16_9.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_22 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_3 = u_xlat16_3 + (-u_xlat16_22);\n    u_xlat16_5.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n   
            u_xlat16_22 = float(1.0) / u_xlat16_22;\n    u_xlat16_3 = u_xlat16_3
            * u_xlat16_22;\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_3 * -2.0 + 3.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * u_xlat16_22;\n    u_xlat16_3 = u_xlat16_3 *
            unity_LightData.z;\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _MainLightColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_9.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 9
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nbvec3 u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump
            float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec4
            u_xlat16_7;\nvec4 u_xlat8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_14;\nmediump
            vec3 u_xlat16_16;\nmediump vec3 u_xlat16_17;\nfloat u_xlat24;\nmediump
            float u_xlat16_26;\nmediump float u_xlat16_29;\nfloat u_xlat36;\nlowp
            float u_xlat10_36;\nbool u_xlatb36;\nmediump float u_xlat16_40;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat36 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat36);\n    u_xlat16_14.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat36 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_40 = u_xlat36 * 0.5 + 0.5;\n   
            u_xlat16_5 = u_xlat36;\n    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);\n   
            u_xlat16_17.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_29
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_29 = (-u_xlat16_17.x)
            + u_xlat16_29;\n    u_xlat16_40 = u_xlat16_40 + (-u_xlat16_17.x);\n   
            u_xlat16_17.x = float(1.0) / u_xlat16_29;\n    u_xlat16_40 = u_xlat16_40
            * u_xlat16_17.x;\n    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);\n   
            u_xlat16_17.x = u_xlat16_40 * -2.0 + 3.0;\n    u_xlat16_40 = u_xlat16_40
            * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_17.x;\n    u_xlat16_40
            = u_xlat16_40 * unity_LightData.z;\n    u_xlat16_17.xyz = vec3(u_xlat16_40)
            * _MainLightColor.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _MainLightColor.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_40) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb36 = 0.0<_IndirectIntensity;\n    if(u_xlatb36){\n        u_xlatb36
            = 0.0<_SingleIndirectColor;\n        u_xlat7 = (bool(u_xlatb36)) ? u_xlat16_14.xyzz
            : u_xlat0.xyzz;\n        u_xlat8.xyz = u_xlat7.xyw;\n        u_xlat8.w
            = 1.0;\n        u_xlat16_9.x = dot(unity_SHAr, u_xlat8);\n        u_xlat16_9.y
            = dot(unity_SHAg, u_xlat8);\n        u_xlat16_9.z = dot(unity_SHAb, u_xlat8);\n       
            u_xlat16_7 = u_xlat7.ywzx * u_xlat7;\n        u_xlat16_10.x = dot(unity_SHBr,
            u_xlat16_7);\n        u_xlat16_10.y = dot(unity_SHBg, u_xlat16_7);\n       
            u_xlat16_10.z = dot(unity_SHBb, u_xlat16_7);\n        u_xlat16_40 = u_xlat8.y
            * u_xlat8.y;\n        u_xlat16_40 = u_xlat8.x * u_xlat8.x + (-u_xlat16_40);\n       
            u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_40) + u_xlat16_10.xyz;\n       
            u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;\n        u_xlat16_10.xyz
            = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n       
            u_xlat16_11.xyz = log2(abs(u_xlat16_9.xyz));\n        u_xlat16_11.xyz
            = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);\n        u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_9.xyzx).xyz;\n        u_xlat16_9.x
            = (u_xlatb3.x) ? u_xlat16_10.x : u_xlat16_11.x;\n        u_xlat16_9.y
            = (u_xlatb3.y) ? u_xlat16_10.y : u_xlat16_11.y;\n        u_xlat16_9.z
            = (u_xlatb3.z) ? u_xlat16_10.z : u_xlat16_11.z;\n        u_xlat16_9.xyz
            = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_4.xyz =
            u_xlat16_4.xyz * u_xlat16_9.xyz;\n        u_xlat16_6.xyz = u_xlat16_4.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity))
            + u_xlat16_6.xyz;\n    }\n    u_xlat36 = dot(u_xlat16_14.xyz, u_xlat0.xyz);\n   
            u_xlat36 = max(u_xlat36, 0.0);\n    u_xlat36 = (-u_xlat36) + 1.0;\n   
            u_xlat16_14.x = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat36 + (-_RimMin);\n   
            u_xlat16_14.x = float(1.0) / u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_14.x
            * u_xlat16_26;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_14.x * -2.0 + 3.0;\n    u_xlat16_14.x = u_xlat16_14.x
            * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_26;\n   
            u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_17.xyz;\n    u_xlatb36 =
            _SpecularMapType>=5.0;\n    if(u_xlatb36){\n        u_xlat10_36 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_4.x = u_xlat10_36;\n    } else
            {\n        u_xlatb36 = _SpecularMapType>=4.0;\n        if(u_xlatb36){\n           
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_4.x = u_xlat10_36;\n        } else {\n            u_xlatb36
            = _SpecularMapType>=3.0;\n            if(u_xlatb36){\n               
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_4.x = u_xlat10_36;\n            } else {\n                u_xlatb36
            = _SpecularMapType>=2.0;\n                if(u_xlatb36){\n                   
            u_xlat10_36 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_4.x = u_xlat10_36;\n                } else {\n                   
            u_xlatb36 = _SpecularMapType>=1.0;\n                    u_xlat16_4.x
            = (u_xlatb36) ? u_xlat10_3.w : 1.0;\n                }\n            }\n       
            }\n    }\n    u_xlat16_16.xyz = u_xlat1.xyz * u_xlat16_2.xxx + _MainLightPosition.xyz;\n   
            u_xlat16_2.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n    u_xlat36 =
            max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat36);\n   
            u_xlat16_16.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz;\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_16.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x;\n    u_xlat12 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_4.x = min(u_xlat12, 1.0);\n    u_xlat16_4.x
            = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16.x = u_xlat0.x * u_xlat16_4.x
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16.x * u_xlat0.x + 1.0;\n   
            u_xlat24 = u_xlat16_4.x * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_4.x
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_4.x, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_4.x = u_xlat12 * 0.280000001;\n   
            u_xlat12 = (-u_xlat16_4.x) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x =
            u_xlat12 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n   
            u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat16_2.x =
            u_xlat16_5 * u_xlat16_2.x;\n    u_xlat16_4.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_14.xyz * _RimColor.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 10
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nvec4 u_xlat3;\nlowp vec3 u_xlat10_3;\nint u_xlati3;\nbvec3
            u_xlatb3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3
            u_xlat9;\nfloat u_xlat13;\nint u_xlati13;\nbool u_xlatb13;\nmediump float
            u_xlat16_14;\nfloat u_xlat23;\nbool u_xlatb23;\nmediump vec2 u_xlat16_24;\nfloat
            u_xlat30;\nint u_xlati30;\nbool u_xlatb30;\nmediump float u_xlat16_32;\nfloat
            u_xlat33;\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat30 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n   
            u_xlat1 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyw, u_xlat1.xyw);\n    u_xlat30 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat30);\n    u_xlat16_1 = u_xlat1 * u_xlat16_2.xxxx;\n   
            u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_2.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_32 = u_xlat30 * 0.5 + 0.5;\n    u_xlat16_4 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_14 = (-u_xlat16_4) + u_xlat16_14;\n    u_xlat16_32 = u_xlat16_32
            + (-u_xlat16_4);\n    u_xlat16_14 = float(1.0) / u_xlat16_14;\n    u_xlat16_32
            = u_xlat16_32 * u_xlat16_14;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0,
            1.0);\n    u_xlat16_24.x = u_xlat16_32 * -2.0 + 3.0;\n    u_xlat16_32
            = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_24.x;\n   
            u_xlat16_32 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_5.xyz =
            (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_32)
            * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _MainLightColor.xyz;\n    u_xlatb30 = 0.0<_SingleIndirectColor;\n   
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat16_1 : u_xlat0.xyzz;\n    u_xlat3.xyz
            = u_xlat1.xyw;\n    u_xlat3.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr,
            u_xlat3);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_6.z
            = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1 = u_xlat1.ywzx * u_xlat1;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_32
            = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n   
            u_xlat16_7.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz
            = u_xlat16_6.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_8.xyz
            = log2(abs(u_xlat16_6.xyz));\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb3.xyz
            = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_6.xyzx).xyz;\n    u_xlat16_6.x = (u_xlatb3.x) ? u_xlat16_7.x
            : u_xlat16_8.x;\n    u_xlat16_6.y = (u_xlatb3.y) ? u_xlat16_7.y : u_xlat16_8.y;\n   
            u_xlat16_6.z = (u_xlatb3.z) ? u_xlat16_7.z : u_xlat16_8.z;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_6.xyz = u_xlat16_2.xyz
            * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_5.xyz = u_xlat16_2.xyz
            * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_32 = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati30 = int(u_xlat16_32);\n    u_xlat16_6.xyz
            = u_xlat16_5.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30
            ; u_xlati_loop_1++)\n    {\n        u_xlat13 = float(u_xlati_loop_1);\n       
            u_xlatb23 = u_xlat13<2.0;\n        u_xlat16_24.xy = (bool(u_xlatb23))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat33
            = u_xlat13 + -2.0;\n        u_xlat13 = (u_xlatb23) ? u_xlat13 : u_xlat33;\n       
            u_xlatb13 = u_xlat13<1.0;\n        u_xlat16_32 = (u_xlatb13) ? u_xlat16_24.x
            : u_xlat16_24.y;\n        u_xlati13 = int(u_xlat16_32);\n        u_xlat9.xyz
            = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati13).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati13).xyz;\n        u_xlat23
            = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat23 = max(u_xlat23, 6.10351563e-05);\n       
            u_xlat33 = inversesqrt(u_xlat23);\n        u_xlat9.xyz = vec3(u_xlat33)
            * u_xlat9.xyz;\n        u_xlat33 = float(1.0) / u_xlat23;\n        u_xlat23
            = u_xlat23 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati13).y;\n        u_xlat23
            = clamp(u_xlat23, 0.0, 1.0);\n        u_xlat23 = u_xlat23 * u_xlat33;\n       
            u_xlat16_32 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati13).xyz,
            u_xlat9.xyz);\n        u_xlat16_32 = u_xlat16_32 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).w;\n        u_xlat16_32
            = clamp(u_xlat16_32, 0.0, 1.0);\n        u_xlat16_32 = u_xlat16_32 *
            u_xlat16_32;\n        u_xlat23 = u_xlat16_32 * u_xlat23;\n        u_xlat33
            = dot(u_xlat0.xyz, u_xlat9.xyz);\n        u_xlat16_32 = u_xlat33 * 0.5
            + (-u_xlat16_4);\n        u_xlat16_32 = u_xlat16_32 + 0.5;\n        u_xlat16_32
            = u_xlat16_14 * u_xlat16_32;\n        u_xlat16_32 = clamp(u_xlat16_32,
            0.0, 1.0);\n        u_xlat16_24.x = u_xlat16_32 * -2.0 + 3.0;\n       
            u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n        u_xlat16_32 = u_xlat16_32
            * u_xlat16_24.x;\n        u_xlat16_32 = u_xlat23 * u_xlat16_32;\n       
            u_xlat16_7.xyz = vec3(u_xlat16_32) * _HColor.xyz;\n        u_xlat16_8.xyz
            = u_xlat16_2.xyz * _AdditionalLightsColorDynamicIndex(u_xlati13).xyz;\n       
            u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n   
            }\n    SV_Target0.xyz = u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 17
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nbvec3
            u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec4 u_xlat8;\nmediump vec4
            u_xlat16_8;\nvec4 u_xlat9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump
            vec3 u_xlat16_12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nfloat
            u_xlat19;\nmediump float u_xlat16_21;\nvec3 u_xlat25;\nint u_xlati33;\nmediump
            float u_xlat16_37;\nfloat u_xlat48;\nlowp float u_xlat10_48;\nint u_xlati48;\nbool
            u_xlatb48;\nfloat u_xlat49;\nint u_xlati49;\nbool u_xlatb49;\nfloat u_xlat51;\nmediump
            float u_xlat16_52;\nmediump float u_xlat16_53;\nmediump float u_xlat16_54;\n#define
            UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat48 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat48 = max(u_xlat16_2, 0.00100000005);\n   
            u_xlat16_2 = inversesqrt(u_xlat48);\n    u_xlat16_18.xyz = u_xlat1.xyz
            * vec3(u_xlat16_2);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat48 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_52 = u_xlat48 * 0.5 + 0.5;\n   
            u_xlat16_5 = u_xlat48;\n    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);\n   
            u_xlat16_21 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_37
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_37 = (-u_xlat16_21)
            + u_xlat16_37;\n    u_xlat16_52 = u_xlat16_52 + (-u_xlat16_21);\n   
            u_xlat16_37 = float(1.0) / u_xlat16_37;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_37;\n    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n   
            u_xlat16_53 = u_xlat16_52 * -2.0 + 3.0;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * u_xlat16_53;\n    u_xlat16_52
            = u_xlat16_52 * unity_LightData.z;\n    u_xlat16_6.xyz = vec3(u_xlat16_52)
            * _MainLightColor.xyz;\n    u_xlat16_7.xyz = _HColor.xyz * _MainLightColor.xyz
            + (-_SColor.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat16_52) * u_xlat16_7.xyz
            + _SColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;\n   
            u_xlatb48 = 0.0<_IndirectIntensity;\n    if(u_xlatb48){\n        u_xlatb48
            = 0.0<_SingleIndirectColor;\n        u_xlat8 = (bool(u_xlatb48)) ? u_xlat16_18.xyzz
            : u_xlat0.xyzz;\n        u_xlat9.xyz = u_xlat8.xyw;\n        u_xlat9.w
            = 1.0;\n        u_xlat16_10.x = dot(unity_SHAr, u_xlat9);\n        u_xlat16_10.y
            = dot(unity_SHAg, u_xlat9);\n        u_xlat16_10.z = dot(unity_SHAb,
            u_xlat9);\n        u_xlat16_8 = u_xlat8.ywzx * u_xlat8;\n        u_xlat16_11.x
            = dot(unity_SHBr, u_xlat16_8);\n        u_xlat16_11.y = dot(unity_SHBg,
            u_xlat16_8);\n        u_xlat16_11.z = dot(unity_SHBb, u_xlat16_8);\n       
            u_xlat16_52 = u_xlat9.y * u_xlat9.y;\n        u_xlat16_52 = u_xlat9.x
            * u_xlat9.x + (-u_xlat16_52);\n        u_xlat16_11.xyz = unity_SHC.xyz
            * vec3(u_xlat16_52) + u_xlat16_11.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz
            + u_xlat16_11.xyz;\n        u_xlat16_11.xyz = u_xlat16_10.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n        u_xlat16_12.xyz = log2(abs(u_xlat16_10.xyz));\n       
            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_12.xyz = exp2(u_xlat16_12.xyz);\n        u_xlat16_12.xyz = u_xlat16_12.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_10.xyzx).xyz;\n        u_xlat16_10.x
            = (u_xlatb3.x) ? u_xlat16_11.x : u_xlat16_12.x;\n        u_xlat16_10.y
            = (u_xlatb3.y) ? u_xlat16_11.y : u_xlat16_12.y;\n        u_xlat16_10.z
            = (u_xlatb3.z) ? u_xlat16_11.z : u_xlat16_12.z;\n        u_xlat16_10.xyz
            = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_10.xyz
            = u_xlat16_4.xyz * u_xlat16_10.xyz;\n        u_xlat16_7.xyz = u_xlat16_10.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity))
            + u_xlat16_7.xyz;\n    }\n    u_xlat48 = dot(u_xlat16_18.xyz, u_xlat0.xyz);\n   
            u_xlat48 = max(u_xlat48, 0.0);\n    u_xlat48 = (-u_xlat48) + 1.0;\n   
            u_xlat16_52 = (-_RimMin) + _RimMax;\n    u_xlat16_53 = u_xlat48 + (-_RimMin);\n   
            u_xlat16_52 = float(1.0) / u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_53;\n    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n   
            u_xlat16_53 = u_xlat16_52 * -2.0 + 3.0;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * u_xlat16_53;\n    u_xlat16_6.xyz
            = vec3(u_xlat16_52) * u_xlat16_6.xyz;\n    u_xlatb48 = _SpecularMapType>=5.0;\n   
            if(u_xlatb48){\n        u_xlat10_48 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_53 = u_xlat10_48;\n    } else {\n        u_xlatb48 = _SpecularMapType>=4.0;\n       
            if(u_xlatb48){\n            u_xlat10_48 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_53 = u_xlat10_48;\n        } else {\n            u_xlatb48 =
            _SpecularMapType>=3.0;\n            if(u_xlatb48){\n                u_xlat10_48
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_53
            = u_xlat10_48;\n            } else {\n                u_xlatb48 = _SpecularMapType>=2.0;\n               
            if(u_xlatb48){\n                    u_xlat10_48 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_53 = u_xlat10_48;\n               
            } else {\n                    u_xlatb48 = _SpecularMapType>=1.0;\n                   
            u_xlat16_53 = (u_xlatb48) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_10.xyz = u_xlat1.xyz * vec3(u_xlat16_2)
            + _MainLightPosition.xyz;\n    u_xlat16_2 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n   
            u_xlat48 = max(u_xlat16_2, 0.00100000005);\n    u_xlat16_2 = inversesqrt(u_xlat48);\n   
            u_xlat16_10.xyz = vec3(u_xlat16_2) * u_xlat16_10.xyz;\n    u_xlat48 =
            dot(u_xlat0.xyz, u_xlat16_10.xyz);\n    u_xlat48 = clamp(u_xlat48, 0.0,
            1.0);\n    u_xlat16_2 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2 = u_xlat16_53 * u_xlat16_2;\n    u_xlat1.x = u_xlat16_2 *
            u_xlat16_2;\n    u_xlat16_53 = min(u_xlat1.x, 1.0);\n    u_xlat16_53
            = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_54 = u_xlat48 * u_xlat16_53
            + (-u_xlat48);\n    u_xlat48 = u_xlat16_54 * u_xlat48 + 1.0;\n    u_xlat17
            = u_xlat16_53 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 9.99999975e-05;\n   
            u_xlat48 = u_xlat17 / u_xlat48;\n    u_xlat16_54 = u_xlat48 * 0.157079637;\n   
            u_xlat48 = max(u_xlat16_54, 9.99999975e-05);\n    u_xlat48 = sqrt(u_xlat48);\n   
            u_xlat16_54 = u_xlat1.x * 0.280000001;\n    u_xlat1.x = (-u_xlat16_54)
            * u_xlat16_2 + 1.0;\n    u_xlat16_2 = u_xlat48 * u_xlat1.x;\n    u_xlat16_2
            = max(u_xlat16_2, 0.0);\n    u_xlat16_2 = u_xlat16_2 * unity_LightData.z;\n   
            u_xlat16_2 = u_xlat16_5 * u_xlat16_2;\n    u_xlat16_10.xyz = vec3(u_xlat16_2)
            * _MainLightColor.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _SpecularColor.xyz;\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz * _RimColor.xyz + u_xlat16_10.xyz;\n   
            u_xlat16_2 = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati48
            = int(u_xlat16_2);\n    u_xlat16_10.xyz = u_xlat16_6.xyz;\n    u_xlat16_11.xyz
            = u_xlat16_7.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati48
            ; u_xlati_loop_1++)\n    {\n        u_xlat49 = float(u_xlati_loop_1);\n       
            u_xlatb3.x = u_xlat49<2.0;\n        u_xlat16_12.xy = (u_xlatb3.x) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat19 = u_xlat49 + -2.0;\n       
            u_xlat49 = (u_xlatb3.x) ? u_xlat49 : u_xlat19;\n        u_xlatb49 = u_xlat49<1.0;\n       
            u_xlat16_2 = (u_xlatb49) ? u_xlat16_12.x : u_xlat16_12.y;\n        u_xlati49
            = int(u_xlat16_2);\n        u_xlat3.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati49).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati49).xyz;\n        u_xlat51
            = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat51 = max(u_xlat51, 6.10351563e-05);\n       
            u_xlat9.x = inversesqrt(u_xlat51);\n        u_xlat25.xyz = u_xlat3.xyz
            * u_xlat9.xxx;\n        u_xlat13 = float(1.0) / u_xlat51;\n        u_xlat51
            = u_xlat51 * _AdditionalLightsAttenuationDynamicIndex(u_xlati49).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati49).y;\n        u_xlat51
            = clamp(u_xlat51, 0.0, 1.0);\n        u_xlat51 = u_xlat51 * u_xlat13;\n       
            u_xlat16_2 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati49).xyz,
            u_xlat25.xyz);\n        u_xlat16_2 = u_xlat16_2 * _AdditionalLightsAttenuationDynamicIndex(u_xlati49).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati49).w;\n        u_xlat16_2
            = clamp(u_xlat16_2, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n       
            u_xlat51 = u_xlat16_2 * u_xlat51;\n        u_xlat25.x = dot(u_xlat0.xyz,
            u_xlat25.xyz);\n        u_xlat16_2 = u_xlat25.x * 0.5 + (-u_xlat16_21);\n       
            u_xlat16_5 = u_xlat25.x;\n        u_xlat16_5 = clamp(u_xlat16_5, 0.0,
            1.0);\n        u_xlat16_2 = u_xlat16_2 + 0.5;\n        u_xlat16_2 = u_xlat16_37
            * u_xlat16_2;\n        u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n       
            u_xlat16_54 = u_xlat16_2 * -2.0 + 3.0;\n        u_xlat16_2 = u_xlat16_2
            * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_54;\n       
            u_xlat16_2 = u_xlat51 * u_xlat16_2;\n        u_xlat16_12.xyz = vec3(u_xlat16_2)
            * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n        u_xlat16_14.xyz
            = vec3(u_xlat16_2) * _HColor.xyz;\n        u_xlat16_15.xyz = u_xlat16_4.xyz
            * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n        u_xlat16_11.xyz
            = u_xlat16_15.xyz * u_xlat16_14.xyz + u_xlat16_11.xyz;\n        u_xlat16_14.xyz
            = u_xlat3.xyz * u_xlat9.xxx + u_xlat16_18.xyz;\n        u_xlat16_2 =
            dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n        u_xlat3.x = max(u_xlat16_2,
            0.00100000005);\n        u_xlat16_2 = inversesqrt(u_xlat3.x);\n       
            u_xlat16_14.xyz = vec3(u_xlat16_2) * u_xlat16_14.xyz;\n        u_xlat3.x
            = dot(u_xlat0.xyz, u_xlat16_14.xyz);\n        u_xlat3.x = clamp(u_xlat3.x,
            0.0, 1.0);\n        u_xlat16_2 = u_xlat3.x * u_xlat16_53 + (-u_xlat3.x);\n       
            u_xlat3.x = u_xlat16_2 * u_xlat3.x + 1.0;\n        u_xlat3.x = u_xlat3.x
            * u_xlat3.x + 9.99999975e-05;\n        u_xlat3.x = u_xlat17 / u_xlat3.x;\n       
            u_xlat16_2 = u_xlat3.x * 0.157079637;\n        u_xlat3.x = max(u_xlat16_2,
            9.99999975e-05);\n        u_xlat3.x = sqrt(u_xlat3.x);\n        u_xlat16_2
            = u_xlat1.x * u_xlat3.x;\n        u_xlat16_2 = max(u_xlat16_2, 0.0);\n       
            u_xlat16_2 = u_xlat51 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_5
            * u_xlat16_2;\n        u_xlat16_14.xyz = vec3(u_xlat16_2) * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n       
            u_xlat16_14.xyz = u_xlat16_14.xyz * _SpecularColor.xyz + u_xlat16_10.xyz;\n       
            u_xlat16_12.xyz = vec3(u_xlat16_52) * u_xlat16_12.xyz;\n        u_xlat16_10.xyz
            = u_xlat16_12.xyz * _RimColor.xyz + u_xlat16_14.xyz;\n    }\n    SV_Target0.xyz
            = u_xlat16_10.xyz + u_xlat16_11.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 18
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x,
            0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec3 u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4
            u_xlat16_3;\nlowp float u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_15;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nbool
            u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nvoid
            main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_8.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx + _MainLightPosition.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat16_1.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n   
            u_xlat0.x = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat21 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat10_3 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_8.x = min(u_xlat3.x, 1.0);\n    u_xlat16_15 = u_xlat3.x * 0.280000001;\n   
            u_xlat3.x = (-u_xlat16_15) * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x =
            u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat21 * u_xlat16_1.x
            + (-u_xlat21);\n    u_xlat21 = u_xlat16_8.x * u_xlat21 + 1.0;\n    u_xlat21
            = u_xlat21 * u_xlat21 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x
            * 0.318309873;\n    u_xlat21 = u_xlat10 / u_xlat21;\n    u_xlat16_1.x
            = u_xlat21 * 0.157079637;\n    u_xlat21 = max(u_xlat16_1.x, 9.99999975e-05);\n   
            u_xlat21 = sqrt(u_xlat21);\n    u_xlat16_1.x = u_xlat3.x * u_xlat21;\n   
            u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat16_1.x = u_xlat16_1.x
            * unity_LightData.z;\n    u_xlat21 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_8.x = u_xlat21;\n    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0,
            1.0);\n    u_xlat16_15 = u_xlat21 * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_8.x
            * u_xlat16_1.x;\n    u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_21 = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n   
            u_xlat16_8.x = u_xlat10_21 + -1.0;\n    u_xlat16_22 = min(u_xlat10_21,
            1.0);\n    u_xlat16_8.x = _AmbientOcclusionParam.w * u_xlat16_8.x + 1.0;\n   
            u_xlat16_4.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_1.xxx * u_xlat16_4.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _SpecularColor.xyz;\n    u_xlat16_1.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8.x = (-u_xlat16_1.x) + u_xlat16_15;\n    u_xlat16_15 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_15;\n   
            u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x
            * u_xlat16_8.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x
            * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n   
            u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat16_6.xyz
            = u_xlat16_4.xyz * u_xlat16_1.xxx;\n    u_xlat16_4.xyz = _HColor.xyz
            * u_xlat16_4.xyz + (-_SColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx
            * u_xlat16_4.xyz + _SColor.xyz;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_4.x = vs_TEXCOORD2.w
            + (-_RimMin);\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_4.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat16_23)
            * u_xlat16_6.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz
            + u_xlat16_5.xyz;\n    u_xlatb21 = 0.0<_SingleIndirectColor;\n    u_xlat0
            = (bool(u_xlatb21)) ? u_xlat16_2.xyzz : u_xlat0.xyzz;\n    u_xlat16_2.x
            = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat0.yzwx * u_xlat0.xywz;\n   
            u_xlat16_5.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_5.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = log2(abs(u_xlat16_2.xyz));\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x
            = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_5.x;\n    u_xlat16_2.y = (u_xlatb0.y)
            ? u_xlat16_6.y : u_xlat16_5.y;\n    u_xlat16_2.z = (u_xlatb0.z) ? u_xlat16_6.z
            : u_xlat16_5.z;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_1.xyz = u_xlat16_5.xyz
            * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nint u_xlati3;\nbool
            u_xlatb3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool
            u_xlatb9;\nfloat u_xlat11;\nfloat u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint
            u_xlati19;\nmediump float u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3.x
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3.x<2.0;\n       
            u_xlat16_4.xy = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3.x + -2.0;\n        u_xlat3.x = (u_xlatb9) ? u_xlat3.x
            : u_xlat15;\n        u_xlatb3 = u_xlat3.x<1.0;\n        u_xlat16_20 =
            (u_xlatb3) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    u_xlat3.xyz = (-u_xlat0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat18);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat16_2.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 0.0);\n    vs_TEXCOORD2.w
            = (-u_xlat18) + 1.0;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump
            vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tmediump
            float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec3 u_xlatb0;\nmediump
            vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat3;\nmediump vec4
            u_xlat16_3;\nlowp float u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_7;\nfloat u_xlat9;\nmediump float
            u_xlat16_13;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_7.xyz = u_xlat0.xyz * u_xlat16_1.xxx + _MainLightPosition.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.x = dot(u_xlat16_7.xyz,
            u_xlat16_7.xyz);\n    u_xlat0.x = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx
            * u_xlat16_7.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat18
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0,
            1.0);\n    u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat10_3 * u_xlat16_1.x;\n    u_xlat3 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_7.x = min(u_xlat3, 1.0);\n    u_xlat16_13 = u_xlat3 * 0.280000001;\n   
            u_xlat3 = (-u_xlat16_13) * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_7.x
            * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat18 * u_xlat16_1.x + (-u_xlat18);\n   
            u_xlat18 = u_xlat16_7.x * u_xlat18 + 1.0;\n    u_xlat18 = u_xlat18 *
            u_xlat18 + 9.99999975e-05;\n    u_xlat9 = u_xlat16_1.x * 0.318309873;\n   
            u_xlat18 = u_xlat9 / u_xlat18;\n    u_xlat16_1.x = u_xlat18 * 0.157079637;\n   
            u_xlat18 = max(u_xlat16_1.x, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n   
            u_xlat16_1.x = u_xlat3 * u_xlat18;\n    u_xlat16_1.x = max(u_xlat16_1.x,
            0.0);\n    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat18
            = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_7.x = u_xlat18;\n   
            u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);\n    u_xlat16_13 = u_xlat18
            * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_7.x * u_xlat16_1.x;\n    u_xlat16_1.xyw
            = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw
            * _SpecularColor.xyz;\n    u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_13 = u_xlat16_13 + (-u_xlat16_20);\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_13 = u_xlat16_13
            * u_xlat16_20;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n   
            u_xlat16_20 = u_xlat16_13 * -2.0 + 3.0;\n    u_xlat16_13 = u_xlat16_13
            * u_xlat16_13;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_20;\n    u_xlat16_13
            = u_xlat16_13 * unity_LightData.z;\n    u_xlat16_4.xyz = vec3(u_xlat16_13)
            * _MainLightColor.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_22 = vs_TEXCOORD2.w
            + (-_RimMin);\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_22;\n    u_xlat16_20
            = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_20 * -2.0
            + 3.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat16_1.xyw = u_xlat16_4.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlatb18 = 0.0<_SingleIndirectColor;\n    u_xlat0
            = (bool(u_xlatb18)) ? u_xlat16_2.xyzz : u_xlat0.xyzz;\n    u_xlat16_2.x
            = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat0.yzwx * u_xlat0.xywz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_2.xyz));\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x
            = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_2.y = (u_xlatb0.y)
            ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_2.z = (u_xlatb0.z) ? u_xlat16_5.z
            : u_xlat16_4.z;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = _HColor.xyz * _MainLightColor.xyz + (-_SColor.xyz);\n   
            u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.xyz = u_xlat16_1.xyw + u_xlat16_2.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 11
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec2 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nbvec3 u_xlatb2;\nmediump float u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_26;\nvoid
            main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n   
            u_xlat0 = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyw, u_xlat0.xyw);\n    u_xlat2.x = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat2.x);\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n   
            u_xlat2.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n   
            u_xlat1 = u_xlat2.xxxx * vs_NORMAL0.xyzz;\n    u_xlat2.x = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1 = u_xlat1 * u_xlat2.xxxx;\n   
            u_xlatb2.x = 0.0<_SingleIndirectColor;\n    u_xlat0 = (u_xlatb2.x) ?
            u_xlat16_0.xywz : u_xlat1.xywz;\n    u_xlat2.x = dot(u_xlat1.xyw, _MainLightPosition.xyz);\n   
            u_xlat16_3 = u_xlat2.x * 0.5 + 0.5;\n    u_xlat16_10.x = u_xlat0.y *
            u_xlat0.y;\n    u_xlat16_10.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_10.x);\n   
            u_xlat16_1 = u_xlat0.yzwx * u_xlat0.xywz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_10.xyz = unity_SHC.xyz *
            u_xlat16_10.xxx + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_10.xyz));\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_10.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb2.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_10.xyzx).xyz;\n    u_xlat16_10.x
            = (u_xlatb2.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_10.y = (u_xlatb2.y)
            ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_10.z = (u_xlatb2.z) ? u_xlat16_5.z
            : u_xlat16_4.z;\n    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat2.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_2.x = texture2D(_ScreenSpaceOcclusionTexture, u_xlat2.xy).x;\n   
            u_xlat16_4.x = min(u_xlat10_2.x, 1.0);\n    u_xlat16_11.x = u_xlat10_2.x
            + -1.0;\n    u_xlat16_11.x = _AmbientOcclusionParam.w * u_xlat16_11.x
            + 1.0;\n    u_xlat16_11.xyz = u_xlat16_11.xxx * _MainLightColor.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx;\n    u_xlat10_2.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz
            * _BaseColor.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_4.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_3 = u_xlat16_3 + (-u_xlat16_4.x);\n    u_xlat16_26 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_26;\n   
            u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3
            * u_xlat16_4.x;\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_4.x
            = u_xlat16_3 * -2.0 + 3.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3
            * unity_LightData.z;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_3) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;\n    SV_Target0.xyz
            = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_10.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 13
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat11;\nfloat
            u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float
            u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy *
            _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3 + -2.0;\n        u_xlat3 = (u_xlatb9) ? u_xlat3 :
            u_xlat15;\n        u_xlatb3 = u_xlat3<1.0;\n        u_xlat16_20 = (u_xlatb3)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_NORMAL0.xyz
            = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3
            u_xlat16_2;\nvec2 u_xlat3;\nlowp vec4 u_xlat10_3;\nbvec3 u_xlatb3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nvec4 u_xlat8;\nmediump vec4 u_xlat16_8;\nvec4 u_xlat9;\nmediump
            vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat
            u_xlat13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_19;\nfloat
            u_xlat26;\nmediump float u_xlat16_28;\nfloat u_xlat39;\nlowp float u_xlat10_39;\nbool
            u_xlatb39;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nmediump
            float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\nvec4
            hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat39 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat39 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat39);\n    u_xlat16_15.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_39 = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n   
            u_xlat16_4.x = u_xlat10_39 + -1.0;\n    u_xlat16_4.x = _AmbientOcclusionParam.w
            * u_xlat16_4.x + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n   
            u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat40 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_43 = u_xlat40 * 0.5 + 0.5;\n    u_xlat16_44 = u_xlat40;\n   
            u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_19 = (-u_xlat16_6.x) + u_xlat16_19;\n    u_xlat16_43 = u_xlat16_43
            + (-u_xlat16_6.x);\n    u_xlat16_6.x = float(1.0) / u_xlat16_19;\n   
            u_xlat16_43 = u_xlat16_43 * u_xlat16_6.x;\n    u_xlat16_43 = clamp(u_xlat16_43,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_43 * -2.0 + 3.0;\n    u_xlat16_43
            = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_6.x;\n   
            u_xlat16_43 = u_xlat16_43 * unity_LightData.z;\n    u_xlat16_6.xyz =
            u_xlat16_4.xyz * vec3(u_xlat16_43);\n    u_xlat16_7.xyz = _HColor.xyz
            * u_xlat16_4.xyz + (-_SColor.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat16_43)
            * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_5.xyz
            * u_xlat16_7.xyz;\n    u_xlatb40 = 0.0<_IndirectIntensity;\n    if(u_xlatb40){\n       
            u_xlat16_43 = min(u_xlat10_39, 1.0);\n        u_xlatb39 = 0.0<_SingleIndirectColor;\n       
            u_xlat8 = (bool(u_xlatb39)) ? u_xlat16_15.xyzz : u_xlat0.xyzz;\n       
            u_xlat9.xyz = u_xlat8.xyw;\n        u_xlat9.w = 1.0;\n        u_xlat16_10.x
            = dot(unity_SHAr, u_xlat9);\n        u_xlat16_10.y = dot(unity_SHAg,
            u_xlat9);\n        u_xlat16_10.z = dot(unity_SHAb, u_xlat9);\n       
            u_xlat16_8 = u_xlat8.ywzx * u_xlat8;\n        u_xlat16_11.x = dot(unity_SHBr,
            u_xlat16_8);\n        u_xlat16_11.y = dot(unity_SHBg, u_xlat16_8);\n       
            u_xlat16_11.z = dot(unity_SHBb, u_xlat16_8);\n        u_xlat16_45 = u_xlat9.y
            * u_xlat9.y;\n        u_xlat16_45 = u_xlat9.x * u_xlat9.x + (-u_xlat16_45);\n       
            u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_45) + u_xlat16_11.xyz;\n       
            u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;\n        u_xlat16_11.xyz
            = u_xlat16_10.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n       
            u_xlat16_12.xyz = log2(abs(u_xlat16_10.xyz));\n        u_xlat16_12.xyz
            = u_xlat16_12.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_12.xyz = exp2(u_xlat16_12.xyz);\n        u_xlat16_12.xyz = u_xlat16_12.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_10.xyzx).xyz;\n        u_xlat16_10.x
            = (u_xlatb3.x) ? u_xlat16_11.x : u_xlat16_12.x;\n        u_xlat16_10.y
            = (u_xlatb3.y) ? u_xlat16_11.y : u_xlat16_12.y;\n        u_xlat16_10.z
            = (u_xlatb3.z) ? u_xlat16_11.z : u_xlat16_12.z;\n        u_xlat16_10.xyz
            = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_10.xyz
            = vec3(u_xlat16_43) * u_xlat16_10.xyz;\n        u_xlat16_5.xyz = u_xlat16_5.xyz
            * u_xlat16_10.xyz;\n        u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_7.xyz;\n    }\n   
            u_xlat39 = dot(u_xlat16_15.xyz, u_xlat0.xyz);\n    u_xlat39 = max(u_xlat39,
            0.0);\n    u_xlat39 = (-u_xlat39) + 1.0;\n    u_xlat16_15.x = (-_RimMin)
            + _RimMax;\n    u_xlat16_28 = u_xlat39 + (-_RimMin);\n    u_xlat16_15.x
            = float(1.0) / u_xlat16_15.x;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_28;\n   
            u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_15.x
            * -2.0 + 3.0;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_28;\n    u_xlat16_15.xyz = u_xlat16_15.xxx
            * u_xlat16_6.xyz;\n    u_xlatb39 = _SpecularMapType>=5.0;\n    if(u_xlatb39){\n       
            u_xlat10_39 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_43
            = u_xlat10_39;\n    } else {\n        u_xlatb39 = _SpecularMapType>=4.0;\n       
            if(u_xlatb39){\n            u_xlat10_39 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_43 = u_xlat10_39;\n        } else {\n            u_xlatb39 =
            _SpecularMapType>=3.0;\n            if(u_xlatb39){\n                u_xlat10_39
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_43
            = u_xlat10_39;\n            } else {\n                u_xlatb39 = _SpecularMapType>=2.0;\n               
            if(u_xlatb39){\n                    u_xlat10_39 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_43 = u_xlat10_39;\n               
            } else {\n                    u_xlatb39 = _SpecularMapType>=1.0;\n                   
            u_xlat16_43 = (u_xlatb39) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat16_2.xxx
            + _MainLightPosition.xyz;\n    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n   
            u_xlat39 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat39);\n   
            u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat16_5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x
            = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_43
            * u_xlat16_2.x;\n    u_xlat13 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_43
            = min(u_xlat13, 1.0);\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n   
            u_xlat16_5.x = u_xlat0.x * u_xlat16_43 + (-u_xlat0.x);\n    u_xlat0.x
            = u_xlat16_5.x * u_xlat0.x + 1.0;\n    u_xlat26 = u_xlat16_43 * 0.318309873;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x =
            u_xlat26 / u_xlat0.x;\n    u_xlat16_43 = u_xlat0.x * 0.157079637;\n   
            u_xlat0.x = max(u_xlat16_43, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_43 = u_xlat13 * 0.280000001;\n    u_xlat13 = (-u_xlat16_43)
            * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat13 * u_xlat0.x;\n   
            u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_2.x
            * unity_LightData.z;\n    u_xlat16_2.x = u_xlat16_44 * u_xlat16_2.x;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_15.xyz
            * _RimColor.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 14
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x,
            0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nint u_xlati1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump
            float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec4
            u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump
            float u_xlat16_21;\nfloat u_xlat24;\nvec3 u_xlat28;\nint u_xlati33;\nmediump
            float u_xlat16_37;\nfloat u_xlat48;\nlowp float u_xlat10_48;\nbool u_xlatb48;\nfloat
            u_xlat49;\nint u_xlati49;\nbool u_xlatb49;\nmediump float u_xlat16_52;\nmediump
            float u_xlat16_53;\nmediump float u_xlat16_54;\nfloat u_xlat56;\n#define
            UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat48 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat48 = max(u_xlat16_2, 0.00100000005);\n   
            u_xlat16_2 = inversesqrt(u_xlat48);\n    u_xlat16_18.xyz = u_xlat1.xyz
            * vec3(u_xlat16_2);\n    u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat48 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_52 = u_xlat48 * 0.5 + 0.5;\n   
            u_xlat16_5 = u_xlat48;\n    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);\n   
            u_xlat16_21 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_37
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_37 = (-u_xlat16_21)
            + u_xlat16_37;\n    u_xlat16_52 = u_xlat16_52 + (-u_xlat16_21);\n   
            u_xlat16_37 = float(1.0) / u_xlat16_37;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_37;\n    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n   
            u_xlat16_53 = u_xlat16_52 * -2.0 + 3.0;\n    u_xlat16_52 = u_xlat16_52
            * u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * u_xlat16_53;\n    u_xlat16_52
            = u_xlat16_52 * unity_LightData.z;\n    u_xlat16_6.xyz = vec3(u_xlat16_52)
            * _MainLightColor.xyz;\n    u_xlat16_7.xyz = _HColor.xyz * _MainLightColor.xyz
            + (-_SColor.xyz);\n    u_xlat16_7.xyz = vec3(u_xlat16_52) * u_xlat16_7.xyz
            + _SColor.xyz;\n    u_xlatb48 = 0.0<_SingleIndirectColor;\n    u_xlat3
            = (bool(u_xlatb48)) ? u_xlat16_18.xyzz : u_xlat0.xyzz;\n    u_xlat8.xyz
            = u_xlat3.xyw;\n    u_xlat8.w = 1.0;\n    u_xlat16_9.x = dot(unity_SHAr,
            u_xlat8);\n    u_xlat16_9.y = dot(unity_SHAg, u_xlat8);\n    u_xlat16_9.z
            = dot(unity_SHAb, u_xlat8);\n    u_xlat16_3 = u_xlat3.ywzx * u_xlat3;\n   
            u_xlat16_10.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_10.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_52
            = u_xlat8.y * u_xlat8.y;\n    u_xlat16_52 = u_xlat8.x * u_xlat8.x + (-u_xlat16_52);\n   
            u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_52) + u_xlat16_10.xyz;\n   
            u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;\n    u_xlat16_10.xyz
            = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_11.xyz
            = log2(abs(u_xlat16_9.xyz));\n    u_xlat16_11.xyz = u_xlat16_11.xyz *
            vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);\n   
            u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb8.xyz
            = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_9.xyzx).xyz;\n    u_xlat16_9.x = (u_xlatb8.x) ? u_xlat16_10.x
            : u_xlat16_11.x;\n    u_xlat16_9.y = (u_xlatb8.y) ? u_xlat16_10.y : u_xlat16_11.y;\n   
            u_xlat16_9.z = (u_xlatb8.z) ? u_xlat16_10.z : u_xlat16_11.z;\n    u_xlat16_9.xyz
            = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_9.xyz = u_xlat16_4.xyz
            * u_xlat16_9.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_7.xyz = u_xlat16_4.xyz
            * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat16_52 = (-_RimMin) + _RimMax;\n   
            u_xlat16_53 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_52 = float(1.0)
            / u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * u_xlat16_53;\n    u_xlat16_52
            = clamp(u_xlat16_52, 0.0, 1.0);\n    u_xlat16_53 = u_xlat16_52 * -2.0
            + 3.0;\n    u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n    u_xlat16_52
            = u_xlat16_52 * u_xlat16_53;\n    u_xlat16_6.xyz = vec3(u_xlat16_52)
            * u_xlat16_6.xyz;\n    u_xlat10_48 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat16_2) + _MainLightPosition.xyz;\n   
            u_xlat16_2 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlat1.x = max(u_xlat16_2,
            0.00100000005);\n    u_xlat16_2 = inversesqrt(u_xlat1.x);\n    u_xlat16_9.xyz
            = vec3(u_xlat16_2) * u_xlat16_9.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat16_9.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2
            = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_2 = u_xlat10_48
            * u_xlat16_2;\n    u_xlat48 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_53
            = min(u_xlat48, 1.0);\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n   
            u_xlat16_54 = u_xlat1.x * u_xlat16_53 + (-u_xlat1.x);\n    u_xlat1.x
            = u_xlat16_54 * u_xlat1.x + 1.0;\n    u_xlat17 = u_xlat16_53 * 0.318309873;\n   
            u_xlat1.x = u_xlat1.x * u_xlat1.x + 9.99999975e-05;\n    u_xlat1.x =
            u_xlat17 / u_xlat1.x;\n    u_xlat16_54 = u_xlat1.x * 0.157079637;\n   
            u_xlat1.x = max(u_xlat16_54, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n   
            u_xlat16_54 = u_xlat48 * 0.280000001;\n    u_xlat48 = (-u_xlat16_54)
            * u_xlat16_2 + 1.0;\n    u_xlat16_2 = u_xlat48 * u_xlat1.x;\n    u_xlat16_2
            = max(u_xlat16_2, 0.0);\n    u_xlat16_2 = u_xlat16_2 * unity_LightData.z;\n   
            u_xlat16_2 = u_xlat16_5 * u_xlat16_2;\n    u_xlat16_9.xyz = vec3(u_xlat16_2)
            * _MainLightColor.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _SpecularColor.xyz;\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz * _RimColor.xyz + u_xlat16_9.xyz;\n   
            u_xlat16_2 = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati1
            = int(u_xlat16_2);\n    u_xlat16_9.xyz = u_xlat16_6.xyz;\n    u_xlat16_10.xyz
            = u_xlat16_7.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1
            ; u_xlati_loop_1++)\n    {\n        u_xlat49 = float(u_xlati_loop_1);\n       
            u_xlatb8.x = u_xlat49<2.0;\n        u_xlat16_11.xy = (u_xlatb8.x) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat24 = u_xlat49 + -2.0;\n       
            u_xlat49 = (u_xlatb8.x) ? u_xlat49 : u_xlat24;\n        u_xlatb49 = u_xlat49<1.0;\n       
            u_xlat16_2 = (u_xlatb49) ? u_xlat16_11.x : u_xlat16_11.y;\n        u_xlati49
            = int(u_xlat16_2);\n        u_xlat8.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati49).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati49).xyz;\n        u_xlat56
            = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat56 = max(u_xlat56, 6.10351563e-05);\n       
            u_xlat12 = inversesqrt(u_xlat56);\n        u_xlat28.xyz = u_xlat8.xyz
            * vec3(u_xlat12);\n        u_xlat13 = float(1.0) / u_xlat56;\n       
            u_xlat56 = u_xlat56 * _AdditionalLightsAttenuationDynamicIndex(u_xlati49).x
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati49).y;\n        u_xlat56
            = clamp(u_xlat56, 0.0, 1.0);\n        u_xlat56 = u_xlat56 * u_xlat13;\n       
            u_xlat16_2 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati49).xyz,
            u_xlat28.xyz);\n        u_xlat16_2 = u_xlat16_2 * _AdditionalLightsAttenuationDynamicIndex(u_xlati49).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati49).w;\n        u_xlat16_2
            = clamp(u_xlat16_2, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n       
            u_xlat56 = u_xlat16_2 * u_xlat56;\n        u_xlat28.x = dot(u_xlat0.xyz,
            u_xlat28.xyz);\n        u_xlat16_2 = u_xlat28.x * 0.5 + (-u_xlat16_21);\n       
            u_xlat16_5 = u_xlat28.x;\n        u_xlat16_5 = clamp(u_xlat16_5, 0.0,
            1.0);\n        u_xlat16_2 = u_xlat16_2 + 0.5;\n        u_xlat16_2 = u_xlat16_37
            * u_xlat16_2;\n        u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n       
            u_xlat16_54 = u_xlat16_2 * -2.0 + 3.0;\n        u_xlat16_2 = u_xlat16_2
            * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_54;\n       
            u_xlat16_2 = u_xlat56 * u_xlat16_2;\n        u_xlat16_11.xyz = vec3(u_xlat16_2)
            * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n        u_xlat16_14.xyz
            = vec3(u_xlat16_2) * _HColor.xyz;\n        u_xlat16_15.xyz = u_xlat16_4.xyz
            * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n        u_xlat16_10.xyz
            = u_xlat16_15.xyz * u_xlat16_14.xyz + u_xlat16_10.xyz;\n        u_xlat16_14.xyz
            = u_xlat8.xyz * vec3(u_xlat12) + u_xlat16_18.xyz;\n        u_xlat16_2
            = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n        u_xlat8.x = max(u_xlat16_2,
            0.00100000005);\n        u_xlat16_2 = inversesqrt(u_xlat8.x);\n       
            u_xlat16_14.xyz = vec3(u_xlat16_2) * u_xlat16_14.xyz;\n        u_xlat8.x
            = dot(u_xlat0.xyz, u_xlat16_14.xyz);\n        u_xlat8.x = clamp(u_xlat8.x,
            0.0, 1.0);\n        u_xlat16_2 = u_xlat8.x * u_xlat16_53 + (-u_xlat8.x);\n       
            u_xlat8.x = u_xlat16_2 * u_xlat8.x + 1.0;\n        u_xlat8.x = u_xlat8.x
            * u_xlat8.x + 9.99999975e-05;\n        u_xlat8.x = u_xlat17 / u_xlat8.x;\n       
            u_xlat16_2 = u_xlat8.x * 0.157079637;\n        u_xlat8.x = max(u_xlat16_2,
            9.99999975e-05);\n        u_xlat8.x = sqrt(u_xlat8.x);\n        u_xlat16_2
            = u_xlat48 * u_xlat8.x;\n        u_xlat16_2 = max(u_xlat16_2, 0.0);\n       
            u_xlat16_2 = u_xlat56 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_5
            * u_xlat16_2;\n        u_xlat16_14.xyz = vec3(u_xlat16_2) * _AdditionalLightsColorDynamicIndex(u_xlati49).xyz;\n       
            u_xlat16_14.xyz = u_xlat16_14.xyz * _SpecularColor.xyz + u_xlat16_9.xyz;\n       
            u_xlat16_11.xyz = vec3(u_xlat16_52) * u_xlat16_11.xyz;\n        u_xlat16_9.xyz
            = u_xlat16_11.xyz * _RimColor.xyz + u_xlat16_14.xyz;\n    }\n    SV_Target0.xyz
            = u_xlat16_9.xyz + u_xlat16_10.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 19
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform
            \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec4 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nint u_xlati3;\nbvec3 u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump
            float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nint
            u_xlati13;\nbool u_xlatb13;\nmediump float u_xlat16_15;\nfloat u_xlat23;\nbool
            u_xlatb23;\nmediump vec2 u_xlat16_25;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nint
            u_xlati30;\nbool u_xlatb30;\nfloat u_xlat33;\nmediump float u_xlat16_34;\n#define
            UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz,
            1.0/gl_FragCoord.w);\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat30 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlat1
            = (-vs_TEXCOORD0.xyzz) + _WorldSpaceCameraPos.xyzz;\n    u_xlat16_2 =
            dot(u_xlat1.xyw, u_xlat1.xyw);\n    u_xlat30 = max(u_xlat16_2, 0.00100000005);\n   
            u_xlat16_2 = inversesqrt(u_xlat30);\n    u_xlat16_1 = u_xlat1 * vec4(u_xlat16_2);\n   
            u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_30
            = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n    u_xlat16_2
            = u_xlat10_30 + -1.0;\n    u_xlat16_2 = _AmbientOcclusionParam.w * u_xlat16_2
            + 1.0;\n    u_xlat16_12.xyz = vec3(u_xlat16_2) * _MainLightColor.xyz;\n   
            u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_34 = u_xlat3.x * 0.5 + 0.5;\n   
            u_xlat16_5 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_15
            = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_15 = (-u_xlat16_5)
            + u_xlat16_15;\n    u_xlat16_34 = u_xlat16_34 + (-u_xlat16_5);\n    u_xlat16_15
            = float(1.0) / u_xlat16_15;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_15;\n   
            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_25.x = u_xlat16_34
            * -2.0 + 3.0;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_34
            = u_xlat16_34 * u_xlat16_25.x;\n    u_xlat16_34 = u_xlat16_34 * unity_LightData.z;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz =
            vec3(u_xlat16_34) * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_12.xyz
            = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_34 = min(u_xlat10_30,
            1.0);\n    u_xlatb30 = 0.0<_SingleIndirectColor;\n    u_xlat1 = (bool(u_xlatb30))
            ? u_xlat16_1 : u_xlat0.xyzz;\n    u_xlat3.xyz = u_xlat1.xyw;\n    u_xlat3.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat3);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat3);\n   
            u_xlat16_1 = u_xlat1.ywzx * u_xlat1;\n    u_xlat16_7.x = dot(unity_SHBr,
            u_xlat16_1);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_7.z
            = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_25.x = u_xlat3.y * u_xlat3.y;\n   
            u_xlat16_25.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_25.x);\n    u_xlat16_7.xyz
            = unity_SHC.xyz * u_xlat16_25.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xyz
            * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_8.xyz = log2(abs(u_xlat16_6.xyz));\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_6.xyzx).xyz;\n    u_xlat16_6.x
            = (u_xlatb3.x) ? u_xlat16_7.x : u_xlat16_8.x;\n    u_xlat16_6.y = (u_xlatb3.y)
            ? u_xlat16_7.y : u_xlat16_8.y;\n    u_xlat16_6.z = (u_xlatb3.z) ? u_xlat16_7.z
            : u_xlat16_8.z;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz;\n   
            u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_34 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati30 = int(u_xlat16_34);\n    u_xlat16_6.xyz = u_xlat16_12.xyz;\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)\n   
            {\n        u_xlat13 = float(u_xlati_loop_1);\n        u_xlatb23 = u_xlat13<2.0;\n       
            u_xlat16_25.xy = (bool(u_xlatb23)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat33 = u_xlat13 + -2.0;\n        u_xlat13 = (u_xlatb23) ? u_xlat13
            : u_xlat33;\n        u_xlatb13 = u_xlat13<1.0;\n        u_xlat16_34 =
            (u_xlatb13) ? u_xlat16_25.x : u_xlat16_25.y;\n        u_xlati13 = int(u_xlat16_34);\n       
            u_xlat9.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati13).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati13).xyz;\n        u_xlat23
            = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat23 = max(u_xlat23, 6.10351563e-05);\n       
            u_xlat33 = inversesqrt(u_xlat23);\n        u_xlat9.xyz = vec3(u_xlat33)
            * u_xlat9.xyz;\n        u_xlat33 = float(1.0) / u_xlat23;\n        u_xlat23
            = u_xlat23 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati13).y;\n        u_xlat23
            = clamp(u_xlat23, 0.0, 1.0);\n        u_xlat23 = u_xlat23 * u_xlat33;\n       
            u_xlat16_34 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati13).xyz,
            u_xlat9.xyz);\n        u_xlat16_34 = u_xlat16_34 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).w;\n        u_xlat16_34
            = clamp(u_xlat16_34, 0.0, 1.0);\n        u_xlat16_34 = u_xlat16_34 *
            u_xlat16_34;\n        u_xlat23 = u_xlat23 * u_xlat16_34;\n        u_xlat16_7.xyz
            = vec3(u_xlat16_2) * _AdditionalLightsColorDynamicIndex(u_xlati13).xyz;\n       
            u_xlat13 = dot(u_xlat0.xyz, u_xlat9.xyz);\n        u_xlat16_34 = u_xlat13
            * 0.5 + (-u_xlat16_5);\n        u_xlat16_34 = u_xlat16_34 + 0.5;\n       
            u_xlat16_34 = u_xlat16_15 * u_xlat16_34;\n        u_xlat16_34 = clamp(u_xlat16_34,
            0.0, 1.0);\n        u_xlat16_25.x = u_xlat16_34 * -2.0 + 3.0;\n       
            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n        u_xlat16_34 = u_xlat16_34
            * u_xlat16_25.x;\n        u_xlat16_34 = u_xlat23 * u_xlat16_34;\n       
            u_xlat16_8.xyz = vec3(u_xlat16_34) * _HColor.xyz;\n        u_xlat16_7.xyz
            = u_xlat16_4.xyz * u_xlat16_7.xyz;\n        u_xlat16_6.xyz = u_xlat16_7.xyz
            * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_6.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 21
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec3
            u_xlat0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz
            = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    vs_NORMAL0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform
            \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform lowp sampler2D
            _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump float
            u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nbvec3 u_xlatb3;\nmediump
            float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec4 u_xlat9;\nmediump vec4
            u_xlat16_9;\nvec4 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nmediump vec3
            u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump vec3
            u_xlat16_19;\nfloat u_xlat20;\nmediump vec3 u_xlat16_21;\nmediump float
            u_xlat16_23;\nvec3 u_xlat27;\nint u_xlati35;\nmediump float u_xlat16_40;\nfloat
            u_xlat51;\nlowp float u_xlat10_51;\nint u_xlati51;\nbool u_xlatb51;\nfloat
            u_xlat52;\nint u_xlati52;\nbool u_xlatb52;\nfloat u_xlat54;\nmediump
            float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\n#define
            UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz,
            1.0/gl_FragCoord.w);\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat51 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat51 = max(u_xlat16_2, 0.00100000005);\n    u_xlat16_2
            = inversesqrt(u_xlat51);\n    u_xlat16_19.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n   
            u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_51
            = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n    u_xlat16_4
            = u_xlat10_51 + -1.0;\n    u_xlat16_4 = _AmbientOcclusionParam.w * u_xlat16_4
            + 1.0;\n    u_xlat16_21.xyz = vec3(u_xlat16_4) * _MainLightColor.xyz;\n   
            u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat52 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_56 = u_xlat52 * 0.5 + 0.5;\n    u_xlat16_6 = u_xlat52;\n   
            u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_23 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_40 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_40 = (-u_xlat16_23) + u_xlat16_40;\n    u_xlat16_56 = u_xlat16_56
            + (-u_xlat16_23);\n    u_xlat16_40 = float(1.0) / u_xlat16_40;\n    u_xlat16_56
            = u_xlat16_56 * u_xlat16_40;\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0,
            1.0);\n    u_xlat16_57 = u_xlat16_56 * -2.0 + 3.0;\n    u_xlat16_56 =
            u_xlat16_56 * u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n   
            u_xlat16_56 = u_xlat16_56 * unity_LightData.z;\n    u_xlat16_7.xyz =
            u_xlat16_21.xyz * vec3(u_xlat16_56);\n    u_xlat16_8.xyz = _HColor.xyz
            * u_xlat16_21.xyz + (-_SColor.xyz);\n    u_xlat16_8.xyz = vec3(u_xlat16_56)
            * u_xlat16_8.xyz + _SColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_5.xyz
            * u_xlat16_8.xyz;\n    u_xlatb52 = 0.0<_IndirectIntensity;\n    if(u_xlatb52){\n       
            u_xlat16_56 = min(u_xlat10_51, 1.0);\n        u_xlatb51 = 0.0<_SingleIndirectColor;\n       
            u_xlat9 = (bool(u_xlatb51)) ? u_xlat16_19.xyzz : u_xlat0.xyzz;\n       
            u_xlat10.xyz = u_xlat9.xyw;\n        u_xlat10.w = 1.0;\n        u_xlat16_11.x
            = dot(unity_SHAr, u_xlat10);\n        u_xlat16_11.y = dot(unity_SHAg,
            u_xlat10);\n        u_xlat16_11.z = dot(unity_SHAb, u_xlat10);\n       
            u_xlat16_9 = u_xlat9.ywzx * u_xlat9;\n        u_xlat16_12.x = dot(unity_SHBr,
            u_xlat16_9);\n        u_xlat16_12.y = dot(unity_SHBg, u_xlat16_9);\n       
            u_xlat16_12.z = dot(unity_SHBb, u_xlat16_9);\n        u_xlat16_57 = u_xlat10.y
            * u_xlat10.y;\n        u_xlat16_57 = u_xlat10.x * u_xlat10.x + (-u_xlat16_57);\n       
            u_xlat16_12.xyz = unity_SHC.xyz * vec3(u_xlat16_57) + u_xlat16_12.xyz;\n       
            u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_12.xyz;\n        u_xlat16_12.xyz
            = u_xlat16_11.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n       
            u_xlat16_13.xyz = log2(abs(u_xlat16_11.xyz));\n        u_xlat16_13.xyz
            = u_xlat16_13.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n       
            u_xlat16_13.xyz = exp2(u_xlat16_13.xyz);\n        u_xlat16_13.xyz = u_xlat16_13.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_11.xyzx).xyz;\n        u_xlat16_11.x
            = (u_xlatb3.x) ? u_xlat16_12.x : u_xlat16_13.x;\n        u_xlat16_11.y
            = (u_xlatb3.y) ? u_xlat16_12.y : u_xlat16_13.y;\n        u_xlat16_11.z
            = (u_xlatb3.z) ? u_xlat16_12.z : u_xlat16_13.z;\n        u_xlat16_11.xyz
            = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n        u_xlat16_11.xyz
            = vec3(u_xlat16_56) * u_xlat16_11.xyz;\n        u_xlat16_11.xyz = u_xlat16_5.xyz
            * u_xlat16_11.xyz;\n        u_xlat16_8.xyz = u_xlat16_11.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_8.xyz;\n    }\n   
            u_xlat51 = dot(u_xlat16_19.xyz, u_xlat0.xyz);\n    u_xlat51 = max(u_xlat51,
            0.0);\n    u_xlat51 = (-u_xlat51) + 1.0;\n    u_xlat16_56 = (-_RimMin)
            + _RimMax;\n    u_xlat16_57 = u_xlat51 + (-_RimMin);\n    u_xlat16_56
            = float(1.0) / u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n   
            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_57 = u_xlat16_56
            * -2.0 + 3.0;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_56;\n    u_xlat16_56
            = u_xlat16_56 * u_xlat16_57;\n    u_xlat16_7.xyz = vec3(u_xlat16_56)
            * u_xlat16_7.xyz;\n    u_xlatb51 = _SpecularMapType>=5.0;\n    if(u_xlatb51){\n       
            u_xlat10_51 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_57
            = u_xlat10_51;\n    } else {\n        u_xlatb51 = _SpecularMapType>=4.0;\n       
            if(u_xlatb51){\n            u_xlat10_51 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_57 = u_xlat10_51;\n        } else {\n            u_xlatb51 =
            _SpecularMapType>=3.0;\n            if(u_xlatb51){\n                u_xlat10_51
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_57
            = u_xlat10_51;\n            } else {\n                u_xlatb51 = _SpecularMapType>=2.0;\n               
            if(u_xlatb51){\n                    u_xlat10_51 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_57 = u_xlat10_51;\n               
            } else {\n                    u_xlatb51 = _SpecularMapType>=1.0;\n                   
            u_xlat16_57 = (u_xlatb51) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_11.xyz = u_xlat1.xyz * vec3(u_xlat16_2)
            + _MainLightPosition.xyz;\n    u_xlat16_2 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n   
            u_xlat51 = max(u_xlat16_2, 0.00100000005);\n    u_xlat16_2 = inversesqrt(u_xlat51);\n   
            u_xlat16_11.xyz = vec3(u_xlat16_2) * u_xlat16_11.xyz;\n    u_xlat51 =
            dot(u_xlat0.xyz, u_xlat16_11.xyz);\n    u_xlat51 = clamp(u_xlat51, 0.0,
            1.0);\n    u_xlat16_2 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2 = u_xlat16_57 * u_xlat16_2;\n    u_xlat1.x = u_xlat16_2 *
            u_xlat16_2;\n    u_xlat16_57 = min(u_xlat1.x, 1.0);\n    u_xlat16_57
            = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_58 = u_xlat51 * u_xlat16_57
            + (-u_xlat51);\n    u_xlat51 = u_xlat16_58 * u_xlat51 + 1.0;\n    u_xlat18
            = u_xlat16_57 * 0.318309873;\n    u_xlat51 = u_xlat51 * u_xlat51 + 9.99999975e-05;\n   
            u_xlat51 = u_xlat18 / u_xlat51;\n    u_xlat16_58 = u_xlat51 * 0.157079637;\n   
            u_xlat51 = max(u_xlat16_58, 9.99999975e-05);\n    u_xlat51 = sqrt(u_xlat51);\n   
            u_xlat16_58 = u_xlat1.x * 0.280000001;\n    u_xlat1.x = (-u_xlat16_58)
            * u_xlat16_2 + 1.0;\n    u_xlat16_2 = u_xlat51 * u_xlat1.x;\n    u_xlat16_2
            = max(u_xlat16_2, 0.0);\n    u_xlat16_2 = u_xlat16_2 * unity_LightData.z;\n   
            u_xlat16_2 = u_xlat16_6 * u_xlat16_2;\n    u_xlat16_21.xyz = u_xlat16_21.xyz
            * vec3(u_xlat16_2);\n    u_xlat16_21.xyz = u_xlat16_21.xyz * _SpecularColor.xyz;\n   
            u_xlat16_21.xyz = u_xlat16_7.xyz * _RimColor.xyz + u_xlat16_21.xyz;\n   
            u_xlat16_2 = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati51
            = int(u_xlat16_2);\n    u_xlat16_7.xyz = u_xlat16_21.xyz;\n    u_xlat16_11.xyz
            = u_xlat16_8.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51
            ; u_xlati_loop_1++)\n    {\n        u_xlat52 = float(u_xlati_loop_1);\n       
            u_xlatb3.x = u_xlat52<2.0;\n        u_xlat16_12.xy = (u_xlatb3.x) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat20 = u_xlat52 + -2.0;\n       
            u_xlat52 = (u_xlatb3.x) ? u_xlat52 : u_xlat20;\n        u_xlatb52 = u_xlat52<1.0;\n       
            u_xlat16_2 = (u_xlatb52) ? u_xlat16_12.x : u_xlat16_12.y;\n        u_xlati52
            = int(u_xlat16_2);\n        u_xlat3.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati52).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati52).xyz;\n        u_xlat54
            = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat54 = max(u_xlat54, 6.10351563e-05);\n       
            u_xlat10.x = inversesqrt(u_xlat54);\n        u_xlat27.xyz = u_xlat3.xyz
            * u_xlat10.xxx;\n        u_xlat14 = float(1.0) / u_xlat54;\n        u_xlat54
            = u_xlat54 * _AdditionalLightsAttenuationDynamicIndex(u_xlati52).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati52).y;\n        u_xlat54
            = clamp(u_xlat54, 0.0, 1.0);\n        u_xlat54 = u_xlat54 * u_xlat14;\n       
            u_xlat16_2 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati52).xyz,
            u_xlat27.xyz);\n        u_xlat16_2 = u_xlat16_2 * _AdditionalLightsAttenuationDynamicIndex(u_xlati52).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati52).w;\n        u_xlat16_2
            = clamp(u_xlat16_2, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n       
            u_xlat54 = u_xlat16_2 * u_xlat54;\n        u_xlat16_12.xyz = vec3(u_xlat16_4)
            * _AdditionalLightsColorDynamicIndex(u_xlati52).xyz;\n        u_xlat52
            = dot(u_xlat0.xyz, u_xlat27.xyz);\n        u_xlat16_2 = u_xlat52 * 0.5
            + (-u_xlat16_23);\n        u_xlat16_6 = u_xlat52;\n        u_xlat16_6
            = clamp(u_xlat16_6, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 + 0.5;\n       
            u_xlat16_2 = u_xlat16_40 * u_xlat16_2;\n        u_xlat16_2 = clamp(u_xlat16_2,
            0.0, 1.0);\n        u_xlat16_58 = u_xlat16_2 * -2.0 + 3.0;\n        u_xlat16_2
            = u_xlat16_2 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_58;\n       
            u_xlat16_2 = u_xlat54 * u_xlat16_2;\n        u_xlat16_13.xyz = u_xlat16_12.xyz
            * vec3(u_xlat16_2);\n        u_xlat16_15.xyz = vec3(u_xlat16_2) * _HColor.xyz;\n       
            u_xlat16_16.xyz = u_xlat16_5.xyz * u_xlat16_12.xyz;\n        u_xlat16_11.xyz
            = u_xlat16_16.xyz * u_xlat16_15.xyz + u_xlat16_11.xyz;\n        u_xlat16_15.xyz
            = u_xlat3.xyz * u_xlat10.xxx + u_xlat16_19.xyz;\n        u_xlat16_2 =
            dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat52 = max(u_xlat16_2,
            0.00100000005);\n        u_xlat16_2 = inversesqrt(u_xlat52);\n       
            u_xlat16_15.xyz = vec3(u_xlat16_2) * u_xlat16_15.xyz;\n        u_xlat52
            = dot(u_xlat0.xyz, u_xlat16_15.xyz);\n        u_xlat52 = clamp(u_xlat52,
            0.0, 1.0);\n        u_xlat16_2 = u_xlat52 * u_xlat16_57 + (-u_xlat52);\n       
            u_xlat52 = u_xlat16_2 * u_xlat52 + 1.0;\n        u_xlat52 = u_xlat52
            * u_xlat52 + 9.99999975e-05;\n        u_xlat52 = u_xlat18 / u_xlat52;\n       
            u_xlat16_2 = u_xlat52 * 0.157079637;\n        u_xlat52 = max(u_xlat16_2,
            9.99999975e-05);\n        u_xlat52 = sqrt(u_xlat52);\n        u_xlat16_2
            = u_xlat1.x * u_xlat52;\n        u_xlat16_2 = max(u_xlat16_2, 0.0);\n       
            u_xlat16_2 = u_xlat54 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_6
            * u_xlat16_2;\n        u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_2);\n       
            u_xlat16_12.xyz = u_xlat16_12.xyz * _SpecularColor.xyz + u_xlat16_7.xyz;\n       
            u_xlat16_13.xyz = vec3(u_xlat16_56) * u_xlat16_13.xyz;\n        u_xlat16_7.xyz
            = u_xlat16_13.xyz * _RimColor.xyz + u_xlat16_12.xyz;\n    }\n    SV_Target0.xyz
            = u_xlat16_7.xyz + u_xlat16_11.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 22
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD6;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nint u_xlati3;\nbool
            u_xlatb3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nvec3 u_xlat9;\nbool
            u_xlatb9;\nfloat u_xlat11;\nfloat u_xlat15;\nfloat u_xlat18;\nint u_xlati18;\nint
            u_xlati19;\nmediump float u_xlat16_20;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat3.x
            = float(u_xlati_loop_1);\n        u_xlatb9 = u_xlat3.x<2.0;\n       
            u_xlat16_4.xy = (bool(u_xlatb9)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat15 = u_xlat3.x + -2.0;\n        u_xlat3.x = (u_xlatb9) ? u_xlat3.x
            : u_xlat15;\n        u_xlatb3 = u_xlat3.x<1.0;\n        u_xlat16_20 =
            (u_xlatb3) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n       
            u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www
            + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n        u_xlat5 = max(u_xlat5, 6.10351563e-05);\n       
            u_xlat11 = inversesqrt(u_xlat5);\n        u_xlat9.xyz = u_xlat9.xyz *
            vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5;\n        u_xlat5
            = u_xlat5 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;\n       
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n        u_xlat5 = u_xlat5 * u_xlat11;\n       
            u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n       
            u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z
            + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat5 = u_xlat16_20 * u_xlat5;\n        u_xlat16_4.xyz = vec3(u_xlat5)
            * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n    u_xlat3.xyz = (-u_xlat0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat18);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat16_2.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 0.0);\n    vs_TEXCOORD2.w
            = (-u_xlat18) + 1.0;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec3 u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec2 u_xlat3;\nmediump vec4
            u_xlat16_3;\nlowp float u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_15;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nbool
            u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nvoid
            main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_8.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx + _MainLightPosition.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat16_1.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n   
            u_xlat0.x = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat21 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat10_3 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_8.x = min(u_xlat3.x, 1.0);\n    u_xlat16_15 = u_xlat3.x * 0.280000001;\n   
            u_xlat3.x = (-u_xlat16_15) * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x =
            u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat21 * u_xlat16_1.x
            + (-u_xlat21);\n    u_xlat21 = u_xlat16_8.x * u_xlat21 + 1.0;\n    u_xlat21
            = u_xlat21 * u_xlat21 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x
            * 0.318309873;\n    u_xlat21 = u_xlat10 / u_xlat21;\n    u_xlat16_1.x
            = u_xlat21 * 0.157079637;\n    u_xlat21 = max(u_xlat16_1.x, 9.99999975e-05);\n   
            u_xlat21 = sqrt(u_xlat21);\n    u_xlat16_1.x = u_xlat3.x * u_xlat21;\n   
            u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat16_1.x = u_xlat16_1.x
            * unity_LightData.z;\n    u_xlat21 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_8.x = u_xlat21;\n    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0,
            1.0);\n    u_xlat16_15 = u_xlat21 * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_8.x
            * u_xlat16_1.x;\n    u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n   
            u_xlat10_21 = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n   
            u_xlat16_8.x = u_xlat10_21 + -1.0;\n    u_xlat16_22 = min(u_xlat10_21,
            1.0);\n    u_xlat16_8.x = _AmbientOcclusionParam.w * u_xlat16_8.x + 1.0;\n   
            u_xlat16_4.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_1.xxx * u_xlat16_4.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _SpecularColor.xyz;\n    u_xlat16_1.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8.x = (-u_xlat16_1.x) + u_xlat16_15;\n    u_xlat16_15 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_15;\n   
            u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x
            * u_xlat16_8.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x
            * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n   
            u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat16_6.xyz
            = u_xlat16_4.xyz * u_xlat16_1.xxx;\n    u_xlat16_4.xyz = _HColor.xyz
            * u_xlat16_4.xyz + (-_SColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx
            * u_xlat16_4.xyz + _SColor.xyz;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_4.x = vs_TEXCOORD2.w
            + (-_RimMin);\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_4.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat16_23)
            * u_xlat16_6.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz
            + u_xlat16_5.xyz;\n    u_xlatb21 = 0.0<_SingleIndirectColor;\n    u_xlat0
            = (bool(u_xlatb21)) ? u_xlat16_2.xyzz : u_xlat0.xyzz;\n    u_xlat16_2.x
            = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat0.yzwx * u_xlat0.xywz;\n   
            u_xlat16_5.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_5.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = log2(abs(u_xlat16_2.xyz));\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997,
            -0.0549999997);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(12.9200001,
            12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x
            = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_5.x;\n    u_xlat16_2.y = (u_xlatb0.y)
            ? u_xlat16_6.y : u_xlat16_5.y;\n    u_xlat16_2.z = (u_xlatb0.z) ? u_xlat16_6.z
            : u_xlat16_5.z;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_1.xyz = u_xlat16_5.xyz
            * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 15
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9, 1.17549435e-38);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;\n   
            vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w
            = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x
            = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x,
            0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz
            = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ScaledScreenParams;\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AmbientOcclusionParam;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform
            \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _ScreenSpaceOcclusionTexture;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nint u_xlati1;\nmediump
            float u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec3
            u_xlat10_3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec4
            u_xlat9;\nbvec3 u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump
            vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump
            vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump
            vec3 u_xlat16_21;\nmediump float u_xlat16_23;\nfloat u_xlat26;\nvec3
            u_xlat30;\nint u_xlati35;\nmediump float u_xlat16_40;\nfloat u_xlat51;\nlowp
            float u_xlat10_51;\nbool u_xlatb51;\nfloat u_xlat52;\nint u_xlati52;\nbool
            u_xlatb52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump
            float u_xlat16_58;\nfloat u_xlat60;\n#define UNITY_DYNAMIC_INDEX_ES2
            0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int i){\n#if
            UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz,
            1.0/gl_FragCoord.w);\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat51 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat51 = max(u_xlat16_2, 0.00100000005);\n    u_xlat16_2
            = inversesqrt(u_xlat51);\n    u_xlat16_19.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n   
            u_xlat3.xy = hlslcc_FragCoord.xy / _ScaledScreenParams.xy;\n    u_xlat10_51
            = texture2D(_ScreenSpaceOcclusionTexture, u_xlat3.xy).x;\n    u_xlat16_4
            = u_xlat10_51 + -1.0;\n    u_xlat16_4 = _AmbientOcclusionParam.w * u_xlat16_4
            + 1.0;\n    u_xlat16_21.xyz = vec3(u_xlat16_4) * _MainLightColor.xyz;\n   
            u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat52 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_56 = u_xlat52 * 0.5 + 0.5;\n    u_xlat16_6 = u_xlat52;\n   
            u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_23 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_40 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_40 = (-u_xlat16_23) + u_xlat16_40;\n    u_xlat16_56 = u_xlat16_56
            + (-u_xlat16_23);\n    u_xlat16_40 = float(1.0) / u_xlat16_40;\n    u_xlat16_56
            = u_xlat16_56 * u_xlat16_40;\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0,
            1.0);\n    u_xlat16_57 = u_xlat16_56 * -2.0 + 3.0;\n    u_xlat16_56 =
            u_xlat16_56 * u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n   
            u_xlat16_56 = u_xlat16_56 * unity_LightData.z;\n    u_xlat16_7.xyz =
            u_xlat16_21.xyz * vec3(u_xlat16_56);\n    u_xlat16_8.xyz = _HColor.xyz
            * u_xlat16_21.xyz + (-_SColor.xyz);\n    u_xlat16_8.xyz = vec3(u_xlat16_56)
            * u_xlat16_8.xyz + _SColor.xyz;\n    u_xlat16_56 = min(u_xlat10_51, 1.0);\n   
            u_xlatb51 = 0.0<_SingleIndirectColor;\n    u_xlat3 = (bool(u_xlatb51))
            ? u_xlat16_19.xyzz : u_xlat0.xyzz;\n    u_xlat9.xyz = u_xlat3.xyw;\n   
            u_xlat9.w = 1.0;\n    u_xlat16_10.x = dot(unity_SHAr, u_xlat9);\n   
            u_xlat16_10.y = dot(unity_SHAg, u_xlat9);\n    u_xlat16_10.z = dot(unity_SHAb,
            u_xlat9);\n    u_xlat16_3 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_11.x
            = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_3);\n   
            u_xlat16_11.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_57 = u_xlat9.y
            * u_xlat9.y;\n    u_xlat16_57 = u_xlat9.x * u_xlat9.x + (-u_xlat16_57);\n   
            u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_57) + u_xlat16_11.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;\n    u_xlat16_11.xyz
            = u_xlat16_10.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_12.xyz
            = log2(abs(u_xlat16_10.xyz));\n    u_xlat16_12.xyz = u_xlat16_12.xyz
            * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_12.xyz =
            exp2(u_xlat16_12.xyz);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlatb9.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_10.xyzx).xyz;\n    u_xlat16_10.x = (u_xlatb9.x) ? u_xlat16_11.x
            : u_xlat16_12.x;\n    u_xlat16_10.y = (u_xlatb9.y) ? u_xlat16_11.y :
            u_xlat16_12.y;\n    u_xlat16_10.z = (u_xlatb9.z) ? u_xlat16_11.z : u_xlat16_12.z;\n   
            u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_10.xyz
            = vec3(u_xlat16_56) * u_xlat16_10.xyz;\n    u_xlat16_10.xyz = u_xlat16_5.xyz
            * u_xlat16_10.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_8.xyz = u_xlat16_5.xyz
            * u_xlat16_8.xyz + u_xlat16_10.xyz;\n    u_xlat16_56 = (-_RimMin) + _RimMax;\n   
            u_xlat16_57 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_56 = float(1.0)
            / u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n    u_xlat16_56
            = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_57 = u_xlat16_56 * -2.0
            + 3.0;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_56;\n    u_xlat16_56
            = u_xlat16_56 * u_xlat16_57;\n    u_xlat16_7.xyz = vec3(u_xlat16_56)
            * u_xlat16_7.xyz;\n    u_xlat10_51 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_10.xyz = u_xlat1.xyz * vec3(u_xlat16_2) + _MainLightPosition.xyz;\n   
            u_xlat16_2 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlat1.x =
            max(u_xlat16_2, 0.00100000005);\n    u_xlat16_2 = inversesqrt(u_xlat1.x);\n   
            u_xlat16_10.xyz = vec3(u_xlat16_2) * u_xlat16_10.xyz;\n    u_xlat1.x
            = dot(u_xlat0.xyz, u_xlat16_10.xyz);\n    u_xlat1.x = clamp(u_xlat1.x,
            0.0, 1.0);\n    u_xlat16_2 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2 = u_xlat10_51 * u_xlat16_2;\n    u_xlat51 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_57 = min(u_xlat51, 1.0);\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n   
            u_xlat16_58 = u_xlat1.x * u_xlat16_57 + (-u_xlat1.x);\n    u_xlat1.x
            = u_xlat16_58 * u_xlat1.x + 1.0;\n    u_xlat18 = u_xlat16_57 * 0.318309873;\n   
            u_xlat1.x = u_xlat1.x * u_xlat1.x + 9.99999975e-05;\n    u_xlat1.x =
            u_xlat18 / u_xlat1.x;\n    u_xlat16_58 = u_xlat1.x * 0.157079637;\n   
            u_xlat1.x = max(u_xlat16_58, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n   
            u_xlat16_58 = u_xlat51 * 0.280000001;\n    u_xlat51 = (-u_xlat16_58)
            * u_xlat16_2 + 1.0;\n    u_xlat16_2 = u_xlat51 * u_xlat1.x;\n    u_xlat16_2
            = max(u_xlat16_2, 0.0);\n    u_xlat16_2 = u_xlat16_2 * unity_LightData.z;\n   
            u_xlat16_2 = u_xlat16_6 * u_xlat16_2;\n    u_xlat16_21.xyz = u_xlat16_21.xyz
            * vec3(u_xlat16_2);\n    u_xlat16_21.xyz = u_xlat16_21.xyz * _SpecularColor.xyz;\n   
            u_xlat16_21.xyz = u_xlat16_7.xyz * _RimColor.xyz + u_xlat16_21.xyz;\n   
            u_xlat16_2 = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati1
            = int(u_xlat16_2);\n    u_xlat16_7.xyz = u_xlat16_21.xyz;\n    u_xlat16_10.xyz
            = u_xlat16_8.xyz;\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1
            ; u_xlati_loop_1++)\n    {\n        u_xlat52 = float(u_xlati_loop_1);\n       
            u_xlatb9.x = u_xlat52<2.0;\n        u_xlat16_11.xy = (u_xlatb9.x) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat26 = u_xlat52 + -2.0;\n       
            u_xlat52 = (u_xlatb9.x) ? u_xlat52 : u_xlat26;\n        u_xlatb52 = u_xlat52<1.0;\n       
            u_xlat16_2 = (u_xlatb52) ? u_xlat16_11.x : u_xlat16_11.y;\n        u_xlati52
            = int(u_xlat16_2);\n        u_xlat9.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati52).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati52).xyz;\n        u_xlat60
            = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat60 = max(u_xlat60, 6.10351563e-05);\n       
            u_xlat13 = inversesqrt(u_xlat60);\n        u_xlat30.xyz = u_xlat9.xyz
            * vec3(u_xlat13);\n        u_xlat14 = float(1.0) / u_xlat60;\n       
            u_xlat60 = u_xlat60 * _AdditionalLightsAttenuationDynamicIndex(u_xlati52).x
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati52).y;\n        u_xlat60
            = clamp(u_xlat60, 0.0, 1.0);\n        u_xlat60 = u_xlat60 * u_xlat14;\n       
            u_xlat16_2 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati52).xyz,
            u_xlat30.xyz);\n        u_xlat16_2 = u_xlat16_2 * _AdditionalLightsAttenuationDynamicIndex(u_xlati52).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati52).w;\n        u_xlat16_2
            = clamp(u_xlat16_2, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n       
            u_xlat60 = u_xlat16_2 * u_xlat60;\n        u_xlat16_11.xyz = vec3(u_xlat16_4)
            * _AdditionalLightsColorDynamicIndex(u_xlati52).xyz;\n        u_xlat52
            = dot(u_xlat0.xyz, u_xlat30.xyz);\n        u_xlat16_2 = u_xlat52 * 0.5
            + (-u_xlat16_23);\n        u_xlat16_6 = u_xlat52;\n        u_xlat16_6
            = clamp(u_xlat16_6, 0.0, 1.0);\n        u_xlat16_2 = u_xlat16_2 + 0.5;\n       
            u_xlat16_2 = u_xlat16_40 * u_xlat16_2;\n        u_xlat16_2 = clamp(u_xlat16_2,
            0.0, 1.0);\n        u_xlat16_58 = u_xlat16_2 * -2.0 + 3.0;\n        u_xlat16_2
            = u_xlat16_2 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_2 * u_xlat16_58;\n       
            u_xlat16_2 = u_xlat60 * u_xlat16_2;\n        u_xlat16_12.xyz = u_xlat16_11.xyz
            * vec3(u_xlat16_2);\n        u_xlat16_15.xyz = vec3(u_xlat16_2) * _HColor.xyz;\n       
            u_xlat16_16.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;\n        u_xlat16_10.xyz
            = u_xlat16_16.xyz * u_xlat16_15.xyz + u_xlat16_10.xyz;\n        u_xlat16_15.xyz
            = u_xlat9.xyz * vec3(u_xlat13) + u_xlat16_19.xyz;\n        u_xlat16_2
            = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat52 = max(u_xlat16_2,
            0.00100000005);\n        u_xlat16_2 = inversesqrt(u_xlat52);\n       
            u_xlat16_15.xyz = vec3(u_xlat16_2) * u_xlat16_15.xyz;\n        u_xlat52
            = dot(u_xlat0.xyz, u_xlat16_15.xyz);\n        u_xlat52 = clamp(u_xlat52,
            0.0, 1.0);\n        u_xlat16_2 = u_xlat52 * u_xlat16_57 + (-u_xlat52);\n       
            u_xlat52 = u_xlat16_2 * u_xlat52 + 1.0;\n        u_xlat52 = u_xlat52
            * u_xlat52 + 9.99999975e-05;\n        u_xlat52 = u_xlat18 / u_xlat52;\n       
            u_xlat16_2 = u_xlat52 * 0.157079637;\n        u_xlat52 = max(u_xlat16_2,
            9.99999975e-05);\n        u_xlat52 = sqrt(u_xlat52);\n        u_xlat16_2
            = u_xlat51 * u_xlat52;\n        u_xlat16_2 = max(u_xlat16_2, 0.0);\n       
            u_xlat16_2 = u_xlat60 * u_xlat16_2;\n        u_xlat16_2 = u_xlat16_6
            * u_xlat16_2;\n        u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_2);\n       
            u_xlat16_11.xyz = u_xlat16_11.xyz * _SpecularColor.xyz + u_xlat16_7.xyz;\n       
            u_xlat16_12.xyz = vec3(u_xlat16_56) * u_xlat16_12.xyz;\n        u_xlat16_7.xyz
            = u_xlat16_12.xyz * _RimColor.xyz + u_xlat16_11.xyz;\n    }\n    SV_Target0.xyz
            = u_xlat16_7.xyz + u_xlat16_10.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 23
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _ADDITIONAL_LIGHTS
          - _RECEIVE_SHADOWS_OFF
          - _SCREEN_SPACE_OCCLUSION
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - _
        - _RECEIVE_SHADOWS_OFF
        - _MAIN_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS_CASCADE
        - _ADDITIONAL_LIGHTS_VERTEX
        - _ADDITIONAL_LIGHTS
        - _ADDITIONAL_LIGHT_SHADOWS
        - _SHADOWS_SOFT
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_SHADOWMASK
        - _SCREEN_SPACE_OCCLUSION
        - DIRLIGHTMAP_COMBINED
        - LIGHTMAP_ON
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - INSTANCING_ON
        - TCP2_MOBILE
        - TCP2_RAMPTEXT
        - TCP2_RAMP_CRISP
        - TCP2_RAMP_BANDS
        - TCP2_RAMP_BANDS_CRISP
        - TCP2_SHADOW_LIGHT_COLOR
        - TCP2_SHADOW_TEXTURE
        - TCP2_SPECULAR
        - TCP2_SPECULAR_STYLIZED
        - TCP2_SPECULAR_CRISP
        - TCP2_RIM_LIGHTING
        - TCP2_RIM_LIGHTING_LIGHTMASK
        - TCP2_REFLECTIONS
        - TCP2_REFLECTIONS_FRESNEL
        - TCP2_MATCAP
        - TCP2_MATCAP_MASK
        - TCP2_OCCLUSION
        - _NORMALMAP
        - _ALPHATEST_ON
        - _EMISSION
        - _ALPHAPREMULTIPLY_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS_CASCADE
        - Keywords:
          - _
          - _ADDITIONAL_LIGHTS_VERTEX
          - _ADDITIONAL_LIGHTS
        - Keywords:
          - _
          - _ADDITIONAL_LIGHT_SHADOWS
        - Keywords:
          - _
          - _SHADOWS_SOFT
        - Keywords:
          - _
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - _
          - SHADOWS_SHADOWMASK
        - Keywords:
          - _
          - _SCREEN_SPACE_OCCLUSION
        - Keywords:
          - _
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - TCP2_MOBILE
        - Keywords:
          - _
          - TCP2_RAMPTEXT
          - TCP2_RAMP_CRISP
          - TCP2_RAMP_BANDS
          - TCP2_RAMP_BANDS_CRISP
        - Keywords:
          - _
          - TCP2_SHADOW_LIGHT_COLOR
        - Keywords:
          - _
          - TCP2_SHADOW_TEXTURE
        - Keywords:
          - _
          - TCP2_SPECULAR
        - Keywords:
          - _
          - TCP2_SPECULAR_STYLIZED
          - TCP2_SPECULAR_CRISP
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - Keywords:
          - _
          - TCP2_REFLECTIONS
        - Keywords:
          - _
          - TCP2_REFLECTIONS_FRESNEL
        - Keywords:
          - _
          - TCP2_MATCAP
        - Keywords:
          - _
          - TCP2_MATCAP_MASK
        - Keywords:
          - _
          - TCP2_OCCLUSION
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _EMISSION
        - Keywords:
          - _
          - _ALPHAPREMULTIPLY_ON
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: QUEUE
          Value: Geometry
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _ShadowBias;\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec3 _LightDirection;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat9 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat9 =
            (-u_xlat9) + 1.0;\n    u_xlat9 = u_xlat9 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 24
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _ShadowBias;\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec3 _LightPosition;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1.xyz = (-u_xlat0.xyz) + _LightPosition.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * _ShadowBias.xxx
            + u_xlat0.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat16_3 = inversesqrt(u_xlat12);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(u_xlat16_3);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);\n   
            u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat12 = (-u_xlat12) + 1.0;\n   
            u_xlat12 = u_xlat12 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat2.xyz *
            vec3(u_xlat12) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z
            = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 25
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - _CASTING_PUNCTUAL_LIGHT_SHADOW
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _ShadowBias;\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec3 _LightDirection;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = max(u_xlat9,
            1.17549435e-38);\n    u_xlat16_2 = inversesqrt(u_xlat9);\n    u_xlat1.xyz
            = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat9 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat9 =
            (-u_xlat9) + 1.0;\n    u_xlat9 = u_xlat9 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 26
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - _
        - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - __
        - INSTANCING_ON
        - _ALPHATEST_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - _ALPHATEST_ON
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Geometry
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      SerializedPassCount: 5
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 29
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 62
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4
            u_xlat2;\nbvec2 u_xlatb2;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nmediump
            float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_1.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlatb2.xy
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity,
            _SingleIndirectColor, _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb2.x)
            ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat2.xzw = log2(u_xlat16_3.xyz);\n    u_xlat2.xzw
            = u_xlat2.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xzw
            = exp2(u_xlat2.xzw);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat2.xzw = max(u_xlat2.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat10_4.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat2.xzw * u_xlat16_3.xyz;\n   
            u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xzw = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xzw);\n   
            u_xlat16_24 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_26 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_26);\n   
            u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_26
            = (-u_xlat16_26) + u_xlat16_6.x;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n   
            u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_24 = clamp(u_xlat16_24,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24
            = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_24) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_3.xyz;\n    SV_Target0.xyz = (u_xlatb2.y)
            ? u_xlat16_5.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 33
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float
            u_xlat10_4;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_4 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_6.x
            = (-u_xlat10_4) + 1.0;\n    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x +
            u_xlat10_4;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_6.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 37
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 45
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3
            u_xlat6;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_14;\nfloat
            u_xlat18;\nfloat u_xlat19;\nlowp float u_xlat10_19;\nmediump float u_xlat16_20;\nvoid
            main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat0.x
            = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_8.x = (-u_xlat16_8.x) + u_xlat16_14;\n   
            u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat19 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat0.x = u_xlat0.x + (-u_xlat19);\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w
            * u_xlat0.x + u_xlat19;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n   
            u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture,
            u_xlat3.xy).x;\n    u_xlat16_8.x = (-u_xlat10_19) + 1.0;\n    u_xlat16_8.x
            = u_xlat0.x * u_xlat16_8.x + u_xlat10_19;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz
            + _SColor.xyz;\n    u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n    u_xlat0.x = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat0.x);\n    u_xlat16_5.xyz = u_xlat6.xyz
            * vec3(u_xlat16_20);\n    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor,
            _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz
            : u_xlat1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr,
            u_xlat1);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_5.z
            = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat0.xzw = log2(u_xlat16_5.xyz);\n    u_xlat0.xzw
            = u_xlat0.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xzw
            = exp2(u_xlat0.xzw);\n    u_xlat0.xzw = u_xlat0.xzw * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xzw = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * u_xlat0.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity))
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = (u_xlatb0.y) ? u_xlat16_4.xyz
            : u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 41
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4
            u_xlat2;\nbvec2 u_xlatb2;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nmediump
            float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_1.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlatb2.xy
            = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity,
            _SingleIndirectColor, _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb2.x)
            ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat2.xzw = log2(u_xlat16_3.xyz);\n    u_xlat2.xzw
            = u_xlat2.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xzw
            = exp2(u_xlat2.xzw);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat2.xzw = max(u_xlat2.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat10_4.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat2.xzw * u_xlat16_3.xyz;\n   
            u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xzw = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xzw);\n   
            u_xlat16_24 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_26 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_26);\n   
            u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_26
            = (-u_xlat16_26) + u_xlat16_6.x;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n   
            u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_24 = clamp(u_xlat16_24,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24
            = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_24) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_3.xyz;\n    SV_Target0.xyz = (u_xlatb2.y)
            ? u_xlat16_5.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 49
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float
            u_xlat10_4;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_4 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_6.x
            = (-u_xlat10_4) + 1.0;\n    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x +
            u_xlat10_4;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_6.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 53
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3
            u_xlat6;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_14;\nfloat
            u_xlat18;\nfloat u_xlat19;\nlowp float u_xlat10_19;\nmediump float u_xlat16_20;\nvoid
            main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat0.x
            = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_8.x = (-u_xlat16_8.x) + u_xlat16_14;\n   
            u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat19 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat0.x = u_xlat0.x + (-u_xlat19);\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w
            * u_xlat0.x + u_xlat19;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z
            + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n   
            u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture,
            u_xlat3.xy).x;\n    u_xlat16_8.x = (-u_xlat10_19) + 1.0;\n    u_xlat16_8.x
            = u_xlat0.x * u_xlat16_8.x + u_xlat10_19;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz
            + _SColor.xyz;\n    u_xlat10_3.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n    u_xlat0.x = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat0.x);\n    u_xlat16_5.xyz = u_xlat6.xyz
            * vec3(u_xlat16_20);\n    u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor,
            _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz
            : u_xlat1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr,
            u_xlat1);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_5.z
            = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat0.xzw = log2(u_xlat16_5.xyz);\n    u_xlat0.xzw
            = u_xlat0.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xzw
            = exp2(u_xlat0.xzw);\n    u_xlat0.xzw = u_xlat0.xzw * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xzw = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * u_xlat0.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity))
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = (u_xlatb0.y) ? u_xlat16_4.xyz
            : u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 57
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec2 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    u_xlat0.xyz =
            (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17
            = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n   
            u_xlatb0.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat1.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat1.w
            = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xzw
            = log2(u_xlat16_4.xyz);\n    u_xlat0.xzw = u_xlat0.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xzw = exp2(u_xlat0.xzw);\n   
            u_xlat0.xzw = u_xlat0.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xzw
            = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * u_xlat0.xzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = (u_xlatb0.y) ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 63
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 58
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nmediump float u_xlat16_16;\nfloat u_xlat21;\nmediump float
            u_xlat16_23;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n   
            u_xlat16_23 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat1.x + (-_RimMin);\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_26;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_23) * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n   
            if(u_xlatb1){\n        u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_23 = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 59
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3
            u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 30
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp float u_xlat10_1;\nbvec2 u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_29 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_31
            = u_xlat1.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_5.x) + u_xlat16_14;\n   
            u_xlat16_29 = u_xlat16_29 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_29
            = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_29 * -2.0
            + 3.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_29)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat7.xyz = (u_xlatb1.x) ? u_xlat16_2.xyz : u_xlat0.xyz;\n    u_xlat7.w
            = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat7);\n    u_xlat16_8.y
            = dot(unity_SHAg, u_xlat7);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat7);\n   
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xzw
            = log2(u_xlat16_8.xyz);\n    u_xlat1.xzw = u_xlat1.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat1.xzw = exp2(u_xlat1.xzw);\n   
            u_xlat1.xzw = u_xlat1.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xzw
            = max(u_xlat1.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * u_xlat1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz
            = (u_xlatb1.y) ? u_xlat16_4.xyz : u_xlat16_6.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x =
            (-u_xlat1.x) + 1.0;\n    u_xlat16_29 = (-_RimMin) + _RimMax;\n    u_xlat16_32
            = u_xlat1.x + (-_RimMin);\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n   
            u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_32 = u_xlat16_29 * -2.0 + 3.0;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;\n    u_xlatb1.x
            = _SpecularMapType>=5.0;\n    if(u_xlatb1.x){\n        u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_29 = u_xlat10_1;\n    } else {\n       
            u_xlatb1.x = _SpecularMapType>=4.0;\n        if(u_xlatb1.x){\n           
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_29 = u_xlat10_1;\n        } else {\n            u_xlatb1.x =
            _SpecularMapType>=3.0;\n            if(u_xlatb1.x){\n               
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_29 = u_xlat10_1;\n            } else {\n                u_xlatb1.x
            = _SpecularMapType>=2.0;\n                if(u_xlatb1.x){\n                   
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_29 = u_xlat10_1;\n                } else {\n                   
            u_xlatb1.x = _SpecularMapType>=1.0;\n                    u_xlat16_29
            = (u_xlatb1.x) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat27) + u_xlat16_2.xyz;\n    u_xlat16_32 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat27 = max(u_xlat16_32, 0.00100000005);\n   
            u_xlat16_32 = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_32);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat9 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9,
            1.0);\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20
            = u_xlat0.x * u_xlat16_11 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20
            * u_xlat0.x + 1.0;\n    u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 /
            u_xlat0.x;\n    u_xlat16_11 = u_xlat0.x * 0.157079637;\n    u_xlat0.x
            = max(u_xlat16_11, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_11 = u_xlat9 * 0.280000001;\n    u_xlat9 = (-u_xlat16_11) *
            u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_31 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 31
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 34
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nmediump float u_xlat16_16;\nfloat u_xlat21;\nmediump float
            u_xlat16_23;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n   
            u_xlat16_23 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat1.x + (-_RimMin);\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_26;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_23) * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n   
            if(u_xlatb1){\n        u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_23 = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 35
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 42
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nmediump float u_xlat16_16;\nfloat u_xlat21;\nmediump float
            u_xlat16_23;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n   
            u_xlat16_23 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat1.x + (-_RimMin);\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_26;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_23) * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n   
            if(u_xlatb1){\n        u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_23 = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 43
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 60
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 32
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 36
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3
            u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 38
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp float u_xlat10_1;\nbvec2 u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_29 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_31
            = u_xlat1.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_5.x) + u_xlat16_14;\n   
            u_xlat16_29 = u_xlat16_29 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_29
            = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_29 * -2.0
            + 3.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_29)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat7.xyz = (u_xlatb1.x) ? u_xlat16_2.xyz : u_xlat0.xyz;\n    u_xlat7.w
            = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat7);\n    u_xlat16_8.y
            = dot(unity_SHAg, u_xlat7);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat7);\n   
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xzw
            = log2(u_xlat16_8.xyz);\n    u_xlat1.xzw = u_xlat1.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat1.xzw = exp2(u_xlat1.xzw);\n   
            u_xlat1.xzw = u_xlat1.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xzw
            = max(u_xlat1.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * u_xlat1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz
            = (u_xlatb1.y) ? u_xlat16_4.xyz : u_xlat16_6.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x =
            (-u_xlat1.x) + 1.0;\n    u_xlat16_29 = (-_RimMin) + _RimMax;\n    u_xlat16_32
            = u_xlat1.x + (-_RimMin);\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n   
            u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_32 = u_xlat16_29 * -2.0 + 3.0;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;\n    u_xlatb1.x
            = _SpecularMapType>=5.0;\n    if(u_xlatb1.x){\n        u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_29 = u_xlat10_1;\n    } else {\n       
            u_xlatb1.x = _SpecularMapType>=4.0;\n        if(u_xlatb1.x){\n           
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_29 = u_xlat10_1;\n        } else {\n            u_xlatb1.x =
            _SpecularMapType>=3.0;\n            if(u_xlatb1.x){\n               
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_29 = u_xlat10_1;\n            } else {\n                u_xlatb1.x
            = _SpecularMapType>=2.0;\n                if(u_xlatb1.x){\n                   
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_29 = u_xlat10_1;\n                } else {\n                   
            u_xlatb1.x = _SpecularMapType>=1.0;\n                    u_xlat16_29
            = (u_xlatb1.x) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat27) + u_xlat16_2.xyz;\n    u_xlat16_32 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat27 = max(u_xlat16_32, 0.00100000005);\n   
            u_xlat16_32 = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_32);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat9 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9,
            1.0);\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20
            = u_xlat0.x * u_xlat16_11 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20
            * u_xlat0.x + 1.0;\n    u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 /
            u_xlat0.x;\n    u_xlat16_11 = u_xlat0.x * 0.157079637;\n    u_xlat0.x
            = max(u_xlat16_11, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_11 = u_xlat9 * 0.280000001;\n    u_xlat9 = (-u_xlat16_11) *
            u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_31 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 39
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 44
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3
            u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 46
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp float u_xlat10_1;\nbvec2 u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_29 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_31
            = u_xlat1.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_5.x) + u_xlat16_14;\n   
            u_xlat16_29 = u_xlat16_29 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_29
            = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_29 * -2.0
            + 3.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_29)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat7.xyz = (u_xlatb1.x) ? u_xlat16_2.xyz : u_xlat0.xyz;\n    u_xlat7.w
            = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat7);\n    u_xlat16_8.y
            = dot(unity_SHAg, u_xlat7);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat7);\n   
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xzw
            = log2(u_xlat16_8.xyz);\n    u_xlat1.xzw = u_xlat1.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat1.xzw = exp2(u_xlat1.xzw);\n   
            u_xlat1.xzw = u_xlat1.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xzw
            = max(u_xlat1.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * u_xlat1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz
            = (u_xlatb1.y) ? u_xlat16_4.xyz : u_xlat16_6.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x =
            (-u_xlat1.x) + 1.0;\n    u_xlat16_29 = (-_RimMin) + _RimMax;\n    u_xlat16_32
            = u_xlat1.x + (-_RimMin);\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n   
            u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_32 = u_xlat16_29 * -2.0 + 3.0;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;\n    u_xlatb1.x
            = _SpecularMapType>=5.0;\n    if(u_xlatb1.x){\n        u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_29 = u_xlat10_1;\n    } else {\n       
            u_xlatb1.x = _SpecularMapType>=4.0;\n        if(u_xlatb1.x){\n           
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_29 = u_xlat10_1;\n        } else {\n            u_xlatb1.x =
            _SpecularMapType>=3.0;\n            if(u_xlatb1.x){\n               
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_29 = u_xlat10_1;\n            } else {\n                u_xlatb1.x
            = _SpecularMapType>=2.0;\n                if(u_xlatb1.x){\n                   
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_29 = u_xlat10_1;\n                } else {\n                   
            u_xlatb1.x = _SpecularMapType>=1.0;\n                    u_xlat16_29
            = (u_xlatb1.x) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat27) + u_xlat16_2.xyz;\n    u_xlat16_32 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat27 = max(u_xlat16_32, 0.00100000005);\n   
            u_xlat16_32 = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_32);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat9 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9,
            1.0);\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20
            = u_xlat0.x * u_xlat16_11 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20
            * u_xlat0.x + 1.0;\n    u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 /
            u_xlat0.x;\n    u_xlat16_11 = u_xlat0.x * 0.157079637;\n    u_xlat0.x
            = max(u_xlat16_11, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_11 = u_xlat9 * 0.280000001;\n    u_xlat9 = (-u_xlat16_11) *
            u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_31 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 47
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 50
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat
            u_xlat7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat
            u_xlat14;\nmediump float u_xlat16_16;\nfloat u_xlat21;\nmediump float
            u_xlat16_23;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n   
            u_xlat16_23 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = u_xlat1.x + (-_RimMin);\n   
            u_xlat16_23 = float(1.0) / u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_26;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n   
            u_xlat16_26 = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23 = u_xlat16_23
            * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_23) * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n   
            if(u_xlatb1){\n        u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_23 = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 51
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 61
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3
            u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 65
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp float u_xlat10_1;\nbvec2 u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_29 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_31
            = u_xlat1.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_5.x) + u_xlat16_14;\n   
            u_xlat16_29 = u_xlat16_29 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_29
            = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_29 * -2.0
            + 3.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_29)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat7.xyz = (u_xlatb1.x) ? u_xlat16_2.xyz : u_xlat0.xyz;\n    u_xlat7.w
            = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat7);\n    u_xlat16_8.y
            = dot(unity_SHAg, u_xlat7);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat7);\n   
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xzw
            = log2(u_xlat16_8.xyz);\n    u_xlat1.xzw = u_xlat1.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat1.xzw = exp2(u_xlat1.xzw);\n   
            u_xlat1.xzw = u_xlat1.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xzw
            = max(u_xlat1.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * u_xlat1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz
            = (u_xlatb1.y) ? u_xlat16_4.xyz : u_xlat16_6.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x =
            (-u_xlat1.x) + 1.0;\n    u_xlat16_29 = (-_RimMin) + _RimMax;\n    u_xlat16_32
            = u_xlat1.x + (-_RimMin);\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n   
            u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_32 = u_xlat16_29 * -2.0 + 3.0;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;\n    u_xlatb1.x
            = _SpecularMapType>=5.0;\n    if(u_xlatb1.x){\n        u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_29 = u_xlat10_1;\n    } else {\n       
            u_xlatb1.x = _SpecularMapType>=4.0;\n        if(u_xlatb1.x){\n           
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_29 = u_xlat10_1;\n        } else {\n            u_xlatb1.x =
            _SpecularMapType>=3.0;\n            if(u_xlatb1.x){\n               
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_29 = u_xlat10_1;\n            } else {\n                u_xlatb1.x
            = _SpecularMapType>=2.0;\n                if(u_xlatb1.x){\n                   
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_29 = u_xlat10_1;\n                } else {\n                   
            u_xlatb1.x = _SpecularMapType>=1.0;\n                    u_xlat16_29
            = (u_xlatb1.x) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat27) + u_xlat16_2.xyz;\n    u_xlat16_32 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat27 = max(u_xlat16_32, 0.00100000005);\n   
            u_xlat16_32 = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_32);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat9 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9,
            1.0);\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20
            = u_xlat0.x * u_xlat16_11 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20
            * u_xlat0.x + 1.0;\n    u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 /
            u_xlat0.x;\n    u_xlat16_11 = u_xlat0.x * 0.157079637;\n    u_xlat0.x
            = max(u_xlat16_11, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_11 = u_xlat9 * 0.280000001;\n    u_xlat9 = (-u_xlat16_11) *
            u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_31 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 66
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 40
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 48
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 52
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3
            u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 54
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp float u_xlat10_1;\nbvec2 u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nvec4 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_29 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_31
            = u_xlat1.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_5.x) + u_xlat16_14;\n   
            u_xlat16_29 = u_xlat16_29 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_29
            = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_29 * -2.0
            + 3.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_29)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz
            + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz
            + _SColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;\n   
            u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor,
            _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n   
            u_xlat7.xyz = (u_xlatb1.x) ? u_xlat16_2.xyz : u_xlat0.xyz;\n    u_xlat7.w
            = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat7);\n    u_xlat16_8.y
            = dot(unity_SHAg, u_xlat7);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat7);\n   
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xzw
            = log2(u_xlat16_8.xyz);\n    u_xlat1.xzw = u_xlat1.xzw * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat1.xzw = exp2(u_xlat1.xzw);\n   
            u_xlat1.xzw = u_xlat1.xzw * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xzw
            = max(u_xlat1.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = u_xlat16_4.xyz
            * u_xlat1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity,
            _IndirectIntensity, _IndirectIntensity)) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz
            = (u_xlatb1.y) ? u_xlat16_4.xyz : u_xlat16_6.xyz;\n    u_xlat1.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat1.x =
            (-u_xlat1.x) + 1.0;\n    u_xlat16_29 = (-_RimMin) + _RimMax;\n    u_xlat16_32
            = u_xlat1.x + (-_RimMin);\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n   
            u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_32 = u_xlat16_29 * -2.0 + 3.0;\n    u_xlat16_29
            = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_32;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;\n    u_xlatb1.x
            = _SpecularMapType>=5.0;\n    if(u_xlatb1.x){\n        u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_29 = u_xlat10_1;\n    } else {\n       
            u_xlatb1.x = _SpecularMapType>=4.0;\n        if(u_xlatb1.x){\n           
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_29 = u_xlat10_1;\n        } else {\n            u_xlatb1.x =
            _SpecularMapType>=3.0;\n            if(u_xlatb1.x){\n               
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n               
            u_xlat16_29 = u_xlat10_1;\n            } else {\n                u_xlatb1.x
            = _SpecularMapType>=2.0;\n                if(u_xlatb1.x){\n                   
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).x;\n                   
            u_xlat16_29 = u_xlat10_1;\n                } else {\n                   
            u_xlatb1.x = _SpecularMapType>=1.0;\n                    u_xlat16_29
            = (u_xlatb1.x) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat27) + u_xlat16_2.xyz;\n    u_xlat16_32 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat27 = max(u_xlat16_32, 0.00100000005);\n   
            u_xlat16_32 = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_32);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat9 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9,
            1.0);\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20
            = u_xlat0.x * u_xlat16_11 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20
            * u_xlat0.x + 1.0;\n    u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x
            = u_xlat0.x * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 /
            u_xlat0.x;\n    u_xlat16_11 = u_xlat0.x * 0.157079637;\n    u_xlat0.x
            = max(u_xlat16_11, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat16_11 = u_xlat9 * 0.280000001;\n    u_xlat9 = (-u_xlat16_11) *
            u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = u_xlat16_31 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 55
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 64
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp
            vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_9;\nfloat u_xlat21;\nmediump float
            u_xlat16_22;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float
            u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_22
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_22,
            0.00100000005);\n    u_xlat16_22 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_22) * u_xlat16_2.xyz;\n    u_xlat21 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz
            = vec3(u_xlat21) * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n   
            u_xlat21 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat21 = clamp(u_xlat21,
            0.0, 1.0);\n    u_xlat10_24 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_22 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_22
            = u_xlat10_24 * u_xlat16_22;\n    u_xlat24 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_2.x = min(u_xlat24, 1.0);\n    u_xlat16_9 = u_xlat24 * 0.280000001;\n   
            u_xlat24 = (-u_xlat16_9) * u_xlat16_22 + 1.0;\n    u_xlat16_22 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_22 + (-u_xlat21);\n   
            u_xlat21 = u_xlat16_2.x * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 *
            u_xlat21 + 9.99999975e-05;\n    u_xlat4 = u_xlat16_22 * 0.318309873;\n   
            u_xlat21 = u_xlat4 / u_xlat21;\n    u_xlat16_22 = u_xlat21 * 0.157079637;\n   
            u_xlat21 = max(u_xlat16_22, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n   
            u_xlat16_22 = u_xlat24 * u_xlat21;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x
            = u_xlat0.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_9 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_22 = u_xlat16_22 *
            u_xlat16_2.x;\n    u_xlat16_2.xzw = vec3(u_xlat16_22) * _LightColor0.xyz;\n   
            u_xlat16_2.xzw = u_xlat16_2.xzw * _SpecularColor.xyz;\n    u_xlat16_22
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-u_xlat16_22)
            + u_xlat16_9;\n    u_xlat16_5.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_22 = (-u_xlat16_22) + u_xlat16_5.x;\n    u_xlat16_22 = float(1.0)
            / u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_22
            = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_22 * -2.0
            + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22
            = u_xlat16_22 * u_xlat16_9;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) *
            _LightColor0.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9
            = float(1.0) / u_xlat16_9;\n    u_xlat16_26 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n    u_xlat16_9 = clamp(u_xlat16_9,
            0.0, 1.0);\n    u_xlat16_26 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9
            = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_26;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz
            = log2(u_xlat16_1.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz
            = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_3.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz =
            u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 56
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - VERTEXLIGHT_ON
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - _
        - _RECEIVE_SHADOWS_OFF
        - LIGHTMAP_ON
        - DYNAMICLIGHTMAP_ON
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - INSTANCING_ON
        - TCP2_MOBILE
        - TCP2_RAMPTEXT
        - TCP2_RAMP_CRISP
        - TCP2_RAMP_BANDS
        - TCP2_RAMP_BANDS_CRISP
        - TCP2_SHADOW_LIGHT_COLOR
        - TCP2_SHADOW_TEXTURE
        - TCP2_SPECULAR
        - TCP2_SPECULAR_STYLIZED
        - TCP2_SPECULAR_CRISP
        - TCP2_RIM_LIGHTING
        - TCP2_RIM_LIGHTING_LIGHTMASK
        - TCP2_REFLECTIONS
        - TCP2_REFLECTIONS_FRESNEL
        - TCP2_MATCAP
        - TCP2_MATCAP_MASK
        - TCP2_OCCLUSION
        - _NORMALMAP
        - _ALPHATEST_ON
        - _EMISSION
        - _ALPHAPREMULTIPLY_ON
        - DIRECTIONAL
        - LIGHTPROBE_SH
        - SHADOWS_SCREEN
        - LIGHTMAP_SHADOW_MIXING
        - VERTEXLIGHT_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - _
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - TCP2_MOBILE
        - Keywords:
          - _
          - TCP2_RAMPTEXT
          - TCP2_RAMP_CRISP
          - TCP2_RAMP_BANDS
          - TCP2_RAMP_BANDS_CRISP
        - Keywords:
          - _
          - TCP2_SHADOW_LIGHT_COLOR
        - Keywords:
          - _
          - TCP2_SHADOW_TEXTURE
        - Keywords:
          - _
          - TCP2_SPECULAR
        - Keywords:
          - _
          - TCP2_SPECULAR_STYLIZED
          - TCP2_SPECULAR_CRISP
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - Keywords:
          - _
          - TCP2_REFLECTIONS
        - Keywords:
          - _
          - TCP2_REFLECTIONS_FRESNEL
        - Keywords:
          - _
          - TCP2_MATCAP
        - Keywords:
          - _
          - TCP2_MATCAP_MASK
        - Keywords:
          - _
          - TCP2_OCCLUSION
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _EMISSION
        - Keywords:
          - _
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: QUEUE
          Value: Geometry
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0,
            u_xlat0.xx).x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_6.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz
            * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 67
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 71
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x)
            + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0)
            / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x
            * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat0 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat12 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_6.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_6.x
            = u_xlat12 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_6.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xxx;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 75
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec3
            u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x)
            + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0)
            / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x
            * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat0.xyz = vs_TEXCOORD0.yyy *
            hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * vs_TEXCOORD0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0,
            u_xlat0.xyz).w;\n    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat12)).x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 79
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww
            + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat0.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_6.xyz = _LightColor0.xyz *
            _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xxx;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 83
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4
            _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform highp sampler2D _ShadowMapTexture;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nbool
            u_xlatb4;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz
            = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat4.xyz
            = u_xlat1.xyz / u_xlat1.www;\n    u_xlat4.x = texture2D(_ShadowMapTexture,
            u_xlat4.xy).x;\n    u_xlatb4 = u_xlat4.x<u_xlat4.z;\n    u_xlat16_2.x
            = (u_xlatb4) ? _LightShadowData.x : 1.0;\n    u_xlat16_6.x = (-u_xlat16_2.x)
            + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_6.x + u_xlat16_2.x;\n   
            u_xlat0 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat12 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_6.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_6.x
            = u_xlat12 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_6.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_10
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_10)
            + u_xlat16_6.x;\n    u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_10 = (-u_xlat16_10) + u_xlat16_14;\n    u_xlat16_10 = float(1.0)
            / u_xlat16_10;\n    u_xlat16_6.x = u_xlat16_10 * u_xlat16_6.x;\n    u_xlat16_6.x
            = clamp(u_xlat16_6.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_6.x * -2.0
            + 3.0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_10;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 87
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_4 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_6.x
            = (-u_xlat10_4) + 1.0;\n    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x +
            u_xlat10_4;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_6.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz
            * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 91
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec2 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_NORMAL0.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD0.w =
            0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww
            + u_xlat1.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform
            \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nvoid
            main()\n{\n    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n   
            u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x
            = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;\n    u_xlat0.x
            = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;\n    u_xlat0.x
            = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x
            = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n   
            u_xlat10_4 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_2.x
            = (-u_xlat10_4) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x +
            u_xlat10_4;\n    u_xlat0.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_6.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_10 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_6.x = (-u_xlat16_10) + u_xlat16_6.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_14;\n   
            u_xlat16_10 = float(1.0) / u_xlat16_10;\n    u_xlat16_6.x = u_xlat16_10
            * u_xlat16_6.x;\n    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n   
            u_xlat16_10 = u_xlat16_6.x * -2.0 + 3.0;\n    u_xlat16_6.x = u_xlat16_6.x
            * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_10;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xxx;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 95
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 68
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump float u_xlat16_9;\nmediump
            float u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_16;\nfloat
            u_xlat21;\nmediump float u_xlat16_23;\nmediump float u_xlat16_25;\nmediump
            float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat1.x =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n   
            u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_26 = u_xlat1.x + (-_RimMin);\n    u_xlat16_23 = float(1.0) /
            u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n    if(u_xlatb1){\n       
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_23
            = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 69
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat0 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat12 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_6 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_6
            = u_xlat12 * u_xlat16_6;\n    u_xlat16_6 = u_xlat0.x * u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 72
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SPOT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec4 u_xlat4;\nlowp
            vec4 u_xlat10_4;\nvec2 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump float
            u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float
            u_xlat16_11;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float
            u_xlat16_20;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nfloat u_xlat28;\nlowp
            float u_xlat10_28;\nbool u_xlatb28;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat4 = vs_TEXCOORD0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0]
            * vs_TEXCOORD0.xxxx + u_xlat4;\n    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2]
            * vs_TEXCOORD0.zzzz + u_xlat4;\n    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];\n   
            u_xlatb28 = 0.0<u_xlat4.z;\n    u_xlat16_29 = (u_xlatb28) ? 1.0 : 0.0;\n   
            u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;\n    u_xlat5.xy = u_xlat5.xy +
            vec2(0.5, 0.5);\n    u_xlat28 = texture2D(_LightTexture0, u_xlat5.xy).w;\n   
            u_xlat16_29 = u_xlat28 * u_xlat16_29;\n    u_xlat28 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat28 = texture2D(_LightTextureB0, vec2(u_xlat28)).x;\n   
            u_xlat16_29 = u_xlat28 * u_xlat16_29;\n    u_xlat10_4 = texture2D(_BaseMap,
            vs_TEXCOORD1.xy);\n    u_xlat16_6.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n   
            u_xlat28 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat16_33 = u_xlat28
            * 0.5 + 0.5;\n    u_xlat16_7 = u_xlat28;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_16.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_25 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_25
            = (-u_xlat16_16.x) + u_xlat16_25;\n    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_16.x);\n   
            u_xlat16_16.x = float(1.0) / u_xlat16_25;\n    u_xlat16_33 = u_xlat16_33
            * u_xlat16_16.x;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n   
            u_xlat16_16.x = u_xlat16_33 * -2.0 + 3.0;\n    u_xlat16_33 = u_xlat16_33
            * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_16.x;\n    u_xlat16_33
            = u_xlat16_29 * u_xlat16_33;\n    u_xlat16_16.xyz = vec3(u_xlat16_33)
            * _LightColor0.xyz;\n    u_xlat16_8.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_8.xyz;\n    u_xlat28 =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat28 = max(u_xlat28, 0.0);\n   
            u_xlat28 = (-u_xlat28) + 1.0;\n    u_xlat16_33 = (-_RimMin) + _RimMax;\n   
            u_xlat16_35 = u_xlat28 + (-_RimMin);\n    u_xlat16_33 = float(1.0) /
            u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_35;\n    u_xlat16_33
            = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_33 * -2.0
            + 3.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33
            = u_xlat16_33 * u_xlat16_35;\n    u_xlat16_16.xyz = vec3(u_xlat16_33)
            * u_xlat16_16.xyz;\n    u_xlatb28 = _SpecularMapType>=5.0;\n    if(u_xlatb28){\n       
            u_xlat10_28 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_33
            = u_xlat10_28;\n    } else {\n        u_xlatb28 = _SpecularMapType>=4.0;\n       
            if(u_xlatb28){\n            u_xlat10_28 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_33 = u_xlat10_28;\n        } else {\n            u_xlatb28 =
            _SpecularMapType>=3.0;\n            if(u_xlatb28){\n                u_xlat10_28
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_33
            = u_xlat10_28;\n            } else {\n                u_xlatb28 = _SpecularMapType>=2.0;\n               
            if(u_xlatb28){\n                    u_xlat10_28 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_33 = u_xlat10_28;\n               
            } else {\n                    u_xlatb28 = _SpecularMapType>=1.0;\n                   
            u_xlat16_33 = (u_xlatb28) ? u_xlat10_4.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat27)
            + u_xlat16_2.xyz;\n    u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n   
            u_xlat27 = max(u_xlat16_35, 0.00100000005);\n    u_xlat16_35 = inversesqrt(u_xlat27);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_35);\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_33 * u_xlat16_2.x;\n    u_xlat9 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9, 1.0);\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat0.x * u_xlat16_11
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20 * u_xlat0.x + 1.0;\n   
            u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 / u_xlat0.x;\n    u_xlat16_11
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_11, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_11 = u_xlat9 * 0.280000001;\n   
            u_xlat9 = (-u_xlat16_11) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9
            * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x
            = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_16.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz
            * u_xlat16_8.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 73
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SPOT
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6)
            + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x
            = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0
            + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_6;\n    u_xlat0.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0,
            u_xlat0.xyz).w;\n    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat12)).x;\n   
            u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 76
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT_COOKIE
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp float u_xlat10_3;\nbool
            u_xlatb3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump float
            u_xlat16_10;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nmediump float
            u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nfloat
            u_xlat27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat24 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat24);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat3.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat4.xyz = vs_TEXCOORD0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * vs_TEXCOORD0.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = texture2D(_LightTextureB0,
            vec2(u_xlat25)).x;\n    u_xlat27 = textureCube(_LightTexture0, u_xlat4.xyz).w;\n   
            u_xlat25 = u_xlat25 * u_xlat27;\n    u_xlat10_4 = texture2D(_BaseMap,
            vs_TEXCOORD1.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat16_26 = u_xlat3.x
            * 0.5 + 0.5;\n    u_xlat16_29 = u_xlat3.x;\n    u_xlat16_29 = clamp(u_xlat16_29,
            0.0, 1.0);\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_14
            = (-u_xlat16_6.x) + u_xlat16_14;\n    u_xlat16_26 = u_xlat16_26 + (-u_xlat16_6.x);\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_14;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_6.x;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_26
            = u_xlat25 * u_xlat16_26;\n    u_xlat16_6.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n   
            u_xlat16_7.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_26) * u_xlat16_7.xyz;\n    u_xlat3.x = dot(u_xlat16_2.xyz,
            u_xlat0.xyz);\n    u_xlat3.x = max(u_xlat3.x, 0.0);\n    u_xlat3.x =
            (-u_xlat3.x) + 1.0;\n    u_xlat16_26 = (-_RimMin) + _RimMax;\n    u_xlat16_30
            = u_xlat3.x + (-_RimMin);\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n   
            u_xlat16_26 = u_xlat16_26 * u_xlat16_30;\n    u_xlat16_26 = clamp(u_xlat16_26,
            0.0, 1.0);\n    u_xlat16_30 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_30;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;\n    u_xlatb3 =
            _SpecularMapType>=5.0;\n    if(u_xlatb3){\n        u_xlat10_3 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n        u_xlat16_26 = u_xlat10_3;\n    } else {\n       
            u_xlatb3 = _SpecularMapType>=4.0;\n        if(u_xlatb3){\n           
            u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_26 = u_xlat10_3;\n        } else {\n            u_xlatb3 = _SpecularMapType>=3.0;\n           
            if(u_xlatb3){\n                u_xlat10_3 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_26 = u_xlat10_3;\n           
            } else {\n                u_xlatb3 = _SpecularMapType>=2.0;\n               
            if(u_xlatb3){\n                    u_xlat10_3 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_26 = u_xlat10_3;\n               
            } else {\n                    u_xlatb3 = _SpecularMapType>=1.0;\n                   
            u_xlat16_26 = (u_xlatb3) ? u_xlat10_4.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat24)
            + u_xlat16_2.xyz;\n    u_xlat16_30 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n   
            u_xlat24 = max(u_xlat16_30, 0.00100000005);\n    u_xlat16_30 = inversesqrt(u_xlat24);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat8 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_10 = min(u_xlat8, 1.0);\n    u_xlat16_10
            = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat0.x * u_xlat16_10
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_18 * u_xlat0.x + 1.0;\n   
            u_xlat16 = u_xlat16_10 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat16 / u_xlat0.x;\n    u_xlat16_10
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_10, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_10 = u_xlat8 * 0.280000001;\n   
            u_xlat8 = (-u_xlat16_10) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat8
            * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x
            = u_xlat25 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz
            * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 77
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT_COOKIE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww
            + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n   
            u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat0.xy
            = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy
            = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx + u_xlat0.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD0.zz
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 80
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww
            + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform highp sampler2D _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec2
            u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump float
            u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nmediump float
            u_xlat16_16;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump
            float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat3.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat3.xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat3.xy;\n    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat22 = texture2D(_LightTexture0, u_xlat3.xy).w;\n    u_xlat10_3 =
            texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_4.xyz = u_xlat10_3.xyz
            * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25 = u_xlat1.x;\n   
            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23
            + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0) / u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23 = clamp(u_xlat16_23,
            0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n   
            u_xlat16_23 = u_xlat22 * u_xlat16_23;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat1.x =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n   
            u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_26 = u_xlat1.x + (-_RimMin);\n    u_xlat16_23 = float(1.0) /
            u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n    if(u_xlatb1){\n       
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_23
            = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat22 * u_xlat16_2.x;\n    u_xlat16_2.x
            = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx *
            _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _SpecularColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 81
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat0.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0,
            u_xlat0.xx).x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 96
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nlowp float u_xlat10_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nlowp
            vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump
            float u_xlat16_14;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat
            u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float
            u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat24 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat24);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat3.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat4.xyz = vs_TEXCOORD0.yyy
            * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz
            * vs_TEXCOORD0.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = texture2D(_LightTexture0,
            vec2(u_xlat25)).x;\n    u_xlat10_4 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_5.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz,
            u_xlat3.xyz);\n    u_xlat16_26 = u_xlat3.x * 0.5 + 0.5;\n    u_xlat16_29
            = u_xlat3.x;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_6.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_14 = (-u_xlat16_6.x) + u_xlat16_14;\n   
            u_xlat16_26 = u_xlat16_26 + (-u_xlat16_6.x);\n    u_xlat16_6.x = float(1.0)
            / u_xlat16_14;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_26
            = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_26 * -2.0
            + 3.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26
            = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat25 * u_xlat16_26;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat16_7.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_26)
            * u_xlat16_7.xyz;\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat3.x = max(u_xlat3.x, 0.0);\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n   
            u_xlat16_26 = (-_RimMin) + _RimMax;\n    u_xlat16_30 = u_xlat3.x + (-_RimMin);\n   
            u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_30;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat16_30 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26
            * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_30;\n    u_xlat16_6.xyz
            = vec3(u_xlat16_26) * u_xlat16_6.xyz;\n    u_xlatb3 = _SpecularMapType>=5.0;\n   
            if(u_xlatb3){\n        u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n       
            u_xlat16_26 = u_xlat10_3;\n    } else {\n        u_xlatb3 = _SpecularMapType>=4.0;\n       
            if(u_xlatb3){\n            u_xlat10_3 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_26 = u_xlat10_3;\n        } else {\n            u_xlatb3 = _SpecularMapType>=3.0;\n           
            if(u_xlatb3){\n                u_xlat10_3 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_26 = u_xlat10_3;\n           
            } else {\n                u_xlatb3 = _SpecularMapType>=2.0;\n               
            if(u_xlatb3){\n                    u_xlat10_3 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_26 = u_xlat10_3;\n               
            } else {\n                    u_xlatb3 = _SpecularMapType>=1.0;\n                   
            u_xlat16_26 = (u_xlatb3) ? u_xlat10_4.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat24)
            + u_xlat16_2.xyz;\n    u_xlat16_30 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n   
            u_xlat24 = max(u_xlat16_30, 0.00100000005);\n    u_xlat16_30 = inversesqrt(u_xlat24);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat8 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_10 = min(u_xlat8, 1.0);\n    u_xlat16_10
            = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat0.x * u_xlat16_10
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_18 * u_xlat0.x + 1.0;\n   
            u_xlat16 = u_xlat16_10 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat16 / u_xlat0.x;\n    u_xlat16_10
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_10, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_10 = u_xlat8 * 0.280000001;\n   
            u_xlat8 = (-u_xlat16_10) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat8
            * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x
            = u_xlat25 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz
            * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 97
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 70
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform highp sampler2D _LightTexture0;\nuniform
            highp sampler2D _LightTextureB0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nlowp float u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat2.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz
            = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6.x = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_6.x = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 =
            u_xlat16_6.x * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 +
            9.99999975e-05;\n    u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10
            = u_xlat15 / u_xlat10;\n    u_xlat16_1.x = u_xlat10 * 0.157079637;\n   
            u_xlat10 = max(u_xlat16_1.x, 9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n   
            u_xlat16_1.x = u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x,
            0.0);\n    u_xlat2 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat2;\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat2;\n   
            u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat5.xy
            = u_xlat2.xy / u_xlat2.ww;\n    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlatb10 =
            0.0<u_xlat2.z;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15
            = texture2D(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_6.x = (u_xlatb10)
            ? 1.0 : 0.0;\n    u_xlat16_6.x = u_xlat5.x * u_xlat16_6.x;\n    u_xlat16_6.x
            = u_xlat15 * u_xlat16_6.x;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_1.x;\n   
            u_xlat16_11 = u_xlat0.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_16 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_11
            * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _SpecularColor.xyz;\n    u_xlat16_1.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_1.x)
            + u_xlat16_16;\n    u_xlat16_16 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_16;\n    u_xlat16_1.x = float(1.0)
            / u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_1.x
            * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x
            = u_xlat16_1.x * u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_1.x;\n   
            u_xlat16_6.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_18
            = (-_RimMin) + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz * vec3(u_xlat16_18);\n    u_xlat16_6.xyz = u_xlat16_6.xyz
            * _RimColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 74
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SPOT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform highp sampler2D _LightTextureB0;\nuniform
            highp samplerCube _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat5.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD0.xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0,
            u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat2.xx).x;\n   
            u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = u_xlat5.x * u_xlat16_1.x;\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat5.x * u_xlat16_11;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18
            = (-_RimMin) + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 78
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT_COOKIE
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww
            + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat5.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_1.x
            = u_xlat5.x * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6
            = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n   
            u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx
            * _LightColor0.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = u_xlat5.x * u_xlat16_11;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) *
            _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 82
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4
            _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat0 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy
            = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n   
            u_xlat12 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0,
            u_xlat0.xx).x;\n    u_xlat16_6 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_6
            = u_xlat12 * u_xlat16_6;\n    u_xlat16_6 = u_xlat0.x * u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 84
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec4 u_xlat4;\nlowp
            vec4 u_xlat10_4;\nvec2 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump float
            u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float
            u_xlat16_11;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float
            u_xlat16_20;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nfloat u_xlat28;\nlowp
            float u_xlat10_28;\nbool u_xlatb28;\nmediump float u_xlat16_29;\nmediump
            float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat27 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat27);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n   
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat4 = vs_TEXCOORD0.yyyy
            * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0]
            * vs_TEXCOORD0.xxxx + u_xlat4;\n    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2]
            * vs_TEXCOORD0.zzzz + u_xlat4;\n    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];\n   
            u_xlatb28 = 0.0<u_xlat4.z;\n    u_xlat16_29 = (u_xlatb28) ? 1.0 : 0.0;\n   
            u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;\n    u_xlat5.xy = u_xlat5.xy +
            vec2(0.5, 0.5);\n    u_xlat28 = texture2D(_LightTexture0, u_xlat5.xy).w;\n   
            u_xlat16_29 = u_xlat28 * u_xlat16_29;\n    u_xlat28 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat28 = texture2D(_LightTextureB0, vec2(u_xlat28)).x;\n   
            u_xlat16_29 = u_xlat28 * u_xlat16_29;\n    u_xlat10_4 = texture2D(_BaseMap,
            vs_TEXCOORD1.xy);\n    u_xlat16_6.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n   
            u_xlat28 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat16_33 = u_xlat28
            * 0.5 + 0.5;\n    u_xlat16_7 = u_xlat28;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_16.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_25 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_25
            = (-u_xlat16_16.x) + u_xlat16_25;\n    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_16.x);\n   
            u_xlat16_16.x = float(1.0) / u_xlat16_25;\n    u_xlat16_33 = u_xlat16_33
            * u_xlat16_16.x;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n   
            u_xlat16_16.x = u_xlat16_33 * -2.0 + 3.0;\n    u_xlat16_33 = u_xlat16_33
            * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_16.x;\n    u_xlat16_33
            = u_xlat16_29 * u_xlat16_33;\n    u_xlat16_16.xyz = vec3(u_xlat16_33)
            * _LightColor0.xyz;\n    u_xlat16_8.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_8.xyz;\n    u_xlat28 =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat28 = max(u_xlat28, 0.0);\n   
            u_xlat28 = (-u_xlat28) + 1.0;\n    u_xlat16_33 = (-_RimMin) + _RimMax;\n   
            u_xlat16_35 = u_xlat28 + (-_RimMin);\n    u_xlat16_33 = float(1.0) /
            u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_35;\n    u_xlat16_33
            = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_33 * -2.0
            + 3.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33
            = u_xlat16_33 * u_xlat16_35;\n    u_xlat16_16.xyz = vec3(u_xlat16_33)
            * u_xlat16_16.xyz;\n    u_xlatb28 = _SpecularMapType>=5.0;\n    if(u_xlatb28){\n       
            u_xlat10_28 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_33
            = u_xlat10_28;\n    } else {\n        u_xlatb28 = _SpecularMapType>=4.0;\n       
            if(u_xlatb28){\n            u_xlat10_28 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_33 = u_xlat10_28;\n        } else {\n            u_xlatb28 =
            _SpecularMapType>=3.0;\n            if(u_xlatb28){\n                u_xlat10_28
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).y;\n                u_xlat16_33
            = u_xlat10_28;\n            } else {\n                u_xlatb28 = _SpecularMapType>=2.0;\n               
            if(u_xlatb28){\n                    u_xlat10_28 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_33 = u_xlat10_28;\n               
            } else {\n                    u_xlatb28 = _SpecularMapType>=1.0;\n                   
            u_xlat16_33 = (u_xlatb28) ? u_xlat10_4.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat27)
            + u_xlat16_2.xyz;\n    u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n   
            u_xlat27 = max(u_xlat16_35, 0.00100000005);\n    u_xlat16_35 = inversesqrt(u_xlat27);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_35);\n    u_xlat0.x =
            dot(u_xlat0.xyz, u_xlat16_2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0,
            1.0);\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat16_33 * u_xlat16_2.x;\n    u_xlat9 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_11 = min(u_xlat9, 1.0);\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat0.x * u_xlat16_11
            + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_20 * u_xlat0.x + 1.0;\n   
            u_xlat18 = u_xlat16_11 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x
            + 9.99999975e-05;\n    u_xlat0.x = u_xlat18 / u_xlat0.x;\n    u_xlat16_11
            = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_11, 9.99999975e-05);\n   
            u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_11 = u_xlat9 * 0.280000001;\n   
            u_xlat9 = (-u_xlat16_11) * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = u_xlat9
            * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x
            = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_16.xyz
            * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz
            * u_xlat16_8.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 85
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 88
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n   
            vs_NORMAL0.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform \tmediump float _SpecularMapType;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump float u_xlat16_9;\nmediump
            float u_xlat16_12;\nfloat u_xlat14;\nmediump float u_xlat16_16;\nfloat
            u_xlat21;\nmediump float u_xlat16_23;\nmediump float u_xlat16_25;\nmediump
            float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25
            = u_xlat1.x;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0)
            / u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat1.x =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n   
            u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_26 = u_xlat1.x + (-_RimMin);\n    u_xlat16_23 = float(1.0) /
            u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n    if(u_xlatb1){\n       
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_23
            = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _SpecularColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 89
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec2 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_NORMAL0.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD0.w =
            0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww
            + u_xlat1.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n   
            u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat0.xy
            = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy
            = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx + u_xlat0.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD0.zz
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 92
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec2 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            vs_NORMAL0.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD0.w =
            0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww
            + u_xlat1.xy;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw
            = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _SpecularMapType;\nuniform highp sampler2D _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec2
            u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump float
            u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nmediump float
            u_xlat16_16;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump
            float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n   
            u_xlat1.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat1.xyz
            * u_xlat16_2.xxx;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat3.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat3.xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat3.xy;\n    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat22 = texture2D(_LightTexture0, u_xlat3.xy).w;\n    u_xlat10_3 =
            texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_4.xyz = u_xlat10_3.xyz
            * _BaseColor.xyz;\n    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_23 = u_xlat1.x * 0.5 + 0.5;\n    u_xlat16_25 = u_xlat1.x;\n   
            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_5.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_12 = (-u_xlat16_5.x) + u_xlat16_12;\n    u_xlat16_23 = u_xlat16_23
            + (-u_xlat16_5.x);\n    u_xlat16_5.x = float(1.0) / u_xlat16_12;\n   
            u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_23 = clamp(u_xlat16_23,
            0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_23 * -2.0 + 3.0;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n   
            u_xlat16_23 = u_xlat22 * u_xlat16_23;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * _LightColor0.xyz;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat1.x =
            dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n   
            u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_23 = (-_RimMin) + _RimMax;\n   
            u_xlat16_26 = u_xlat1.x + (-_RimMin);\n    u_xlat16_23 = float(1.0) /
            u_xlat16_23;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_23
            = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_23 * -2.0
            + 3.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_23
            = u_xlat16_23 * u_xlat16_26;\n    u_xlat16_5.xyz = vec3(u_xlat16_23)
            * u_xlat16_5.xyz;\n    u_xlatb1 = _SpecularMapType>=5.0;\n    if(u_xlatb1){\n       
            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n        u_xlat16_23
            = u_xlat10_1;\n    } else {\n        u_xlatb1 = _SpecularMapType>=4.0;\n       
            if(u_xlatb1){\n            u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).z;\n           
            u_xlat16_23 = u_xlat10_1;\n        } else {\n            u_xlatb1 = _SpecularMapType>=3.0;\n           
            if(u_xlatb1){\n                u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).y;\n                u_xlat16_23 = u_xlat10_1;\n           
            } else {\n                u_xlatb1 = _SpecularMapType>=2.0;\n               
            if(u_xlatb1){\n                    u_xlat10_1 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).x;\n                    u_xlat16_23 = u_xlat10_1;\n               
            } else {\n                    u_xlatb1 = _SpecularMapType>=1.0;\n                   
            u_xlat16_23 = (u_xlatb1) ? u_xlat10_3.w : 1.0;\n                }\n           
            }\n        }\n    }\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz *
            vec3(u_xlat21) + u_xlat16_2.xyz;\n    u_xlat16_26 = dot(u_xlat16_2.xyz,
            u_xlat16_2.xyz);\n    u_xlat21 = max(u_xlat16_26, 0.00100000005);\n   
            u_xlat16_26 = inversesqrt(u_xlat21);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(u_xlat16_26);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_23 * u_xlat16_2.x;\n   
            u_xlat7 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9 = min(u_xlat7,
            1.0);\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_16 = u_xlat0.x
            * u_xlat16_9 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat16_16 * u_xlat0.x
            + 1.0;\n    u_xlat14 = u_xlat16_9 * 0.318309873;\n    u_xlat0.x = u_xlat0.x
            * u_xlat0.x + 9.99999975e-05;\n    u_xlat0.x = u_xlat14 / u_xlat0.x;\n   
            u_xlat16_9 = u_xlat0.x * 0.157079637;\n    u_xlat0.x = max(u_xlat16_9,
            9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_9 =
            u_xlat7 * 0.280000001;\n    u_xlat7 = (-u_xlat16_9) * u_xlat16_2.x +
            1.0;\n    u_xlat16_2.x = u_xlat7 * u_xlat0.x;\n    u_xlat16_2.x = max(u_xlat16_2.x,
            0.0);\n    u_xlat16_2.x = u_xlat22 * u_xlat16_2.x;\n    u_xlat16_2.x
            = u_xlat16_25 * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx *
            _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _SpecularColor.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 93
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0,
            0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform highp sampler2D _LightTexture0;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat2.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            u_xlat2.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n   
            u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat5.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD0.xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0,
            u_xlat5.xx).x;\n    u_xlat16_1.x = u_xlat5.x * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat5.x * u_xlat16_11;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 98
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - POINT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp
            vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat
            u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform highp sampler2D _LightTexture0;\nuniform
            highp sampler2D _LightTextureB0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nlowp float u_xlat10_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat2.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz
            = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6.x = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_6.x = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 =
            u_xlat16_6.x * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 +
            9.99999975e-05;\n    u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10
            = u_xlat15 / u_xlat10;\n    u_xlat16_1.x = u_xlat10 * 0.157079637;\n   
            u_xlat10 = max(u_xlat16_1.x, 9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n   
            u_xlat16_1.x = u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x,
            0.0);\n    u_xlat2 = vs_TEXCOORD0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD0.xxxx + u_xlat2;\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD0.zzzz + u_xlat2;\n   
            u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat5.xy
            = u_xlat2.xy / u_xlat2.ww;\n    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlatb10 =
            0.0<u_xlat2.z;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15
            = texture2D(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_6.x = (u_xlatb10)
            ? 1.0 : 0.0;\n    u_xlat16_6.x = u_xlat5.x * u_xlat16_6.x;\n    u_xlat16_6.x
            = u_xlat15 * u_xlat16_6.x;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_1.x;\n   
            u_xlat16_11 = u_xlat0.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_16 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_11
            * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _SpecularColor.xyz;\n    u_xlat16_1.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_1.x)
            + u_xlat16_16;\n    u_xlat16_16 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_16;\n    u_xlat16_1.x = float(1.0)
            / u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_1.x
            * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x
            = u_xlat16_1.x * u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6.x * u_xlat16_1.x;\n   
            u_xlat16_6.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_18
            = (-_RimMin) + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz * vec3(u_xlat16_18);\n    u_xlat16_6.xyz = u_xlat16_6.xyz
            * _RimColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 86
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          - SPOT
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n   
            vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5,
            1.0);\n    u_xlat16_11 = u_xlat5 * 0.280000001;\n    u_xlat5 = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5 * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n   
            u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 *
            u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 90
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;\n    vs_NORMAL0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_3.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_3.x, 0.00100000005);\n   
            u_xlat16_3.x = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat16_3.xxx;\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat0;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n   
            vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww
            + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            highp sampler2D _LightTexture0;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_6 = min(u_xlat5.x,
            1.0);\n    u_xlat16_11 = u_xlat5.x * 0.280000001;\n    u_xlat5.x = (-u_xlat16_11)
            * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_6;\n   
            u_xlat16_6 = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat10 = u_xlat16_6
            * u_xlat15 + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 9.99999975e-05;\n   
            u_xlat15 = u_xlat16_1.x * 0.318309873;\n    u_xlat10 = u_xlat15 / u_xlat10;\n   
            u_xlat16_1.x = u_xlat10 * 0.157079637;\n    u_xlat10 = max(u_xlat16_1.x,
            9.99999975e-05);\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat16_1.x =
            u_xlat5.x * u_xlat10;\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat5.xy = vs_TEXCOORD0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD0.xx
            + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD0.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_1.x
            = u_xlat5.x * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6
            = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n   
            u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx
            * _LightColor0.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = u_xlat5.x * u_xlat16_11;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) *
            _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 94
          PassId: 1
          SubShaderIndex: 1
          Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SPECULAR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - _
        - _RECEIVE_SHADOWS_OFF
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - INSTANCING_ON
        - TCP2_MOBILE
        - TCP2_RAMPTEXT
        - TCP2_RAMP_CRISP
        - TCP2_RAMP_BANDS
        - TCP2_RAMP_BANDS_CRISP
        - TCP2_SHADOW_LIGHT_COLOR
        - TCP2_SHADOW_TEXTURE
        - TCP2_SPECULAR
        - TCP2_SPECULAR_STYLIZED
        - TCP2_SPECULAR_CRISP
        - TCP2_RIM_LIGHTING
        - TCP2_RIM_LIGHTING_LIGHTMASK
        - _NORMALMAP
        - _ALPHATEST_ON
        - _EMISSION
        - _ALPHAPREMULTIPLY_ON
        - POINT
        - DIRECTIONAL
        - SPOT
        - POINT_COOKIE
        - DIRECTIONAL_COOKIE
        - SHADOWS_SHADOWMASK
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_DEPTH
        - SHADOWS_SOFT
        - SHADOWS_SCREEN
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - TCP2_MOBILE
        - Keywords:
          - _
          - TCP2_RAMPTEXT
          - TCP2_RAMP_CRISP
          - TCP2_RAMP_BANDS
          - TCP2_RAMP_BANDS_CRISP
        - Keywords:
          - _
          - TCP2_SHADOW_LIGHT_COLOR
        - Keywords:
          - _
          - TCP2_SHADOW_TEXTURE
        - Keywords:
          - _
          - TCP2_SPECULAR
        - Keywords:
          - _
          - TCP2_SPECULAR_STYLIZED
          - TCP2_SPECULAR_CRISP
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _EMISSION
        - Keywords:
          - _
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - POINT
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - SPOT
        - Keywords:
          - POINT_COOKIE
        - Keywords:
          - DIRECTIONAL_COOKIE
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 1
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: QUEUE
          Value: Geometry
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat
            u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz =
            vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n   
            u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9
            = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9
            = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x,
            0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w),
            u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6)
            + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x
            + u_xlat6;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy +
            _BaseMap_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 99
          PassId: 2
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat
            u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz =
            vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n   
            u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n   
            u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9
            = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9
            = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x,
            0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w),
            u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6)
            + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x
            + u_xlat6;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy +
            _BaseMap_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 100
          PassId: 2
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Geometry
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
        definedKeywords:
        - __
        - INSTANCING_ON
        - _
        - _ALPHATEST_ON
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 1
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Geometry
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        UsePass: 0
      SerializedPassCount: 4
      UsePass: 0
    Shader: {fileID: 4800000, guid: 7ffc1bc2bbb1ef64f84b552b2d2f0619, type: 3}
    ShaderPath: Assets/JMO Assets/Toony Colors Pro/Shaders/Hybrid/TCP2 Hybrid Shader.shader
    ShaderDefinedKeywords:
    - DIRLIGHTMAP_COMBINED
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTMAP_ON
    - TCP2_MATCAP
    - TCP2_MATCAP_MASK
    - TCP2_MOBILE
    - TCP2_OCCLUSION
    - TCP2_RAMPTEXT
    - TCP2_RAMP_BANDS
    - TCP2_RAMP_BANDS_CRISP
    - TCP2_RAMP_CRISP
    - TCP2_REFLECTIONS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SHADOW_TEXTURE
    - TCP2_SPECULAR
    - TCP2_SPECULAR_CRISP
    - TCP2_SPECULAR_STYLIZED
    - _ADDITIONAL_LIGHTS
    - _ADDITIONAL_LIGHTS_VERTEX
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _EMISSION
    - _NORMALMAP
    - _RECEIVE_SHADOWS_OFF
    - _SCREEN_SPACE_OCCLUSION
    - _CASTING_PUNCTUAL_LIGHT_SHADOW
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - DIRECTIONAL_COOKIE
    - POINT
    - POINT_COOKIE
    - SHADOWS_DEPTH
    - SPOT
    - _
    - _MAIN_LIGHT_SHADOWS
    - _MAIN_LIGHT_SHADOWS_CASCADE
    - _ADDITIONAL_LIGHT_SHADOWS
    - _SHADOWS_SOFT
    - LIGHTMAP_SHADOW_MIXING
    - SHADOWS_SHADOWMASK
    - __
    - INSTANCING_ON
    - DYNAMICLIGHTMAP_ON
    - SHADOWS_SOFT
    - SHADOWS_CUBE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: GRABPASS
          Value: true
        - Key: GRABPASS_TEXTURE_NAME
          Value: _GrabTexture
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat
            u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3
            = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump
            float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + (-_Cutoff);\n   
            u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat
            u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3
            = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying
            mediump vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nlowp float
            u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          - _ALPHABLEND_ON
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat
            u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3
            = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying
            mediump vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nlowp float
            u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          - _ALPHABLEND_ON
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - _
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHAMODULATE_ON
        - _REQUIRE_UV2
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _COLORADDSUBDIFF_ON
        - _COLORCOLOR_ON
        - _COLOROVERLAY_ON
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
          - _ALPHAMODULATE_ON
        - Keywords:
          - _
          - _REQUIRE_UV2
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PREVIEWTYPE
          Value: Plane
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz
            * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 2
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n   
            vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz
            * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _FADING_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat2.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n   
            SV_Target0.xyz = u_xlat2.xyz;\n    u_xlat16_1 = u_xlat16_1 + 9.99999975e-05;\n   
            u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _ALPHATEST_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _ALPHABLEND_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat2.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n   
            SV_Target0.xyz = u_xlat2.xyz;\n    u_xlat16_1 = u_xlat16_1 + 9.99999975e-05;\n   
            u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 9
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _ALPHATEST_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n   
            vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _CameraFadeParams;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nfloat u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);\n   
            u_xlat0 = u_xlat0 * _CameraFadeParams.y;\n    u_xlat0 = clamp(u_xlat0,
            0.0, 1.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_1 = u_xlat10_1 * _Color;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n   
            u_xlat1.w = u_xlat0 * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 8
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _ALPHABLEND_ON
          - _FADING_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n   
            u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n   
            vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n   
            u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5,
            0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz
            + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _CameraFadeParams;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nfloat u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp
            vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);\n   
            u_xlat0 = u_xlat0 * _CameraFadeParams.y;\n    u_xlat0 = clamp(u_xlat0,
            0.0, 1.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_1 = u_xlat10_1 * _Color;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n   
            u_xlat1.w = u_xlat0 * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 10
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - _ALPHABLEND_ON
          - _FADING_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - _
        - _REQUIRE_UV2
        - EFFECT_BUMP
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHABLEND_ON
        - _ALPHAMODULATE_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _COLORADDSUBDIFF_ON
        - _COLORCOLOR_ON
        - _COLOROVERLAY_ON
        - _EMISSION
        - _FADING_ON
        - _NORMALMAP
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
        - Keywords:
          - _
          - _REQUIRE_UV2
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 4
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PREVIEWTYPE
          Value: Plane
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      SerializedPassCount: 5
      UsePass: 0
    Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - SHADOWS_DEPTH
    - _ALPHABLEND_ON
    - _ALPHAMODULATE_ON
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _COLORADDSUBDIFF_ON
    - _COLORCOLOR_ON
    - _COLOROVERLAY_ON
    - _REQUIRE_UV2
    - EFFECT_BUMP
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - _EMISSION
    - _FADING_ON
    - _NORMALMAP
    - __
    - INSTANCING_ON
    - PROCEDURAL_INSTANCING_ON
    - _
    - SHADOWS_CUBE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0
            = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n   
            u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx
            * u_xlat16_0 + vs_COLOR1;\n    SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 =
            clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1
            + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3,
            0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp
            float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0
            * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x,
            0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n   
            u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n   
            u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0,
            1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n   
            u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w)
            * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n   
            u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y + -0.00100000005;\n    u_xlat16_0
            = u_xlat16_2.yyyy * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1
            = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy,
            0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    SV_Target0
            = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4
            = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n   
            u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2
            = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 9
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp
            float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x
            = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x
            = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0
            = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy
            = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy
            = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx *
            u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n   
            u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0
            * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat16_1.x = u_xlat0.w * vs_TEXCOORD3.z
            + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0
            = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump
            vec2 u_xlat16_3;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x +
            (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n   
            u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w
            = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n   
            u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0,
            1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n   
            u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w)
            * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat0
            = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 8
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nmediump
            float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy
            = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy
            = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx *
            u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n   
            u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 10
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump
            vec2 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x
            = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x
            = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0
            = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy
            = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy
            = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx *
            u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n   
            u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0
            * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy
            * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n   
            u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n   
            u_xlat16_1.x = u_xlat16_0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0
            = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4
            = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 11
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
        definedKeywords:
        - __
        - OUTLINE_ON
        - UNDERLAY_ON
        - UNDERLAY_INNER
        - UNITY_UI_CLIP_RECT
        - UNITY_UI_ALPHACLIP
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - __
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: GRABPASS
          Value: true
        - Key: GRABPASS_TEXTURE_NAME
          Value: _GrabTexture
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat
            u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3
            = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www
            + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n   
            u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) *
            u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 *
            unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9)
            + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz
            = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump
            float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + (-_Cutoff);\n   
            u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - _
        - _ALPHATEST_ON
        - _ALPHABLEND_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHAMODULATE_ON
        - _REQUIRE_UV2
        - SHADOWS_DEPTH
        - SHADOWS_CUBE
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _METALLICGLOSSMAP
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
          - _ALPHAMODULATE_ON
        - Keywords:
          - _
          - _REQUIRE_UV2
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PREVIEWTYPE
          Value: Plane
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3
            u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump vec3 u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat u_xlat43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_45
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_45 = u_xlat16_45
            + u_xlat16_45;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_45))
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat7.xyz = vec3(u_xlat44) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat44 =
            min(u_xlat8.z, u_xlat44);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43)
            * 0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_45);\n    u_xlat16_46 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_46);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat7.xyz = vec3(u_xlat44)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat44
            = min(u_xlat8.z, u_xlat44);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat44) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_7.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_4.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_45);\n        u_xlat7.xyz = vec3(u_xlat16_46) * u_xlat10_6.xyz
            + (-u_xlat16_4.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_4.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat7.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_46
            = u_xlat0.x * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat43
            + -0.5;\n    u_xlat16_53 = (-u_xlat1.x) + 1.0;\n    u_xlat16_12 = u_xlat16_53
            * u_xlat16_53;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_53
            = u_xlat16_53 * u_xlat16_12;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_53
            + 1.0;\n    u_xlat16_12 = -abs(u_xlat42) + 1.0;\n    u_xlat16_26.x =
            u_xlat16_12 * u_xlat16_12;\n    u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_26.x;\n    u_xlat16_46 = u_xlat16_46
            * u_xlat16_12 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_46;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_46!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_26.xyz
            = _LightColor0.xyz * vec3(u_xlat14) + u_xlat5.xyz;\n    u_xlat1.xyz =
            vec3(u_xlat42) * _LightColor0.xyz;\n    u_xlat16_46 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_53 =
            u_xlat16_53 * u_xlat16_53;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat16_13.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_13.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw
            = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz *
            u_xlat16_26.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_11.xyz
            * vec3(u_xlat28);\n    u_xlat16_11.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_11.xyz + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3
            u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump vec3 u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat u_xlat43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_45
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_45 = u_xlat16_45
            + u_xlat16_45;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_45))
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat7.xyz = vec3(u_xlat44) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat44 =
            min(u_xlat8.z, u_xlat44);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43)
            * 0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_45);\n    u_xlat16_46 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_46);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat7.xyz = vec3(u_xlat44)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat44
            = min(u_xlat8.z, u_xlat44);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat44) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_7.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_4.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_45);\n        u_xlat7.xyz = vec3(u_xlat16_46) * u_xlat10_6.xyz
            + (-u_xlat16_4.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_4.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat7.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_46
            = u_xlat0.x * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat43
            + -0.5;\n    u_xlat16_53 = (-u_xlat1.x) + 1.0;\n    u_xlat16_12 = u_xlat16_53
            * u_xlat16_53;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_53
            = u_xlat16_53 * u_xlat16_12;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_53
            + 1.0;\n    u_xlat16_12 = -abs(u_xlat42) + 1.0;\n    u_xlat16_26.x =
            u_xlat16_12 * u_xlat16_12;\n    u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_26.x;\n    u_xlat16_46 = u_xlat16_46
            * u_xlat16_12 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_46;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_46!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_26.xyz
            = _LightColor0.xyz * vec3(u_xlat14) + u_xlat5.xyz;\n    u_xlat1.xyz =
            vec3(u_xlat42) * _LightColor0.xyz;\n    u_xlat16_46 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_53 =
            u_xlat16_53 * u_xlat16_53;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat16_13.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_13.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw
            = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz *
            u_xlat16_26.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_11.xyz
            * vec3(u_xlat28);\n    u_xlat16_11.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_11.xyz + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position
            = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw
            = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp
            vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3
            u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nfloat u_xlat15;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat
            u_xlat43;\nfloat u_xlat44;\nlowp float u_xlat10_44;\nbool u_xlatb44;\nmediump
            float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump
            float u_xlat16_54;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat43 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat44 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat44 = sqrt(u_xlat44);\n    u_xlat44 = (-u_xlat43)
            + u_xlat44;\n    u_xlat43 = unity_ShadowFadeCenterAndType.w * u_xlat44
            + u_xlat43;\n    u_xlat43 = u_xlat43 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_44 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_45 = (-u_xlat10_44) + 1.0;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45
            + u_xlat10_44;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x
            + u_xlat16_5.x;\n    u_xlat16_5.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_5.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;\n   
            u_xlat4.xyz = vs_TEXCOORD0.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat8.xyz = vec3(u_xlat44) * u_xlat16_5.xyz;\n        u_xlat9.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat44 = min(u_xlat9.z, u_xlat44);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat44) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43) *
            0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_45);\n    u_xlat16_47 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;\n    u_xlat16_47
            = u_xlat16_47 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_47);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat8.xyz = vec3(u_xlat44)
            * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat44
            = min(u_xlat9.z, u_xlat44);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat44) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_8.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_5.xyz = u_xlat10_8.xyz
            * vec3(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_47) * u_xlat10_7.xyz
            + (-u_xlat16_5.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_5.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat8.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_47 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_47
            = u_xlat0.x * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat43
            + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_54 = u_xlat16_48
            * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48
            = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_47 * u_xlat16_48
            + 1.0;\n    u_xlat16_54 = -abs(u_xlat42) + 1.0;\n    u_xlat16_13.x =
            u_xlat16_54 * u_xlat16_54;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n   
            u_xlat16_54 = u_xlat16_54 * u_xlat16_13.x;\n    u_xlat16_47 = u_xlat16_47
            * u_xlat16_54 + 1.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_48;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_47;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_47 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_47!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_6.xyz * vec3(u_xlat14) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz
            * vec3(u_xlat42);\n    u_xlat16_47 = (-u_xlat0.x) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_47 = u_xlat16_47 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47)
            + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_13.xyz + u_xlat0.xyw;\n    u_xlat16_5.xyz
            = u_xlat16_12.xyz * vec3(u_xlat28);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = vec3(u_xlat16_54) * u_xlat16_6.xyz
            + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat4 = u_xlat1.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 *
            u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n   
            u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat2 = u_xlat2
            * u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3
            u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump vec3 u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat u_xlat43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_45
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_45 = u_xlat16_45
            + u_xlat16_45;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_45))
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat7.xyz = vec3(u_xlat44) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat44 =
            min(u_xlat8.z, u_xlat44);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43)
            * 0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_45);\n    u_xlat16_46 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_46);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat7.xyz = vec3(u_xlat44)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat44
            = min(u_xlat8.z, u_xlat44);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat44) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_7.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_4.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_45);\n        u_xlat7.xyz = vec3(u_xlat16_46) * u_xlat10_6.xyz
            + (-u_xlat16_4.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_4.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat7.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_46
            = u_xlat0.x * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat43
            + -0.5;\n    u_xlat16_53 = (-u_xlat1.x) + 1.0;\n    u_xlat16_12 = u_xlat16_53
            * u_xlat16_53;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_53
            = u_xlat16_53 * u_xlat16_12;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_53
            + 1.0;\n    u_xlat16_12 = -abs(u_xlat42) + 1.0;\n    u_xlat16_26.x =
            u_xlat16_12 * u_xlat16_12;\n    u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_26.x;\n    u_xlat16_46 = u_xlat16_46
            * u_xlat16_12 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_46;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_46!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_26.xyz
            = _LightColor0.xyz * vec3(u_xlat14) + u_xlat5.xyz;\n    u_xlat1.xyz =
            vec3(u_xlat42) * _LightColor0.xyz;\n    u_xlat16_46 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_53 =
            u_xlat16_53 * u_xlat16_53;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat16_13.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_13.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw
            = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz *
            u_xlat16_26.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_11.xyz
            * vec3(u_xlat28);\n    u_xlat16_11.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_11.xyz + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3
            u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump
            vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat
            u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nbool u_xlatb49;\nfloat u_xlat51;\nbool
            u_xlatb51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump
            float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) *
            u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);\n   
            u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz = u_xlat16_2.xyz *
            vs_COLOR0.xyz;\n    u_xlat16_4.x = u_xlat16_2.w * vs_COLOR0.w + (-_Cutoff);\n   
            u_xlat16_4.x = u_xlat16_4.x + 9.99999975e-05;\n    u_xlatb49 = u_xlat16_4.x<0.0;\n   
            if(u_xlatb49){discard;}\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x
            + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx)
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb51 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb51){\n        u_xlat51
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat51 = inversesqrt(u_xlat51);\n       
            u_xlat7.xyz = vec3(u_xlat51) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat51 =
            min(u_xlat8.z, u_xlat51);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat51) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49)
            * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n   
            u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11
            = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_11);\n    u_xlatb51 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb51){\n        u_xlatb51 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb51){\n            u_xlat51 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat51 = inversesqrt(u_xlat51);\n            u_xlat7.xyz = vec3(u_xlat51)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat51
            = min(u_xlat8.z, u_xlat51);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat51) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11)
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n   
            }\n    u_xlat51 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat51
            = inversesqrt(u_xlat51);\n    u_xlat7.xyz = vec3(u_xlat51) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_12.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(_Metallic) *
            u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz
            * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n   
            u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60
            = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49
            + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61
            * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61
            = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61
            + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x =
            u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n   
            u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n   
            u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n   
            u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32)
            + 1.0;\n    u_xlat3.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33
            = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n   
            u_xlat48 = u_xlat1.x * u_xlat3.x + u_xlat48;\n    u_xlat48 = u_xlat48
            + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32
            * u_xlat32;\n    u_xlat3.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n   
            u_xlat17 = u_xlat3.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n   
            u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33
            / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48
            * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48
            = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32
            = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n   
            u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 =
            u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) +
            _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 =
            clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz
            * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n   
            u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n   
            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60)
            + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n   
            u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz
            = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz)
            + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz
            + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 17
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position
            = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw
            = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp
            vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3
            u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nfloat u_xlat15;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat
            u_xlat43;\nfloat u_xlat44;\nlowp float u_xlat10_44;\nbool u_xlatb44;\nmediump
            float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump
            float u_xlat16_54;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat43 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat44 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat44 = sqrt(u_xlat44);\n    u_xlat44 = (-u_xlat43)
            + u_xlat44;\n    u_xlat43 = unity_ShadowFadeCenterAndType.w * u_xlat44
            + u_xlat43;\n    u_xlat43 = u_xlat43 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_44 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_45 = (-u_xlat10_44) + 1.0;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45
            + u_xlat10_44;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x
            + u_xlat16_5.x;\n    u_xlat16_5.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_5.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;\n   
            u_xlat4.xyz = vs_TEXCOORD0.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat8.xyz = vec3(u_xlat44) * u_xlat16_5.xyz;\n        u_xlat9.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat44 = min(u_xlat9.z, u_xlat44);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat44) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43) *
            0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_45);\n    u_xlat16_47 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;\n    u_xlat16_47
            = u_xlat16_47 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_47);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat8.xyz = vec3(u_xlat44)
            * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat44
            = min(u_xlat9.z, u_xlat44);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat44) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_8.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_5.xyz = u_xlat10_8.xyz
            * vec3(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_47) * u_xlat10_7.xyz
            + (-u_xlat16_5.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_5.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat8.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_47 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_47
            = u_xlat0.x * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat43
            + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_54 = u_xlat16_48
            * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48
            = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_47 * u_xlat16_48
            + 1.0;\n    u_xlat16_54 = -abs(u_xlat42) + 1.0;\n    u_xlat16_13.x =
            u_xlat16_54 * u_xlat16_54;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n   
            u_xlat16_54 = u_xlat16_54 * u_xlat16_13.x;\n    u_xlat16_47 = u_xlat16_47
            * u_xlat16_54 + 1.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_48;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_47;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_47 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_47!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_6.xyz * vec3(u_xlat14) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz
            * vec3(u_xlat42);\n    u_xlat16_47 = (-u_xlat0.x) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_47 = u_xlat16_47 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47)
            + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_13.xyz + u_xlat0.xyw;\n    u_xlat16_5.xyz
            = u_xlat16_12.xyz * vec3(u_xlat28);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = vec3(u_xlat16_54) * u_xlat16_6.xyz
            + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat4 = u_xlat1.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 *
            u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n   
            u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat2 = u_xlat2
            * u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp
            vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3
            u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump
            vec3 u_xlat16_13;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump vec3 u_xlat16_26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat u_xlat43;\nfloat u_xlat44;\nbool
            u_xlatb44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump
            float u_xlat16_53;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_45
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_45 = u_xlat16_45
            + u_xlat16_45;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_45))
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat7.xyz = vec3(u_xlat44) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat44 =
            min(u_xlat8.z, u_xlat44);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43)
            * 0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_45);\n    u_xlat16_46 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46
            = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_46);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat7.xyz = vec3(u_xlat44)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat44
            = min(u_xlat8.z, u_xlat44);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat44) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_7.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_4.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_45);\n        u_xlat7.xyz = vec3(u_xlat16_46) * u_xlat10_6.xyz
            + (-u_xlat16_4.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_4.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat7.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_46
            = u_xlat0.x * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat43
            + -0.5;\n    u_xlat16_53 = (-u_xlat1.x) + 1.0;\n    u_xlat16_12 = u_xlat16_53
            * u_xlat16_53;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_53
            = u_xlat16_53 * u_xlat16_12;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_53
            + 1.0;\n    u_xlat16_12 = -abs(u_xlat42) + 1.0;\n    u_xlat16_26.x =
            u_xlat16_12 * u_xlat16_12;\n    u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_26.x;\n    u_xlat16_46 = u_xlat16_46
            * u_xlat16_12 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_46;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_46!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_26.xyz
            = _LightColor0.xyz * vec3(u_xlat14) + u_xlat5.xyz;\n    u_xlat1.xyz =
            vec3(u_xlat42) * _LightColor0.xyz;\n    u_xlat16_46 = (-u_xlat0.x) +
            1.0;\n    u_xlat16_53 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_53 =
            u_xlat16_53 * u_xlat16_53;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_53;\n   
            u_xlat16_13.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_13.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw
            = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz *
            u_xlat16_26.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_11.xyz
            * vec3(u_xlat28);\n    u_xlat16_11.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_11.xyz + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat3 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat5 = u_xlat2.yyyy
            * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 *
            u_xlat3 + u_xlat4;\n    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n   
            u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat4;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat3 = u_xlat3
            * u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat0.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat1.zw;\n   
            vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp
            vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3
            u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nfloat u_xlat15;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat
            u_xlat43;\nfloat u_xlat44;\nlowp float u_xlat10_44;\nbool u_xlatb44;\nmediump
            float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump
            float u_xlat16_54;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat43 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat44 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat44 = sqrt(u_xlat44);\n    u_xlat44 = (-u_xlat43)
            + u_xlat44;\n    u_xlat43 = unity_ShadowFadeCenterAndType.w * u_xlat44
            + u_xlat43;\n    u_xlat43 = u_xlat43 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_44 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_45 = (-u_xlat10_44) + 1.0;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45
            + u_xlat10_44;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x
            + u_xlat16_5.x;\n    u_xlat16_5.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_5.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;\n   
            u_xlat4.xyz = vs_TEXCOORD0.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat8.xyz = vec3(u_xlat44) * u_xlat16_5.xyz;\n        u_xlat9.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat44 = min(u_xlat9.z, u_xlat44);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat44) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43) *
            0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_45);\n    u_xlat16_47 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;\n    u_xlat16_47
            = u_xlat16_47 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_47);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat8.xyz = vec3(u_xlat44)
            * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat44
            = min(u_xlat9.z, u_xlat44);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat44) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_8.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_5.xyz = u_xlat10_8.xyz
            * vec3(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_47) * u_xlat10_7.xyz
            + (-u_xlat16_5.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_5.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat8.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_47 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_47
            = u_xlat0.x * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat43
            + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_54 = u_xlat16_48
            * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48
            = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_47 * u_xlat16_48
            + 1.0;\n    u_xlat16_54 = -abs(u_xlat42) + 1.0;\n    u_xlat16_13.x =
            u_xlat16_54 * u_xlat16_54;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n   
            u_xlat16_54 = u_xlat16_54 * u_xlat16_13.x;\n    u_xlat16_47 = u_xlat16_47
            * u_xlat16_54 + 1.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_48;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_47;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_47 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_47!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_6.xyz * vec3(u_xlat14) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz
            * vec3(u_xlat42);\n    u_xlat16_47 = (-u_xlat0.x) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_47 = u_xlat16_47 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47)
            + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_13.xyz + u_xlat0.xyw;\n    u_xlat16_5.xyz
            = u_xlat16_12.xyz * vec3(u_xlat28);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = vec3(u_xlat16_54) * u_xlat16_6.xyz
            + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 8
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3
            u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump
            vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat
            u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nbool u_xlatb49;\nfloat u_xlat51;\nbool
            u_xlatb51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump
            float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) *
            u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);\n   
            u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz = u_xlat16_2.xyz *
            vs_COLOR0.xyz;\n    u_xlat16_4.x = u_xlat16_2.w * vs_COLOR0.w + (-_Cutoff);\n   
            u_xlat16_4.x = u_xlat16_4.x + 9.99999975e-05;\n    u_xlatb49 = u_xlat16_4.x<0.0;\n   
            if(u_xlatb49){discard;}\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x
            + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx)
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb51 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb51){\n        u_xlat51
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat51 = inversesqrt(u_xlat51);\n       
            u_xlat7.xyz = vec3(u_xlat51) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat51 =
            min(u_xlat8.z, u_xlat51);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat51) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49)
            * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n   
            u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11
            = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_11);\n    u_xlatb51 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb51){\n        u_xlatb51 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb51){\n            u_xlat51 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat51 = inversesqrt(u_xlat51);\n            u_xlat7.xyz = vec3(u_xlat51)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat51
            = min(u_xlat8.z, u_xlat51);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat51) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11)
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n   
            }\n    u_xlat51 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat51
            = inversesqrt(u_xlat51);\n    u_xlat7.xyz = vec3(u_xlat51) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_12.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(_Metallic) *
            u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz
            * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n   
            u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60
            = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49
            + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61
            * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61
            = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61
            + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x =
            u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n   
            u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n   
            u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n   
            u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32)
            + 1.0;\n    u_xlat3.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33
            = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n   
            u_xlat48 = u_xlat1.x * u_xlat3.x + u_xlat48;\n    u_xlat48 = u_xlat48
            + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32
            * u_xlat32;\n    u_xlat3.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n   
            u_xlat17 = u_xlat3.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n   
            u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33
            / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48
            * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48
            = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32
            = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n   
            u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 =
            u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) +
            _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 =
            clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz
            * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n   
            u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n   
            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60)
            + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n   
            u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz
            = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz)
            + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz
            + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 10
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position
            = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw
            = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube
            unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nlowp vec4
            u_xlat10_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3
            u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump
            vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat
            u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_21;\nmediump float
            u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat
            u_xlat52;\nbool u_xlatb52;\nfloat u_xlat54;\nlowp float u_xlat10_54;\nbool
            u_xlatb54;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump
            float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz
            = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD2.xy);\n    u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz
            = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_4 = u_xlat16_2.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat16_4 = u_xlat16_4 + 9.99999975e-05;\n    u_xlatb52
            = u_xlat16_4<0.0;\n    if(u_xlatb52){discard;}\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat52 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat54 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n    u_xlat54 = sqrt(u_xlat54);\n    u_xlat54 = (-u_xlat52)
            + u_xlat54;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat54
            + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_54 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n   
            u_xlat16_4 = (-u_xlat10_54) + 1.0;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4
            + u_xlat10_54;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_21.x = u_xlat16_21.x
            + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_21.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_4) * _LightColor0.xyz;\n   
            u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat5);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat5);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_7.xyz);\n    u_xlat5.xyz
            = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz
            = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb54 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb54){\n        u_xlat54
            = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat54 = inversesqrt(u_xlat54);\n       
            u_xlat8.xyz = vec3(u_xlat54) * u_xlat16_21.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat54 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat54 = min(u_xlat9.z, u_xlat54);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat54) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_4 = (-u_xlat52) *
            0.699999988 + 1.70000005;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_4);\n    u_xlat16_57 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57
            = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_57);\n    u_xlatb54 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb54){\n        u_xlatb54 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb54){\n            u_xlat54 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n           
            u_xlat54 = inversesqrt(u_xlat54);\n            u_xlat8.xyz = vec3(u_xlat54)
            * u_xlat16_21.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat54 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat54
            = min(u_xlat9.z, u_xlat54);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat54) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_21.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_4);\n        u_xlat16_63 = u_xlat10_4.w + -1.0;\n       
            u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63
            = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat10_7.xyz
            + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat54 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat54
            = inversesqrt(u_xlat54);\n    u_xlat8.xyz = vec3(u_xlat54) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_13.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(_Metallic) *
            u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz
            * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n   
            u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63
            = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52
            + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64
            * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64
            = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64
            + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x =
            u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63
            * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n   
            u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n   
            u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34)
            + 1.0;\n    u_xlat3.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35
            = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n   
            u_xlat51 = u_xlat1.x * u_xlat3.x + u_xlat51;\n    u_xlat51 = u_xlat51
            + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34
            * u_xlat34;\n    u_xlat3.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n   
            u_xlat18 = u_xlat3.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35
            / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51
            * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51
            = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34
            = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n   
            u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 =
            u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) +
            _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 =
            clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz *
            vec3(u_xlat17) + u_xlat5.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n   
            u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x *
            u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx
            + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz
            = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz)
            + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz
            + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 11
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat4 = u_xlat1.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 *
            u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n   
            u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat2 = u_xlat2
            * u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3
            u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump
            vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat
            u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nbool u_xlatb49;\nfloat u_xlat51;\nbool
            u_xlatb51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump
            float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) *
            u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);\n   
            u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz = u_xlat16_2.xyz *
            vs_COLOR0.xyz;\n    u_xlat16_4.x = u_xlat16_2.w * vs_COLOR0.w + (-_Cutoff);\n   
            u_xlat16_4.x = u_xlat16_4.x + 9.99999975e-05;\n    u_xlatb49 = u_xlat16_4.x<0.0;\n   
            if(u_xlatb49){discard;}\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x
            + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx)
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb51 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb51){\n        u_xlat51
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat51 = inversesqrt(u_xlat51);\n       
            u_xlat7.xyz = vec3(u_xlat51) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat51 =
            min(u_xlat8.z, u_xlat51);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat51) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49)
            * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n   
            u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11
            = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_11);\n    u_xlatb51 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb51){\n        u_xlatb51 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb51){\n            u_xlat51 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat51 = inversesqrt(u_xlat51);\n            u_xlat7.xyz = vec3(u_xlat51)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat51
            = min(u_xlat8.z, u_xlat51);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat51) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11)
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n   
            }\n    u_xlat51 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat51
            = inversesqrt(u_xlat51);\n    u_xlat7.xyz = vec3(u_xlat51) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_12.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(_Metallic) *
            u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz
            * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n   
            u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60
            = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49
            + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61
            * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61
            = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61
            + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x =
            u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n   
            u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n   
            u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n   
            u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32)
            + 1.0;\n    u_xlat3.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33
            = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n   
            u_xlat48 = u_xlat1.x * u_xlat3.x + u_xlat48;\n    u_xlat48 = u_xlat48
            + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32
            * u_xlat32;\n    u_xlat3.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n   
            u_xlat17 = u_xlat3.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n   
            u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33
            / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48
            * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48
            = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32
            = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n   
            u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 =
            u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) +
            _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 =
            clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz
            * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n   
            u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n   
            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60)
            + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n   
            u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz
            = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz)
            + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz
            + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 13
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat3 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat5 = u_xlat2.yyyy
            * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 *
            u_xlat3 + u_xlat4;\n    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n   
            u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat4;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat3 = u_xlat3
            * u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat0.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat1.zw;\n   
            vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform
            lowp samplerCube unity_SpecCube1;\nvarying highp vec3 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp
            vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp
            vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3
            u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat
            u_xlat14;\nfloat u_xlat15;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat42;\nfloat
            u_xlat43;\nfloat u_xlat44;\nlowp float u_xlat10_44;\nbool u_xlatb44;\nmediump
            float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump
            float u_xlat16_54;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat1.xyz = vec3(u_xlat42) *
            u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat2.xyz = u_xlat16_3.xyz
            * vs_COLOR0.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat43 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat44 = dot(u_xlat4.xyz,
            u_xlat4.xyz);\n    u_xlat44 = sqrt(u_xlat44);\n    u_xlat44 = (-u_xlat43)
            + u_xlat44;\n    u_xlat43 = unity_ShadowFadeCenterAndType.w * u_xlat44
            + u_xlat43;\n    u_xlat43 = u_xlat43 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_44 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n   
            u_xlat16_45 = (-u_xlat10_44) + 1.0;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45
            + u_xlat10_44;\n    u_xlat43 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x
            + u_xlat16_5.x;\n    u_xlat16_5.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_5.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_45) * _LightColor0.xyz;\n   
            u_xlat4.xyz = vs_TEXCOORD0.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb44 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb44){\n        u_xlat44
            = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat44 = inversesqrt(u_xlat44);\n       
            u_xlat8.xyz = vec3(u_xlat44) * u_xlat16_5.xyz;\n        u_xlat9.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat44 = min(u_xlat9.z, u_xlat44);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat44) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_45 = (-u_xlat43) *
            0.699999988 + 1.70000005;\n    u_xlat16_45 = u_xlat43 * u_xlat16_45;\n   
            u_xlat16_45 = u_xlat16_45 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_45);\n    u_xlat16_47 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;\n    u_xlat16_47
            = u_xlat16_47 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_47);\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n           
            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat8.xyz = vec3(u_xlat44)
            * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat44 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat44
            = min(u_xlat9.z, u_xlat44);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat44) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_5.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_45);\n        u_xlat16_45 = u_xlat10_8.w + -1.0;\n       
            u_xlat16_45 = unity_SpecCube1_HDR.w * u_xlat16_45 + 1.0;\n        u_xlat16_45
            = u_xlat16_45 * unity_SpecCube1_HDR.x;\n        u_xlat16_5.xyz = u_xlat10_8.xyz
            * vec3(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_47) * u_xlat10_7.xyz
            + (-u_xlat16_5.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_5.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat44 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat44
            = inversesqrt(u_xlat44);\n    u_xlat8.xyz = vec3(u_xlat44) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = vec3(_Metallic) *
            u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz
            * vec3(u_xlat16_45);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n   
            u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_47 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_47
            = u_xlat0.x * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat43
            + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_54 = u_xlat16_48
            * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48
            = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_47 * u_xlat16_48
            + 1.0;\n    u_xlat16_54 = -abs(u_xlat42) + 1.0;\n    u_xlat16_13.x =
            u_xlat16_54 * u_xlat16_54;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n   
            u_xlat16_54 = u_xlat16_54 * u_xlat16_13.x;\n    u_xlat16_47 = u_xlat16_47
            * u_xlat16_54 + 1.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_48;\n   
            u_xlat14 = u_xlat1.x * u_xlat16_47;\n    u_xlat28 = u_xlat43 * u_xlat43;\n   
            u_xlat28 = max(u_xlat28, 0.00200000009);\n    u_xlat29 = (-u_xlat28)
            + 1.0;\n    u_xlat2.x = abs(u_xlat42) * u_xlat29 + u_xlat28;\n    u_xlat29
            = u_xlat1.x * u_xlat29 + u_xlat28;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n   
            u_xlat42 = u_xlat1.x * u_xlat2.x + u_xlat42;\n    u_xlat42 = u_xlat42
            + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat28
            * u_xlat28;\n    u_xlat2.x = u_xlat15 * u_xlat29 + (-u_xlat15);\n   
            u_xlat15 = u_xlat2.x * u_xlat15 + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n   
            u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat15 = u_xlat29
            / u_xlat15;\n    u_xlat42 = u_xlat42 * u_xlat15;\n    u_xlat42 = u_xlat42
            * 3.14159274;\n    u_xlat42 = max(u_xlat42, 9.99999975e-05);\n    u_xlat42
            = sqrt(u_xlat42);\n    u_xlat42 = u_xlat1.x * u_xlat42;\n    u_xlat28
            = u_xlat28 * u_xlat43;\n    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;\n   
            u_xlat16_47 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb1 = u_xlat16_47!=0.0;\n   
            u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat42 = u_xlat42 * u_xlat1.x;\n   
            u_xlat16_45 = (-u_xlat16_45) + _Glossiness;\n    u_xlat16_45 = u_xlat16_45
            + 1.0;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_13.xyz
            = u_xlat16_6.xyz * vec3(u_xlat14) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz
            * vec3(u_xlat42);\n    u_xlat16_47 = (-u_xlat0.x) + 1.0;\n    u_xlat16_6.x
            = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n   
            u_xlat16_47 = u_xlat16_47 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_47)
            + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_13.xyz + u_xlat0.xyw;\n    u_xlat16_5.xyz
            = u_xlat16_12.xyz * vec3(u_xlat28);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz)
            + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = vec3(u_xlat16_54) * u_xlat16_6.xyz
            + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 9
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position
            = u_xlat0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2)
            + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n   
            u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw
            = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube
            unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nlowp vec4
            u_xlat10_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3
            u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump
            vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat
            u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_21;\nmediump float
            u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat
            u_xlat52;\nbool u_xlatb52;\nfloat u_xlat54;\nlowp float u_xlat10_54;\nbool
            u_xlatb54;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump
            float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz
            = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD2.xy);\n    u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz
            = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_4 = u_xlat16_2.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat16_4 = u_xlat16_4 + 9.99999975e-05;\n    u_xlatb52
            = u_xlat16_4<0.0;\n    if(u_xlatb52){discard;}\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat52 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat54 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n    u_xlat54 = sqrt(u_xlat54);\n    u_xlat54 = (-u_xlat52)
            + u_xlat54;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat54
            + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_54 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n   
            u_xlat16_4 = (-u_xlat10_54) + 1.0;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4
            + u_xlat10_54;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_21.x = u_xlat16_21.x
            + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_21.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_4) * _LightColor0.xyz;\n   
            u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat5);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat5);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_7.xyz);\n    u_xlat5.xyz
            = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz
            = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb54 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb54){\n        u_xlat54
            = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat54 = inversesqrt(u_xlat54);\n       
            u_xlat8.xyz = vec3(u_xlat54) * u_xlat16_21.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat54 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat54 = min(u_xlat9.z, u_xlat54);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat54) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_4 = (-u_xlat52) *
            0.699999988 + 1.70000005;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_4);\n    u_xlat16_57 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57
            = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_57);\n    u_xlatb54 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb54){\n        u_xlatb54 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb54){\n            u_xlat54 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n           
            u_xlat54 = inversesqrt(u_xlat54);\n            u_xlat8.xyz = vec3(u_xlat54)
            * u_xlat16_21.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat54 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat54
            = min(u_xlat9.z, u_xlat54);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat54) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_21.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_4);\n        u_xlat16_63 = u_xlat10_4.w + -1.0;\n       
            u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63
            = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat10_7.xyz
            + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat54 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat54
            = inversesqrt(u_xlat54);\n    u_xlat8.xyz = vec3(u_xlat54) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_13.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(_Metallic) *
            u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz
            * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n   
            u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63
            = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52
            + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64
            * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64
            = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64
            + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x =
            u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63
            * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n   
            u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n   
            u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34)
            + 1.0;\n    u_xlat3.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35
            = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n   
            u_xlat51 = u_xlat1.x * u_xlat3.x + u_xlat51;\n    u_xlat51 = u_xlat51
            + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34
            * u_xlat34;\n    u_xlat3.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n   
            u_xlat18 = u_xlat3.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35
            / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51
            * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51
            = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34
            = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n   
            u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 =
            u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) +
            _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 =
            clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz *
            vec3(u_xlat17) + u_xlat5.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n   
            u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x *
            u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx
            + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz
            = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz)
            + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz
            + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 12
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 unity_4LightPosX0;\nuniform
            \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform
            \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat4 = u_xlat1.yyyy
            * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 *
            u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n   
            u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat2 = u_xlat2
            * u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4
            unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform
            \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform
            \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump float _Metallic;\nuniform \tmediump float _Glossiness;\nuniform
            \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nuniform lowp
            samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3
            u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3
            u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump
            vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump
            vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat
            u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nbool u_xlatb49;\nfloat u_xlat51;\nbool
            u_xlatb51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump
            float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) *
            u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);\n   
            u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz = u_xlat16_2.xyz *
            vs_COLOR0.xyz;\n    u_xlat16_4.x = u_xlat16_2.w * vs_COLOR0.w + (-_Cutoff);\n   
            u_xlat16_4.x = u_xlat16_4.x + 9.99999975e-05;\n    u_xlatb49 = u_xlat16_4.x<0.0;\n   
            if(u_xlatb49){discard;}\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x
            + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx)
            + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w
            = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y
            = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n   
            u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz
            = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb51 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb51){\n        u_xlat51
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat51 = inversesqrt(u_xlat51);\n       
            u_xlat7.xyz = vec3(u_xlat51) * u_xlat16_4.xyz;\n        u_xlat8.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz
            = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n       
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n       
            {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x
            = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y
            = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z
            = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n       
            }\n        u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat51 =
            min(u_xlat8.z, u_xlat51);\n        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n       
            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat51) + u_xlat8.xyz;\n    } else
            {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49)
            * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n   
            u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat10_6.w + -1.0;\n   
            u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11
            = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz
            * vec3(u_xlat16_11);\n    u_xlatb51 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb51){\n        u_xlatb51 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb51){\n            u_xlat51 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n           
            u_xlat51 = inversesqrt(u_xlat51);\n            u_xlat7.xyz = vec3(u_xlat51)
            * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz
            / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0,
            0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp
            = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x
            : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y
            : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z
            : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n           
            }\n            u_xlat51 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat51
            = min(u_xlat8.z, u_xlat51);\n            u_xlat8.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz
            * vec3(u_xlat51) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz
            = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n       
            u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n       
            u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz
            = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11)
            * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n   
            }\n    u_xlat51 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat51
            = inversesqrt(u_xlat51);\n    u_xlat7.xyz = vec3(u_xlat51) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_12.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(_Metallic) *
            u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz
            * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n   
            u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz,
            u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60
            = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49
            + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61
            * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61
            = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61
            + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x =
            u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n   
            u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n   
            u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n   
            u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32)
            + 1.0;\n    u_xlat3.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33
            = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n   
            u_xlat48 = u_xlat1.x * u_xlat3.x + u_xlat48;\n    u_xlat48 = u_xlat48
            + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32
            * u_xlat32;\n    u_xlat3.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n   
            u_xlat17 = u_xlat3.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n   
            u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33
            / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48
            * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48
            = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32
            = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n   
            u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 =
            u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) +
            _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 =
            clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz
            * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n   
            u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n   
            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60
            * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60)
            + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n   
            u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz
            = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz)
            + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz
            + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 14
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat3 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat5 = u_xlat2.yyyy
            * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 *
            u_xlat3 + u_xlat4;\n    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n   
            u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat4;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat3 = u_xlat3
            * u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat0.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat1.zw;\n   
            vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube
            unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nlowp vec4
            u_xlat10_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3
            u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump
            vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat
            u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_21;\nmediump float
            u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat
            u_xlat52;\nbool u_xlatb52;\nfloat u_xlat54;\nlowp float u_xlat10_54;\nbool
            u_xlatb54;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump
            float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz
            = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD2.xy);\n    u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz
            = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_4 = u_xlat16_2.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat16_4 = u_xlat16_4 + 9.99999975e-05;\n    u_xlatb52
            = u_xlat16_4<0.0;\n    if(u_xlatb52){discard;}\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat52 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat54 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n    u_xlat54 = sqrt(u_xlat54);\n    u_xlat54 = (-u_xlat52)
            + u_xlat54;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat54
            + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_54 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n   
            u_xlat16_4 = (-u_xlat10_54) + 1.0;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4
            + u_xlat10_54;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_21.x = u_xlat16_21.x
            + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_21.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_4) * _LightColor0.xyz;\n   
            u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat5);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat5);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_7.xyz);\n    u_xlat5.xyz
            = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz
            = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb54 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb54){\n        u_xlat54
            = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat54 = inversesqrt(u_xlat54);\n       
            u_xlat8.xyz = vec3(u_xlat54) * u_xlat16_21.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat54 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat54 = min(u_xlat9.z, u_xlat54);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat54) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_4 = (-u_xlat52) *
            0.699999988 + 1.70000005;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_4);\n    u_xlat16_57 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57
            = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_57);\n    u_xlatb54 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb54){\n        u_xlatb54 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb54){\n            u_xlat54 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n           
            u_xlat54 = inversesqrt(u_xlat54);\n            u_xlat8.xyz = vec3(u_xlat54)
            * u_xlat16_21.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat54 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat54
            = min(u_xlat9.z, u_xlat54);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat54) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_21.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_4);\n        u_xlat16_63 = u_xlat10_4.w + -1.0;\n       
            u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63
            = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat10_7.xyz
            + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat54 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat54
            = inversesqrt(u_xlat54);\n    u_xlat8.xyz = vec3(u_xlat54) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_13.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(_Metallic) *
            u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz
            * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n   
            u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63
            = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52
            + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64
            * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64
            = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64
            + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x =
            u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63
            * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n   
            u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n   
            u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34)
            + 1.0;\n    u_xlat3.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35
            = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n   
            u_xlat51 = u_xlat1.x * u_xlat3.x + u_xlat51;\n    u_xlat51 = u_xlat51
            + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34
            * u_xlat34;\n    u_xlat3.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n   
            u_xlat18 = u_xlat3.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35
            / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51
            * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51
            = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34
            = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n   
            u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 =
            u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) +
            _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 =
            clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz *
            vec3(u_xlat17) + u_xlat5.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n   
            u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x *
            u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx
            + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz
            = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz)
            + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz
            + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 15
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform
            \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying
            mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position
            = u_xlat1;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = u_xlat2.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat3 = (-u_xlat0.xxxx)
            + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n   
            u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat5 = u_xlat2.yyyy
            * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 *
            u_xlat3 + u_xlat4;\n    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n   
            u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;\n    u_xlat0 = u_xlat0 *
            u_xlat0 + u_xlat4;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07,
            9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat3 = u_xlat3
            * u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat0.xyz
            * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x *
            u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n   
            u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz
            = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD3.xyz
            = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    u_xlat0.x = u_xlat1.y
            * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz
            = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat1.zw;\n   
            vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension
            GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define
            texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define
            texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define
            textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform
            \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform
            \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform
            \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tmediump
            float _Glossiness;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube
            unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD2;\nvarying mediump vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nlowp vec4
            u_xlat10_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp
            vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3
            u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump
            vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat
            u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_21;\nmediump float
            u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat
            u_xlat52;\nbool u_xlatb52;\nfloat u_xlat54;\nlowp float u_xlat10_54;\nbool
            u_xlatb54;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump
            float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz
            = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD2.xy);\n    u_xlat16_2 = u_xlat10_2 * _Color;\n    u_xlat3.xyz
            = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_4 = u_xlat16_2.w * vs_COLOR0.w
            + (-_Cutoff);\n    u_xlat16_4 = u_xlat16_4 + 9.99999975e-05;\n    u_xlatb52
            = u_xlat16_4<0.0;\n    if(u_xlatb52){discard;}\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat52 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz
            + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat54 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n    u_xlat54 = sqrt(u_xlat54);\n    u_xlat54 = (-u_xlat52)
            + u_xlat54;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat54
            + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n   
            u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD5.xy
            / vs_TEXCOORD5.ww;\n    u_xlat10_54 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n   
            u_xlat16_4 = (-u_xlat10_54) + 1.0;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4
            + u_xlat10_54;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x
            = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);\n    u_xlat16_21.x = u_xlat16_21.x
            + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_21.xxx)
            + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_4) * _LightColor0.xyz;\n   
            u_xlat5.xyz = vs_TEXCOORD0.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_7.x
            = dot(unity_SHAr, u_xlat5);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat5);\n   
            u_xlat16_7.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_7.xyz);\n    u_xlat5.xyz
            = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz
            = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb54 =
            0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb54){\n        u_xlat54
            = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat54 = inversesqrt(u_xlat54);\n       
            u_xlat8.xyz = vec3(u_xlat54) * u_xlat16_21.xyz;\n        u_xlat9.xyz
            = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz
            = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD1.xyz)
            + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz /
            u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0),
            u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n           
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n           
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n           
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n           
            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat54 = min(u_xlat9.y,
            u_xlat9.x);\n        u_xlat54 = min(u_xlat9.z, u_xlat54);\n        u_xlat9.xyz
            = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat54) + u_xlat9.xyz;\n    } else {\n       
            u_xlat8.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_4 = (-u_xlat52) *
            0.699999988 + 1.70000005;\n    u_xlat16_4 = u_xlat52 * u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0,
            u_xlat8.xyz, u_xlat16_4);\n    u_xlat16_57 = u_xlat10_7.w + -1.0;\n   
            u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57
            = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz
            * vec3(u_xlat16_57);\n    u_xlatb54 = unity_SpecCube0_BoxMin.w<0.999989986;\n   
            if(u_xlatb54){\n        u_xlatb54 = 0.0<unity_SpecCube1_ProbePosition.w;\n       
            if(u_xlatb54){\n            u_xlat54 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n           
            u_xlat54 = inversesqrt(u_xlat54);\n            u_xlat8.xyz = vec3(u_xlat54)
            * u_xlat16_21.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;\n           
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz =
            (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz
            = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3
            hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x)
            ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y)
            ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z)
            ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n           
            }\n            u_xlat54 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat54
            = min(u_xlat9.z, u_xlat54);\n            u_xlat9.xyz = vs_TEXCOORD1.xyz
            + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz
            * vec3(u_xlat54) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz
            = u_xlat16_21.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1,
            u_xlat8.xyz, u_xlat16_4);\n        u_xlat16_63 = u_xlat10_4.w + -1.0;\n       
            u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63
            = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_4.xyz
            * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat10_7.xyz
            + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www
            * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n   
            }\n    u_xlat54 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat54
            = inversesqrt(u_xlat54);\n    u_xlat8.xyz = vec3(u_xlat54) * vs_TEXCOORD0.xyz;\n   
            u_xlat16_13.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz + vec3(-0.220916301,
            -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(_Metallic) *
            u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57
            = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz
            * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n   
            u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz,
            u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63
            = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52
            + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64
            * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64
            = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64
            + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x =
            u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n   
            u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63
            * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n   
            u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n   
            u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34)
            + 1.0;\n    u_xlat3.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35
            = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n   
            u_xlat51 = u_xlat1.x * u_xlat3.x + u_xlat51;\n    u_xlat51 = u_xlat51
            + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34
            * u_xlat34;\n    u_xlat3.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n   
            u_xlat18 = u_xlat3.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35
            / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51
            * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51
            = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34
            = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n   
            u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 =
            u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n   
            u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) +
            _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 =
            clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz *
            vec3(u_xlat17) + u_xlat5.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n   
            u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x *
            u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x
            = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx
            + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n   
            u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz
            = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz)
            + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz
            + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz
            + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 16
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
          - _ALPHATEST_ON
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: SHADOWSUPPORT
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: PREVIEWTYPE
            Value: Plane
          - Key: PERFORMANCECHECKS
            Value: False
        definedKeywords:
        - __
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - _
        - _REQUIRE_UV2
        - DIRECTIONAL
        - EFFECT_BUMP
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - LIGHTMAP_SHADOW_MIXING
        - LIGHTPROBE_SH
        - SHADOWS_SCREEN
        - SHADOWS_SHADOWMASK
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - VERTEXLIGHT_ON
        - _ALPHABLEND_ON
        - _ALPHAMODULATE_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _EMISSION
        - _FADING_ON
        - _METALLICGLOSSMAP
        - _NORMALMAP
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
        - Keywords:
          - _
          - _REQUIRE_UV2
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 4
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: SHADOWSUPPORT
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: PREVIEWTYPE
          Value: Plane
        - Key: PERFORMANCECHECKS
          Value: False
        UsePass: 0
      SerializedPassCount: 6
      UsePass: 0
    Shader: {fileID: 210, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - SHADOWS_DEPTH
    - _ALPHABLEND_ON
    - _ALPHAMODULATE_ON
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _METALLICGLOSSMAP
    - _REQUIRE_UV2
    - DIRECTIONAL
    - EFFECT_BUMP
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - VERTEXLIGHT_ON
    - _EMISSION
    - _FADING_ON
    - _NORMALMAP
    - __
    - INSTANCING_ON
    - PROCEDURAL_INSTANCING_ON
    - _
    - SHADOWS_CUBE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _TintColor;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0 * _TintColor;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0
            * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w,
            0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: PREVIEWTYPE
            Value: Plane
        definedKeywords:
        - __
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords: []
        - Keywords:
          - SOFTPARTICLES_ON
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        - Key: PREVIEWTYPE
          Value: Plane
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 203, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - __
    - SOFTPARTICLES_ON
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4
            u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: PREVIEWTYPE
            Value: Plane
        definedKeywords:
        - _
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        - Key: PREVIEWTYPE
          Value: Plane
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - _
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n   
            vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n   
            vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp
            vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid
            main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x
            * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x
            = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6
            = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x
            * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0,
            0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x
            = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x =
            u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n   
            u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz
            : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        definedKeywords:
        - _SUNDISK_NONE
        - _SUNDISK_SIMPLE
        - _SUNDISK_HIGH_QUALITY
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          - _SUNDISK_HIGH_QUALITY
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Background
        - Key: RENDERTYPE
          Value: Background
        - Key: PREVIEWTYPE
          Value: Skybox
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool
            u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 =
            u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx,
            _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw,
            vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n   
            u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z
            ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n   
            u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w
            = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy
            = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0
            = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        definedKeywords:
        - __
        - UNITY_UI_CLIP_RECT
        - UNITY_UI_ALPHACLIP
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        - Key: CANUSESPRITEATLAS
          Value: true
        - Key: PREVIEWTYPE
          Value: Plane
        UsePass: 0
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Sprite.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - __
  _modifiedShaders: []
